<?xml version="1.0"?>
<Definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ShipBlueprints>
    <ShipBlueprint xsi:type="MyObjectBuilder_ShipBlueprintDefinition">
      <Id Type="MyObjectBuilder_ShipBlueprintDefinition" Subtype="CHKN CO NSX" />
      <DisplayName>î€°Mr. Gherkin</DisplayName>
      <DLC>ScrapRace</DLC>
      <CubeGrids>
        <CubeGrid>
          <SubtypeName />
          <EntityId>105558025162243370</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24996.166479682848" y="26560.935517007885" z="233562.91552091742" />
            <Forward x="0.601870239" y="0.393389761" z="0.6949794" />
            <Up x="-0.448503733" y="0.88655597" z="-0.113414779" />
            <Orientation>
              <X>-0.1921387</X>
              <Y>0.900317967</Y>
              <Z>-0.140729353</Z>
              <W>-0.364287674</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallShortSuspension3x3</SubtypeName>
              <EntityId>138492152917857871</EntityId>
              <Min x="-1" y="5" z="10" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>FR Wheel Suspension</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>119044392593571637</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0.28488788</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>0.185</Height>
              <MaxSteerAngle>0.7329843</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>360</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.16</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>128267069821321298</EntityId>
              <Min x="0" y="4" z="1" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>99426678207104482</EntityId>
              <Min x="0" y="4" z="2" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>107628779364110892</EntityId>
              <Min x="0" y="4" z="3" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>133066881076616263</EntityId>
              <Min x="0" y="4" z="4" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>98528267599759383</EntityId>
              <Min x="0" y="4" z="5" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>100892602629907790</EntityId>
              <Min x="0" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>136986315112695133</EntityId>
              <Min x="0" y="4" z="7" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="0" y="6" z="14" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-3" y="6" z="14" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>132071972474887425</EntityId>
              <Min x="0" y="5" z="1" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <Text>11m/s
5deg</Text>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>TEXT_AND_IMAGE</ContentType>
                          <SelectedScript>TSS_ClockDigital</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278249476</PackedValue>
                            <X>4</X>
                            <Y>232</Y>
                            <Z>0</Z>
                            <R>4</R>
                            <G>232</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Big Mac - Programmable Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Program>public Program()
{
    Runtime.UpdateFrequency = UpdateFrequency.Update1;
}

string FrontLeftWheelName = "FL Wheel Suspension";
string FrontRightWheelName = "FR Wheel Suspension";
string ControlSeatName = "Rover Cockpit"; // Name of Control Seat/Remote Control.
string RearWheelTag = "-GWS"; // Tag for rear wheels with steering angle to be managed.

float MinimumSpeedThreshold = 70;  // Speed in m/s where the steering angle starts to decrease.
float MaximumSpeedThreshold = 85; // Speed in m/s where the steering angle stops decreasing.
float MaxSteerAngle = 42f; // Your usual steering angle for the front wheels
float MinSteerAngle = 33f; // Minimum steering angle

double speed1 = 25; // Full rear wheel steering
double speed2 = 65; // No rear wheel steering
double MaxRearSteerAngle = 6; // Maximum rear wheel turn radius
double MinRearSteerAngle = 0; // Inverted rear wheel steering above speed2

bool ManageInvertSteering = true; // Set to false if you don't want to manage inverted steering
bool WriteToScreen = true; // Writes speed and max wheel angle to the main screen
string GyroName = "Flip Gyroscope"; // Run script with 'invertgyro' to invert the gyroscope's turn overrides

// Add enum for different modes
public enum SteeringMode
{
    Mode1,
    Mode2,
    Mode3
}

// Add a variable to store the current mode
private SteeringMode currentMode = SteeringMode.Mode1;

public void Main(string argument, UpdateType updateSource)
{
    IMyMotorSuspension FL;
    FL = GridTerminalSystem.GetBlockWithName(FrontLeftWheelName) as IMyMotorSuspension;
    IMyMotorSuspension FR;
    FR = GridTerminalSystem.GetBlockWithName(FrontRightWheelName) as IMyMotorSuspension;

    IMyShipController Cockpit;
    Cockpit = GridTerminalSystem.GetBlockWithName(ControlSeatName) as IMyShipController;

    double CurrentSpeedDouble = 0; // Assign a default value
    float CurrentSpeed = 0; // Assign a default value

    if (Cockpit != null)
    {
        CurrentSpeedDouble = Cockpit.GetShipSpeed();
        CurrentSpeed = Convert.ToSingle(CurrentSpeedDouble);

        // Calculate front wheel steering based on ship speed
        float SpeedRange = MaximumSpeedThreshold - MinimumSpeedThreshold;
        float SteerRange = MaxSteerAngle - MinSteerAngle;
        float SteerMultiplier = SpeedRange / SteerRange;
        float DesiredAngle;

        if (CurrentSpeed &gt; MinimumSpeedThreshold &amp;&amp; CurrentSpeed &lt; MaximumSpeedThreshold)
        {
            DesiredAngle = MaxSteerAngle - ((CurrentSpeed - MinimumSpeedThreshold) / SteerMultiplier);
            FL.MaxSteerAngle = DesiredAngle / 57.3f;
            FR.MaxSteerAngle = DesiredAngle / 57.3f;
        }
        if (CurrentSpeed &lt; MinimumSpeedThreshold)
        {
            FL.MaxSteerAngle = MaxSteerAngle / 57.3f;
            FR.MaxSteerAngle = MaxSteerAngle / 57.3f;
        }
    }

    // Rear wheel steering control
    List&lt;IMyMotorSuspension&gt; allWheels = new List&lt;IMyMotorSuspension&gt;();
    List&lt;IMyMotorSuspension&gt; managedWheels = new List&lt;IMyMotorSuspension&gt;();
    allWheels.Clear();
    GridTerminalSystem.GetBlocksOfType(allWheels);
    managedWheels.Clear();

    foreach (IMyMotorSuspension wheel in allWheels)
    {
        if (wheel.CustomName.Contains(RearWheelTag))
        {
            managedWheels.Add(wheel);
        }
    }

    IMyGyro gyro = GridTerminalSystem.GetBlockWithName(GyroName) as IMyGyro;

    // Check for mode selection argument
    if (!string.IsNullOrEmpty(argument))
    {
        if (argument.ToLower() == "mode1")
        {
            currentMode = SteeringMode.Mode1;
        }
        else if (argument.ToLower() == "mode2")
        {
            currentMode = SteeringMode.Mode2;
        }
        else if (argument.ToLower() == "mode3")
        {
            currentMode = SteeringMode.Mode3;
        }
    }

    // Use the current mode for customization
    switch (currentMode)
    {
        case SteeringMode.Mode1:
            // Customize parameters for Mode 1
            MinimumSpeedThreshold = 70;
            MaximumSpeedThreshold = 90;
            MaxSteerAngle = 42f;
            MinSteerAngle = 33f;
            // ... (customize other parameters as needed)
            break;

        case SteeringMode.Mode2:
            // Customize parameters for Mode 2
            MinimumSpeedThreshold = 70;
            MaximumSpeedThreshold = 90;
            MaxSteerAngle = 42f;
            MinSteerAngle = 33f;
            // ... (customize other parameters as needed)
            break;

        case SteeringMode.Mode3:
            // Customize parameters for Mode 3
            MinimumSpeedThreshold = 70;
            MaximumSpeedThreshold = 90;
            MaxSteerAngle = 42f;
            MinSteerAngle = 33f;
            // ... (customize other parameters as needed)
            break;

        // Add more cases for additional modes if needed

        default:
            break;
    }

    if (Cockpit != null)
    {
        float maxAngle = (float)MathHelper.Clamp(-MaxRearSteerAngle / 57.6 / (speed2 - speed1) * (CurrentSpeed - speed2), MinRearSteerAngle / 57.6, MaxRearSteerAngle / 57.6);

        if (WriteToScreen)
        {
            Me.GetSurface(0).ContentType = ContentType.TEXT_AND_IMAGE;
            Me.GetSurface(0).WriteText($"{(int)CurrentSpeed}m/s\n{(int)(maxAngle * 57.6)}deg");
        }

        foreach (IMyMotorSuspension wheel in managedWheels)
        {
            wheel.MaxSteerAngle = Math.Abs(maxAngle);

            if (ManageInvertSteering)
            {
                if (maxAngle &lt; 0)
                    wheel.InvertSteer = true;
                else
                    wheel.InvertSteer = false;
            }
        }
    }

    if (gyro != null &amp;&amp; argument == "invertgyro")
    {
        gyro.Yaw = -gyro.Yaw;
        gyro.Pitch = -gyro.Pitch;
        gyro.Roll = -gyro.Roll;
    }
}</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="3" y="6" z="13" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallShortSuspension3x3mirrored</SubtypeName>
              <EntityId>95819821675151212</EntityId>
              <Min x="1" y="5" z="1" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>rear wheel - left RL -GWS</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>85253002342629107</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>0.185</Height>
              <MaxSteerAngle>0.104166664</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>360</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.11</StrengthNew>
              <FrictionNew>0.05</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>false</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>137619676454975349</EntityId>
              <Min x="3" y="7" z="10" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallShortSuspension3x3</SubtypeName>
              <EntityId>133422318628416353</EntityId>
              <Min x="-1" y="5" z="1" />
              <BlockOrientation Forward="Up" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>rear wheel - right RR -GWS</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>97571824882095247</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>0</SteerAngle>
              <Steering>false</Steering>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>0.185</Height>
              <MaxSteerAngle>0.104166664</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>360</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.11</StrengthNew>
              <FrictionNew>0.05</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>false</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>129054087814070129</EntityId>
              <Min x="-1" y="4" z="1" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>127784153862525038</EntityId>
              <Min x="-1" y="4" z="2" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>88947707319679126</EntityId>
              <Min x="-1" y="4" z="3" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>128180726596669732</EntityId>
              <Min x="-1" y="4" z="4" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>101493668307288476</EntityId>
              <Min x="-1" y="4" z="5" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>78266658957022433</EntityId>
              <Min x="-1" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>106511087602741070</EntityId>
              <Min x="-1" y="4" z="7" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLight</SubtypeName>
              <EntityId>103220663160931842</EntityId>
              <Min x="-2" y="4" z="3" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLightInv</SubtypeName>
              <EntityId>111648343803630985</EntityId>
              <Min x="2" y="4" z="3" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLightInv</SubtypeName>
              <EntityId>132196613615615120</EntityId>
              <Min x="-2" y="4" z="7" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLight</SubtypeName>
              <EntityId>111095960587027579</EntityId>
              <Min x="2" y="4" z="7" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>89499576169200071</EntityId>
              <Min x="-2" y="4" z="4" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>72153118506932326</EntityId>
              <Min x="1" y="4" z="1" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>95093834899533858</EntityId>
              <Min x="1" y="4" z="2" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>133537823418882608</EntityId>
              <Min x="1" y="4" z="3" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>116986437772638346</EntityId>
              <Min x="1" y="4" z="4" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>86922567205381950</EntityId>
              <Min x="1" y="4" z="5" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>134757437900070468</EntityId>
              <Min x="1" y="4" z="6" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>88063190318760615</EntityId>
              <Min x="1" y="4" z="7" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>79768868120900606</EntityId>
              <Min x="-2" y="4" z="5" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLightInv</SubtypeName>
              <EntityId>124706172607064976</EntityId>
              <Min x="2" y="4" z="6" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>120148634155930086</EntityId>
              <Min x="2" y="4" z="4" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>114938417748511002</EntityId>
              <Min x="2" y="4" z="5" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLight</SubtypeName>
              <EntityId>128436514824012462</EntityId>
              <Min x="-2" y="4" z="6" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorSuspension">
              <SubtypeName>SmallShortSuspension3x3mirrored</SubtypeName>
              <EntityId>95823770898357250</EntityId>
              <Min x="1" y="5" z="10" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>FL Wheel Suspension</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>103413192555911942</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <SteerAngle>-0.28488788</SteerAngle>
              <Damping>0.9</Damping>
              <Strength>3.40282347E+38</Strength>
              <Propulsion>true</Propulsion>
              <Friction>2.8</Friction>
              <Power>0</Power>
              <Height>0.185</Height>
              <MaxSteerAngle>0.7329843</MaxSteerAngle>
              <InvertSteer>false</InvertSteer>
              <InvertPropulsion>false</InvertPropulsion>
              <SpeedLimit>360</SpeedLimit>
              <PowerNew>1</PowerNew>
              <StrengthNew>0.16</StrengthNew>
              <FrictionNew>1</FrictionNew>
              <AirShockEnabled>false</AirShockEnabled>
              <BrakingEnabled>true</BrakingEnabled>
              <SteeringOverride>0</SteeringOverride>
              <PropulsionOverride>0</PropulsionOverride>
              <IsParkingEnabled>true</IsParkingEnabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>117466815768932745</EntityId>
              <Min x="1" y="5" z="9" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Left Door - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>3</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Reverse</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                      <GroupName>Left Hinges</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                      <GroupName>Left Door Merge Blocks</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Reverse</Action>
                      <BlockEntityId>75806672479594834</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>113549220875615496</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>117208994048726709</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>102304603304895442</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>132852538502231738</EntityId>
              <Min x="-1" y="5" z="9" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Right Door - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>4</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Reverse</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                      <GroupName>Right Hinges</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                      <GroupName>Right Door Merge Blocks</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>124201471329159246</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>91228202518520350</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>79775549899503497</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="-3" y="6" z="12" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>143418618258137809</EntityId>
              <Min x="0" y="6" z="10" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0.6472222" y="-0.73" z="-0.18" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value />
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <Text>DAS - Driver Assisting System  --

DAS.DisplayScheduler failure
DAS.CameraScheduler failure
DAS.FDS failure
DAS.SDO failure

Instructions used: 144/50000
Average(EMA) run time: 0.017 ms
Last run time: 0.034 ms
_</Text>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_Gravity</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278249476</PackedValue>
                            <X>4</X>
                            <Y>232</Y>
                            <Z>0</Z>
                            <R>4</R>
                            <G>232</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>DAS - Programmable Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>false</Enabled>
              <Program>/*
* Author: Wanderer

Version: 2.4.2
- Slight improvement of wheel adding algorithm.

*/
class DriverAssistingSystem
{
// General settings.
double _MaxForwardAccel=10000;// Maximum forward acceleration in m/s^999.
double _MaxBackwardAccel=0.1;// Maximum backward acceleration in m/s^2.
double _MaxPowerConsumption=100;// Maximum allowed power output to wheels.
double _NaturalPitchDegree=0;// If vehicle buld with chassis incline in mind,put this incline here.
double _SafeFallVelocity=15;// Vertical velocity which FDS will try to achive near ground level.
double _LeanToSurfaceDistance=10;// Distance at which script will align vehicle to surface curve. Downward camera required.
string _StopLightsGroupName="Stop lights";// Group name of stop/back/break lights which script will search.
string _TurnLightsGroupName="Turn lights";// Group name of stop/back/break lights which script will search.
string _SubgridWheelsGroupName="Subgrid Wheels";// Group of wheels on subgrid. These wheels controll will be overrien.
string _BackupBeeperName="Back-up beeper";// Sound block(s) that will triggered to play when driving backward.
HandbrakeMode _HandbrakeMode=HandbrakeMode.Off;// Auto handbrakes mode:
// HandbrakeMode.Semi-turn hand brakes ON when no one control vehicle,don't turn OFF when someone get control;
// HandbrakeMode.Auto-turn hand brakes ON when no one control vehicle,turn OFF when someone get control;
// HandbrakeMode.Off -don't turn hand brakes ON when no one control vehicle and don't turn OFF when someone get control.
AckermannFocalPointRef _AckermannFocalPoint=AckermannFocalPointRef.CoM;// Define main turn axle for all wheels
// AckermannFocalPointRef.CoM-main turn axel will be vector from vehicle CoM to Ackermann focal point. Most stable.
// AckermannFocalPointRef.RC-main turn axel will be vector from RC block position to Ackermann focal point. RC block should be between left and right wheels.
// AckermannFocalPointRef.BSphere-main turn axel will be vector from bounding sphere centre to Ackermann focal point.
bool _UseJumpJets=true;// Engage upward thrusters when Spacebar pressed.
bool _UseAdaptiveSteering=false;// Reduce steering angle when driving at high speed.
bool _UseAckermannSteering=false;// Use Ackermann steering scheme.
bool _UseDASAirShock=true; // Use air shock system for suspensions provided by DAS instead of vanilla one.
bool _UseHillDescentControl=false;// Use use soft brakes if lateral velocity exceeds speed limit.
bool _UseGSA=false;// Override gyros or not.
bool _UseTCS=true;// Use all stuff tied to suspensions.
bool _UseFDS=true;// Override upward thrusters or not.
bool _UseSDO=false;// Override other thrusters?
bool _UseLights=true;// Handle stop and turn lights or not.

// Suspension settings.
double _FrwrdSpeedLimitKPH=359;// Suspension wheels speed limit when driving worward.
double _BckwrdSpeedLimitKPH=55;// Suspension wheels speed limit when driving backward.
double _MaxSteerAngleDegree=42;// Suspension wheel maximum steering angle.
double _SusHeightOffset=0.040;// Suspension heght offset that will be setted by script. Can be changed.
double _SusStrenght=11;// Suspension strenght that will be setted by script. Can be changed. Negative value enables auto calculation.
double _SusValueChangeRate=1;// Rate at wich script will adjuct height offset and strenght related to previous value. Mesured in game ticks.

// Autopilot settings.
string _AutopilotTimerName="Timer Block DAS Waypoint";// This timer block will be triggered at every waypoint.
double _AutopilotAccuracy=0.75;// How close to waypoint vehicle should be to consider it's reached. Higher-closer.
double _AutopilotWait=5;// Wait this time in sec when waypoint reached.
double _AutopilotSpeedLimitKMP=60;// Will drive at this speed.

//-------------------------------------------------------------------
// Script stuff. Modifying anything below will void your warranty.
//-------------------------------------------------------------------
enum HandbrakeMode : byte {Semi,Auto,Off,END_OF_ENUM}
enum AckermannFocalPointRef : byte {CoM,RC,BSphere}

class RuntimeProfiler
{
Program Parent;
double RunTimeAvrEMA;
double EMA_A;
int CycleNum;
int Counter;
StringBuilder Str;
IMyTextSurface MyLCD;
IEnumerator&lt;bool&gt; StMachine;
public int SkipCycles;
public string Caption;
public string Memo;
public RuntimeProfiler(Program parent,int skipCycles=0,int skipOffset=0,double emaA=0.003)
{
Parent=parent;
SkipCycles=skipCycles;
CycleNum=skipOffset;
EMA_A=emaA;
Str=new StringBuilder();
if(Parent.Me.CustomData=="")
MyLCD=(Parent.Me as IMyTextSurfaceProvider).GetSurface(0);
StMachine=UpdateIterator();
}
public void Update()
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
RunTimeAvrEMA=EMA_A*Parent.Runtime.LastRunTimeMs+(1-EMA_A)*RunTimeAvrEMA;
yield return true;
}
CycleNum=0;
Str.Clear();
Str.Append(Caption);
++Counter;
switch(Counter % 4)
{
case 0: Str.Append("--");break;
case 1: Str.Append("\\");break;
case 2: Str.Append(" |");break;
case 3: Str.Append("/");break;
}
Str.AppendFormat("\n{0}\n",Memo);
RunTimeAvrEMA=EMA_A*Parent.Runtime.LastRunTimeMs+(1-EMA_A)*RunTimeAvrEMA;
Str.AppendFormat("Instructions used: {0:G}/{1:G}\nAverage(EMA) run time: {2:F3} ms\nLast run time: {3:F3} ms\n{4}",
Parent.Runtime.CurrentInstructionCount,
Parent.Runtime.MaxInstructionCount,
RunTimeAvrEMA,
Parent.Runtime.LastRunTimeMs,
Counter % 2==0 ? "_" : "");
Parent.Echo(Str.ToString());
MyLCD?.WriteText(Str);
}
}

class PID
{
public double Kp {get;set;}
public double Ki {get;set;}
public double Kd {get;set;}
public double Signal {get;set;}
double ValuePrev;
double Integral;
double TimePrev;
public PID(double kp=1,double ki=1,double kd=1)
{
Kp=kp;
Ki=ki;
Kd=kd;
}
public void Reset()
{
ValuePrev=0;
Integral=0;
TimePrev=0;
Signal=0;
}
public double GetSignal(double value,double time=0)
{
if(Ki!=0)
Integral+=value*0.001;
double dt=time==0 ? 1 : time-TimePrev;
Signal=Kp*value+Ki*Integral*dt+Kd*(value-ValuePrev)/dt;
ValuePrev=value;
TimePrev=time;
return Signal;
}
}

class Utils
{
static public bool IsIgnore(IMyTerminalBlock block)
{
return block.CustomData.Equals("DAS_IGNORE",StringComparison.OrdinalIgnoreCase);
}
}

class StringQueue
{
List&lt;string&gt; StringsList;
StringBuilder String;
public int MaxCount {get;set;}
public StringQueue(int maxCount=0)
{
StringsList=new List&lt;string&gt;();
String=new StringBuilder();
MaxCount=maxCount;
}
public void Append(string str)
{
StringsList.Add(str);
if(MaxCount&gt;0&amp;&amp;StringsList.Count&gt;MaxCount)
StringsList.RemoveAt(0);
}
public void Remove(int count=1)
{
StringsList.RemoveRange(0,Math.Min(StringsList.Count,count));
}
public StringBuilder GetString()
{
String.Clear();
foreach(var item in StringsList)
String.AppendLine(item);
return String;
}
}

class BaseClass
{
protected Program Parent;
public IMyRemoteControl RC;
public bool Ready {get {return RC!=null;}}
public BaseClass(Program parent) {Parent=parent;}
public IMyRemoteControl ForceDetectRemoteControl()
{
RC=null;
List&lt;IMyRemoteControl&gt; remcomarr=new List&lt;IMyRemoteControl&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(remcomarr,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
if(remcomarr.Count&gt;0)
RC=remcomarr[0];
return RC;
}
}

interface IInputData
{
float WS {get;}
float AD {get;}
float CSpacebar {get;}
float QE {get;}
bool Ready {get;}
bool Manning {get;}
}
class UserInputWatcher : IInputData
{
Program Parent;
List&lt;IMyShipController&gt; Controllers;
int CycleNum;
int Indx;
IEnumerator&lt;bool&gt; StMachine;

public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Ready {get;set;}
public bool Manning {get;set;}
public int SkipCycles;

public UserInputWatcher(Program parent,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Controllers=new List&lt;IMyShipController&gt;();
StMachine=UpdateIterator();
}
public void DetectFuncBlocks()
{
Controllers.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(Controllers,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
Ready=Controllers.Count&gt;0;
Indx=0;
}
public void Reset()
{
WS=AD=CSpacebar=QE=0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
Manning=false;
Vector3 input=Vector3.Zero;
QE=0;
for(int i=0;i&lt;Controllers.Count;++i)
{
if(Controllers[Indx].IsUnderControl)
{
input=Controllers[Indx].MoveIndicator;
QE=Controllers[Indx].RollIndicator;
Manning=true;
break;
}
Indx=(Indx+1) % Controllers.Count;
}
WS=input.Z;
AD=input.X;
CSpacebar=input.Y;
}
}
class AutopilotDriver : BaseClass,IInputData
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
string TimerName;
IMyTimerBlock Timer;

public enum EDriveMode : byte {OneWay,Patrol,Cicrle,END_OF_ENUM}

public int SkipCycles;
public int WaypointIndx;
public int WaypointSelector=1;
public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Manning {get;set;}
public bool Busy {get;set;}
public MyWaypointInfo CurrentWaypoint {get;set;}
public MyWaypointInfo FirstWaypoint {get;set;}
public MyWaypointInfo LastWaypoint {get;set;}
public double Time {get;set;}
public EDriveMode DriveMode;
public bool Enabled;
public double dT=0.016;
public double Accuracy;
public double WaitTimeSec;

public AutopilotDriver(Program parent,string timerName,int skipCycles=0,int skipOffset=0) : base(parent)
{
TimerName=timerName;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void ResetWaypointIndex(bool reset=true)
{
if(reset)
{
WaypointIndx=0;
WaypointSelector=1;
}
}
public void InverseRoute()
{
List&lt;MyWaypointInfo&gt; waypoints=new List&lt;MyWaypointInfo&gt;();
RC.GetWaypointInfo(waypoints);
RC.ClearWaypoints();
for(int i=waypoints.Count-1;i&gt;=0;i--)
RC.AddWaypoint(waypoints[i]);
if(WaypointIndx&gt;0)
WaypointIndx=waypoints.Count-WaypointIndx;
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
Timer=Parent.GridTerminalSystem.GetBlockWithName(TimerName) as IMyTimerBlock;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
Manning=Busy=false;
WS=AD=0;
Time=0;
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
List&lt;MyWaypointInfo&gt; waypoints=new List&lt;MyWaypointInfo&gt;();
RC.GetWaypointInfo(waypoints);
if(waypoints.Count==0) yield return false;
FirstWaypoint=waypoints[0];
LastWaypoint=waypoints[waypoints.Count-1];
Manning=true;
WS=AD=0;
Busy=true;
WaypointIndx=MathHelper.Clamp(WaypointIndx,0,waypoints.Count-1);
Time=0;
while(Busy)
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
Time+=dT;
yield return true;
}
CycleNum=0;
CurrentWaypoint=waypoints[WaypointIndx];
Vector3D targetVector=CurrentWaypoint.Coords-RC.CubeGrid.WorldVolume.Center;
double boundSphereRadi=RC.CubeGrid.WorldVolume.Radius;
double temp=boundSphereRadi/Accuracy;
if(targetVector.LengthSquared()&gt;temp*temp)
{
Time=0;
RC.HandBrake=false;
float dir=(float)RC.WorldMatrix.Backward.Dot(targetVector)+0.3f;
WS=MathHelper.Clamp(dir+(dir&gt;0 ? 0.1f : -0.1f),-1,1);
AD=(float)MathHelper.Clamp(RC.WorldMatrix.Right.Dot(Vector3D.Normalize(targetVector))*Math.Sign(-WS)*2,-1,1);
yield return true;
}
else
{
RC.HandBrake=WaitTimeSec&gt;0;
Time+=dT;
WS=AD=0;
Timer?.Trigger();
if(Time&lt;WaitTimeSec)
yield return true;
else
{
Time=0;
WaypointIndx+=WaypointSelector;
if(WaypointIndx&gt;=waypoints.Count)
{
switch(DriveMode)
{
case EDriveMode.OneWay:
Busy=false;
break;
case EDriveMode.Patrol:
WaypointSelector=-1;
if(waypoints.Count&gt;1)
WaypointIndx-=2;
else
Busy=false;
break;
case EDriveMode.Cicrle:
WaypointIndx=0;
if(waypoints.Count&lt;2)
Busy=false;
break;
}
}
else if(WaypointIndx&lt;0)
{
WaypointSelector=1;
WaypointIndx=0;
}
}
}
}
Time=0;
Manning=false;
RC.HandBrake=true;
}
}
class CruiseControlUnit : BaseClass,IInputData
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
IInputData UserInput;
GridDynamicsWatcher Dynamics;
OrientationComputer Orientation;
float HeadingYaw;
float VelocitySign;

public int SkipCycles;
public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Manning {get;set;}
public bool Busy {get;set;}
public double SpeedKPH {get;set;}
public bool Enabled;

public CruiseControlUnit(Program parent,IInputData userInput,GridDynamicsWatcher dynamics,OrientationComputer orientation,
int skipCycles=0,int skipOffset=0) : base(parent)
{
UserInput=userInput;
Dynamics=dynamics;
Orientation=orientation;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
Busy=false;
Manning=false;
WS=AD=0;
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
Manning=true;
SpeedKPH=Dynamics.Velocity.LateralAbs*3.6/0.9;
VelocitySign=WS=Math.Sign(Dynamics.Velocity.Backward);
HeadingYaw=(float)Orientation.Yaw;
AD=0;
Busy=true;
while(Busy)
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CSpacebar=0;
if(UserInput.WS!=0||UserInput.CSpacebar&gt;0)
{
SpeedKPH=Dynamics.Velocity.LateralAbs*3.6/0.9;
VelocitySign=Math.Sign(Dynamics.Velocity.Backward);
WS=UserInput.WS!=0 ? Math.Sign(UserInput.WS)+UserInput.WS : VelocitySign;
CSpacebar=UserInput.CSpacebar;
}
else
WS=VelocitySign;
if(UserInput.AD!=0)
{
HeadingYaw=(float)Orientation.Yaw;
AD=UserInput.AD;
}
else
AD=-VelocitySign*MathHelper.Clamp(MathHelper.WrapAngle(HeadingYaw-(float)Orientation.Yaw)*5f,-1,1);
if(Dynamics.Velocity.Scalar&lt;1)
Busy=false;
else
yield return true;
}
Manning=false;
RC.HandBrake=true;
}
}

class GridDynamicsWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public class VelocitiesCollection
{
public Vector3D Vector {get;set;}
public double Forward {get;set;}
public double Right {get;set;}
public double Down {get;set;}
public double Backward {get {return -Forward;}}
public double Left {get {return -Right;}}
public double Up {get {return -Down;}}
public double SideAbs {get;set;}
public double LateralAbs {get;set;}
public double VerticalAbs {get;set;}
public double Scalar {get;set;}
public double NaturalPitchDegree;
public VelocitiesCollection() {}
public void Update(IMyShipController rc)
{
Vector=rc.GetShipVelocities().LinearVelocity;
Scalar=Vector.Length();
Forward=Vector.Dot(rc.WorldMatrix.Forward);
Right=Vector.Dot(rc.WorldMatrix.Right);
Down=Vector.Dot(rc.WorldMatrix.Down);
if(NaturalPitchDegree!=0)
{
double pScalar=new Vector2D(Forward,Down).Length();
Down-=Math.Sin(MathHelperD.ToRadians(NaturalPitchDegree))*pScalar*Math.Sign(Forward);
Forward+=Math.Abs(Math.Sin(MathHelperD.ToRadians(NaturalPitchDegree)))*pScalar;
}
LateralAbs=Math.Abs(Forward);
VerticalAbs=Math.Abs(Down);
SideAbs=Math.Abs(Right);
}
public void Reset()
{
Forward=Right=Down=SideAbs=LateralAbs=VerticalAbs=Scalar=0;
Vector=Vector3D.Zero;
}
}
public class AccelerationCollection
{
Vector3D VelocityVPrev;
double VelocitySPrev;
public Vector3D VectorMoment {get;set;}
public double AvrEMA {get;set;}
public double Moment {get;set;}
public double EMA_A;
public AccelerationCollection(double emaA=0.2)
{
EMA_A=emaA;
}
public void Update(VelocitiesCollection velocity,double dT)
{
VectorMoment=(velocity.Vector-VelocityVPrev)/dT;
Moment=(velocity.Scalar-VelocitySPrev)/dT;
AvrEMA=EMA_A*Moment+(1-EMA_A)*AvrEMA;
VelocityVPrev=velocity.Vector;
VelocitySPrev=velocity.Scalar;
}
public void Reset()
{
AvrEMA=Moment=0;
VectorMoment=Vector3D.Zero;
}
}

public int SkipCycles;
public VelocitiesCollection Velocity {get;set;}
public AccelerationCollection Acceleration {get;set;}
public double NaturalPitchDegree {get {return Velocity.NaturalPitchDegree;} set {Velocity.NaturalPitchDegree=value;}}
public double dT=0.016;

public GridDynamicsWatcher(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
Velocity=new VelocitiesCollection();
Acceleration=new AccelerationCollection();
StMachine=UpdateIterator();
}
public void Reset()
{
Velocity.Reset();
Acceleration.Reset();
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
double time=dT;
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
time+=dT;
yield return true;
}
CycleNum=0;
Velocity.Update(RC);
Acceleration.Update(Velocity,time);
}
}

class GridMassWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool _BaseMassChanged;
bool _PhysicalMassChanged;
MyShipMass MassesPrev;
float[] ChangeIgnorArr;

public int SkipCycles;
public MyShipMass Masses {get;set;}
public bool BaseMassChanged
{
get
{
bool temp=_BaseMassChanged;
_BaseMassChanged=false;
return temp;
}
}
public bool PhysicalMassChanged
{
get
{
bool temp=_PhysicalMassChanged;
_PhysicalMassChanged=false;
return temp;
}
}

public GridMassWatcher(Program parent,int skipCycles=0,int skipOffset=0) : base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void InitMasses()
{
MassesPrev=RC.CalculateShipMass();
}
public void SetIgnorArray(float[] array)
{
ChangeIgnorArr=array;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
Masses=RC.CalculateShipMass();
double temp;
temp=Math.Abs(MassesPrev.BaseMass-Masses.BaseMass);
if(temp==0)
_BaseMassChanged=false;
else
{
_BaseMassChanged=true;
if(ChangeIgnorArr!=null)
foreach(var d in ChangeIgnorArr)
if(temp==d)
{
_BaseMassChanged=false;
break;
}
}

temp=Math.Abs(MassesPrev.PhysicalMass-Masses.PhysicalMass);
if(temp==0)
_PhysicalMassChanged=false;
else
{
_PhysicalMassChanged=true;
if(ChangeIgnorArr!=null)
foreach(var d in ChangeIgnorArr)
if(temp==d)
{
_PhysicalMassChanged=false;
break;
}
}

MassesPrev=Masses;
}
}

class GravityWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double MagnitudePrev;
bool _MagnitudeChanged;

public int SkipCycles;
public Vector3 Direction {get;set;}
public double Magnitude {get;set;}
public bool MagnitudeChanged
{
get
{
bool temp=_MagnitudeChanged;
_MagnitudeChanged=false;
return temp;
}
}
public bool ArtificialStongerNatural {get;set;}

public GravityWatcher(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
ArtificialStongerNatural=RC.GetNaturalGravity().LengthSquared()&lt;RC.GetArtificialGravity().LengthSquared();
Direction=RC.GetTotalGravity();
Magnitude=Direction.Length();
_MagnitudeChanged=Magnitude!=MagnitudePrev;
MagnitudePrev=Magnitude;
}
}

class OrientationComputer : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public int SkipCycles;
public double Roll {get;set;}
public double Yaw {get;set;}
public double Pitch {get;set;}
public Vector3D RollYawPitch {get;set;}
public OrientationComputer(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
}
public void Update(Vector3D gravity,bool skipYaw=false)
{
if(Ready)
{
if(StMachine==null)
StMachine=UpdateIterator(gravity,skipYaw);
if(!StMachine.MoveNext())
StMachine=null;
}
}
IEnumerator&lt;bool&gt; UpdateIterator(Vector3D gravity,bool skipYaw)
{
Vector3D fow=RC.WorldMatrix.Forward;
Vector3D up=RC.WorldMatrix.Up;
Vector3D left=RC.WorldMatrix.Left;
Vector3D result=Vector3D.Zero;
int temp=Math.Max(SkipCycles-(skipYaw ? 1 : 2),0);
int temp2=SkipCycles-temp;
for(;CycleNum&lt;temp;++CycleNum)
yield return true;
CycleNum=0;

if(!Vector3D.IsZero(gravity))
{
gravity.Normalize();
result.Z=-Math.Asin(MathHelperD.Clamp(fow.Dot(gravity),-1.0,1.0));
if(temp2&gt;1) yield return true;

gravity.Normalize();
result.X=Math.Asin(MathHelperD.Clamp(-gravity.Dot(left),-1.0,1.0));
if(gravity.Dot(up)&gt;0)
result.X=Math.Sign(result.X)*(Math.PI-Math.Abs(result.X));
if(temp2&gt;0) yield return true;

if(!skipYaw)
{
gravity.Normalize();
Vector3D gnNorth=Vector3D.Normalize(Vector3D.Reject(-Vector3D.UnitY,gravity));
Vector3D gnForwad=Vector3D.Normalize(Vector3D.Reject(fow,gravity));
result.Y=Math.Acos(MathHelperD.Clamp(gnForwad.Dot(gnNorth),-1.0,1.0));
if(Math.Abs(result.X)&lt;MathHelperD.PiOver2)
{
if(left.Dot(gnNorth)&lt;0)
result.Y=-result.Y;
}
else if(left.Dot(gnNorth)&gt;0)
result.Y=-result.Y;
}
}
Roll=result.X;
Yaw=result.Y;
Pitch=result.Z;
RollYawPitch=new Vector3D(Roll,Yaw,Pitch);
}
}

class CameraScheduler : BaseClass
{
class CameraWrapper
{
public IMyCameraBlock Camera {get;set;}
public Vector3D LocalPosition {get;set;}
public CameraWrapper(IMyCameraBlock camera,IMyShipController anchor)
{
Camera=camera;
Vector3D temp1,temp2;
temp2=Camera.GetPosition()-anchor.CubeGrid.WorldVolume.Center;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
LocalPosition=temp1;
}
}
List&lt;CameraWrapper&gt; Cameras;
GridDynamicsWatcher Dynamics;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double RaycastDistance=100;
double Time;
int CameraIndex;
int Odd;
Vector3D SurfaceHitPosPrev;

new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Cameras.Count&gt;0;}}
public int SkipCycles;
public double CalcSurfaceAfter;
public double dT=0.016;
public Vector3D SurfaceTilt {get;set;}
public Vector3D SurfaceBank {get;set;}
public MyDetectedEntityType SurfaceType {get;set;}
public double Altitude {get;set;}
public double RaycastDistanceUsed {get;set;}
public int DataAge {get;set;}

public CameraScheduler(Program parent,GridDynamicsWatcher dynamics,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
Dynamics=dynamics;
Cameras=new List&lt;CameraWrapper&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Cameras.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
List&lt;IMyCameraBlock&gt; allCameras=new List&lt;IMyCameraBlock&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allCameras,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var camera in allCameras)
{
if(RC.Orientation.TransformDirectionInverse(camera.Orientation.Forward)==Base6Directions.Direction.Down)
{
camera.EnableRaycast=true;
CameraWrapper newCamera=new CameraWrapper(camera,RC);
Cameras.Add(newCamera);
}
}
}
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
++DataAge;
Time+=dT;
yield return true;
}
CycleNum=0;

++DataAge;
Time+=dT;
Odd=(Odd+1) % 2;
Vector3D ScanDirection=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Forward,0.2+Odd/5.0);
// calc raycast direction as derivative from velocity and gravity vectors,but in 44.9 deg cone
if(Dynamics.Velocity.Scalar&gt;0.5)
{
double Y=Math.Acos(RC.WorldMatrix.Down.Dot(Vector3D.Normalize(Dynamics.Velocity.Vector)));
if(Y&lt;0.783652834148)
ScanDirection=Dynamics.Velocity.Vector;
else if(Y&lt;2.3561944902) // from 44.9 to 135 degree
{
double CC=Math.Sin(Y)/Math.Sin((Math.PI-Y)/2.0);
double C1=0.7070944397373547/Math.Sin(0.78538071010493+Y/2.0);// sin(PI/4)/sin(PI/4+Y/2)
ScanDirection=Vector3D.Lerp(RC.WorldMatrix.Down,Vector3D.Normalize(Dynamics.Velocity.Vector),C1/CC);
}
}
// raycast in ScanDirection vector and calc SurfaceTilt
MyDetectedEntityInfo hit=new MyDetectedEntityInfo();
SurfaceTilt=Vector3D.Zero;
SurfaceType=MyDetectedEntityType.None;
hit=TryRaycast(RaycastDistance,ScanDirection);
if(!hit.IsEmpty())
{
Vector3D rayCastDistance=hit.HitPosition.Value-Cameras[CameraIndex].Camera.GetPosition();
rayCastDistance=hit.HitPosition.Value-(RC.CubeGrid.WorldVolume.Center+RC.WorldMatrix.Down*RC.CubeGrid.WorldVolume.Radius);
RaycastDistance=rayCastDistance.Length()*1.05+5;
SurfaceType=hit.Type;
Altitude=RC.WorldMatrix.Down.Dot(rayCastDistance);
DataAge=0;

if(Altitude&lt;=CalcSurfaceAfter&amp;&amp;!Vector3D.IsZero(SurfaceHitPosPrev))
SurfaceTilt=hit.HitPosition.Value-SurfaceHitPosPrev;
SurfaceHitPosPrev=hit.HitPosition.Value;
}
else
{
RaycastDistance=Math.Min(RaycastDistance+25,1000.0);
SurfaceHitPosPrev=Vector3D.Zero;
}
yield return true;

++DataAge;
Time+=dT;
// raycast in side-to-side vectors and calc SurfaceBank
SurfaceBank=Vector3D.Zero;
if(Altitude&lt;=CalcSurfaceAfter&amp;&amp;!hit.IsEmpty())
{
Vector3D perpendicular=Vector3D.Normalize(ScanDirection.Cross(RC.WorldMatrix.Down));
Vector3D perpendicularDiagonal;
if(perpendicular.IsValid())
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,perpendicular,0.15);
else
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Left,0.15);
hit=TryRaycast(RaycastDistance,perpendicularDiagonal);
if(!hit.IsEmpty())
{
Vector3D currentHit=hit.HitPosition.Value;
if(perpendicular.IsValid())
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,-perpendicular,0.15);
else
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Right,0.15);
hit=TryRaycast(RaycastDistance,perpendicularDiagonal);
if(!hit.IsEmpty())
SurfaceBank=hit.HitPosition.Value-currentHit;
}
}

if(Time&gt;=1.0)
{
RaycastDistanceUsed=0;
Time=0;
}
}
MyDetectedEntityInfo TryRaycast(double distance,Vector3D worldDirection)
{
MyDetectedEntityInfo result=new MyDetectedEntityInfo();
if(RaycastDistanceUsed+distance&lt;=2000)
{
double minAngle=double.MaxValue;
CameraIndex=-1;
Vector3D localDirection=-Vector3D.Normalize(Vector3D.TransformNormal(worldDirection,MatrixD.Transpose(RC.WorldMatrix)));
for(int i=0;i&lt;Cameras.Count;++i)
{
double temp=localDirection.Dot(Cameras[i].LocalPosition);
if(temp&lt;minAngle&amp;&amp;Cameras[i].Camera.IsWorking&amp;&amp;Cameras[i].Camera.CanScan(distance))
{
minAngle=temp;
CameraIndex=i;
}
}
if(CameraIndex&gt;=0)
{
RaycastDistanceUsed+=distance;
localDirection=Vector3D.Normalize(Vector3D.TransformNormal(worldDirection,MatrixD.Transpose(Cameras[CameraIndex].Camera.WorldMatrix)));
result=Cameras[CameraIndex].Camera.Raycast(distance,localDirection);

}
}
return result;
}
}

class TractionControlSystem : BaseClass
{
class SuspensionWrapper
{
public IMyMotorSuspension Obj {get;}
public Base6Directions.Direction OrientationInVehicle {get;}
public Vector3D WheelPositionAgainstCoM {get;set;}
public Vector3D WheelPositionAgainstRef {get;set;}
public double WheelPositionAgainstVelocity {get;set;}
public double HeightOffsetMin {get;}
public double HeightOffsetMax {get;}
public double HeightOffsetRange {get;}
public double WheelRadius {get;}
public double PropulsionSign {get;}
public bool IsSubgrid {get;}
public double LeftMaxSteerAngle;
public double RightMaxSteerAngle;
public double TurnRadiusCurrent;
public double TurnRadiusLeftMin;
public double TurnRadiusRightMin;
public double WeightDistributionRatio;
public double BrakeFrictionDistributionRatio;
public double SpeedLimit {get {return Obj.GetValueFloat("Speed Limit");} set {Obj.SetValueFloat("Speed Limit",(float)value);}}
public double PropulsionOverride {get {return Obj.GetValueFloat("Propulsion override");} set {Obj.SetValueFloat("Propulsion override",(float)value);}}
public double SteerOverrie {get {return Obj.GetValueFloat("Steer override");} set {Obj.SetValueFloat("Steer override",(float)value);}}
public double Power {get {return Obj.Power;} set {Obj.Power=(float)value;}}
public double Friction {get {return Obj.Friction;} set {Obj.Friction=(float)value;}}
public double Strength {get {return Obj.Strength;} set {Obj.Strength=(float)value;}}
public double Height {get {return Obj.Height;} set {Obj.Height=(float)value;}}
public double MaxSteerAngle {get {return Obj.MaxSteerAngle;} set {Obj.MaxSteerAngle=(float)value;}}
public SuspensionWrapper(IMyMotorSuspension suspension,Base6Directions.Direction orientation,bool subgrid=false)
{
Obj=suspension;
OrientationInVehicle=orientation;
IsSubgrid=subgrid;
if(orientation==Base6Directions.Direction.Left)
PropulsionSign=-1;
else if(orientation==Base6Directions.Direction.Right)
PropulsionSign=1;
HeightOffsetMin=suspension.GetMinimum&lt;float&gt;("Height");
HeightOffsetMax=suspension.GetMaximum&lt;float&gt;("Height");
HeightOffsetRange=HeightOffsetMax-HeightOffsetMin;
if(suspension.CubeGrid.GridSizeEnum==MyCubeSize.Small)
{
if(suspension.BlockDefinition.SubtypeName.Contains("5x5")) WheelRadius=1.25;
else if(suspension.BlockDefinition.SubtypeName.Contains("3x3")) WheelRadius=0.75;
else if(suspension.BlockDefinition.SubtypeName.Contains("2x2")) WheelRadius=0.5;// modded
else if(suspension.BlockDefinition.SubtypeName.Contains("1x1")) WheelRadius=0.25;
else // some other modded wheels
WheelRadius=suspension.IsAttached ? suspension.Top.WorldVolume.Radius*0.79/MathHelper.Sqrt2 : 0;
}
else
{
if(suspension.BlockDefinition.SubtypeName.Contains("5x5")) WheelRadius=6.25;
else if(suspension.BlockDefinition.SubtypeName.Contains("3x3")) WheelRadius=3.75;
else if(suspension.BlockDefinition.SubtypeName.Contains("2x2")) WheelRadius=2.5;// modded
else if(suspension.BlockDefinition.SubtypeName.Contains("1x1")) WheelRadius=1.25;
else // some other modded wheels
WheelRadius=suspension.IsAttached ? suspension.Top.WorldVolume.Radius*0.79/MathHelper.Sqrt2 : 0;
}
}
public Vector3 GetVelocityAtPoint(IMyShipController anchor)
{
Vector3 value=Vector3D.Zero;
if(Obj.IsAttached)
{
Vector3 v=Obj.Top.GetPosition()-anchor.CenterOfMass;
value=anchor.GetShipVelocities().LinearVelocity+anchor.GetShipVelocities().AngularVelocity.Cross(v);
}
return value;
}
public bool AddTopPart()
{
Obj.ApplyAction("Add Top Part");
return Obj.IsAttached;
}
public void UpdateLocalPosition(IMyShipController anchor,Vector3D focalPointRef)
{
if(Obj.IsAttached)
{
Vector3D temp1,temp2;
temp2=Obj.Top.GetPosition()-anchor.CenterOfMass;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
WheelPositionAgainstCoM=temp1;
temp2=Obj.Top.GetPosition()-focalPointRef;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
WheelPositionAgainstRef=temp1;
}
else
WheelPositionAgainstRef=WheelPositionAgainstCoM=Vector3D.Zero;
}
public void UpdatePositionVelocity(Vector3D velocity)
{
if(Obj.IsAttached)
WheelPositionAgainstVelocity=velocity.Dot(WheelPositionAgainstCoM);
else
WheelPositionAgainstVelocity=0;
}
}
List&lt;SuspensionWrapper&gt; WheelSuspensions;
List&lt;IMyShipController&gt; SlaveShipControllers;
GridDynamicsWatcher Dynamics;
GravityWatcher Gravity;
OrientationComputer Orientation;
CameraScheduler Camera;
IInputData UserInput;
int FCycleNum;
int TCycleNum;
int HCycleNum;
int StrCycleNum;
int SpdCycleNum;
int SteCycleNum;
int BrCycleNum;
int WlAdrCycleNum;
IEnumerator&lt;bool&gt; FStMachine;
IEnumerator&lt;bool&gt; TStMachine;
IEnumerator&lt;bool&gt; HStMachine;
IEnumerator&lt;bool&gt; StrStMachine;
IEnumerator&lt;bool&gt; SpdStMachine;
IEnumerator&lt;bool&gt; SteStMachine;
IEnumerator&lt;bool&gt; BrStMachine;
IEnumerator&lt;bool&gt; WlAdrStMachine;
double CurrentTorque;
double PropulsionAmp=1;
double GridSprungWeight;
double StrenghtDelta=2;
double HeightOffsetDelta=0.1;
double _Strenght;
double _HeightOffset;
bool BusyWithHeight;
bool BusyWithStrenght;
bool EnableState;
string SubgridWheelsGroupName;

public bool Enabled;
new public bool Ready
{
get
{
return (this as BaseClass).Ready
&amp;&amp; UserInput.Ready&amp;&amp;Dynamics.Ready&amp;&amp;Gravity.Ready&amp;&amp;Orientation.Ready
&amp;&amp; WheelSuspensions.Count&gt;0;
}
}
public bool Busy {get {return BusyWithHeight||BusyWithStrenght;}}
public bool UseAdaptiveSteering;
public bool UseAckermannSteering;
public bool UseDASAirShock;
public bool UseHillDescentControl;
public bool ForceFullOverride;
public int FrictionSkipCycles;
public int TorqueSkipCycles;// 'power' property.
public int HeightOfstSkipCycles;
public int StrenghtSkipCycles;
public int SpeedLimitSkipCycles;
public int SteerSkipCycles;
public int BrakesSkipCycles;
public int WheelAddSkipCycles;
public double PowerLimit;
public double ForwardSpeedLimitKPH;
public double BackwardSpeedLimitKPH;
public double MaxForwardAcceleration;
public double MaxBackwardAcceleration;
public double MaxSteerAngleDegree;
public double Strenght
{
get {return _Strenght;}
set
{
StrenghtDelta=Math.Abs(value-_Strenght);
_Strenght=value;
}
}
public double HeightOffset
{
get {return _HeightOffset;}
set
{
if(value&gt;=0)
HeightOffsetDelta=Math.Abs(value-_HeightOffset);
_HeightOffset=value;
}
}
public double ValueChangeRate;
public double VehicleTurnRadiusRight {get;private set;}
public double VehicleTurnRadiusLeft {get;private set;}
public double CoMToWheelsBaseAngle {get;private set;}
public AckermannFocalPointRef AckFocal;
public TractionControlSystem(Program parent,GridDynamicsWatcher dynamics,GravityWatcher gravity,
OrientationComputer orientation,CameraScheduler camera,string sbgrdWhlGrpNm="",
int fCycles=0,int fOffset=0,int tCycles=0,int tOffset=0,int hCycles=0,int hOffset=0,
int strCycles=0,int strOffset=0,int sCycles=0,int sOffset=0,int steCycles=0,int steOffset=0,
int bCycles=0,int bOffset=0,int wCycles=0,int wOffset=0) : base(parent)
{
Dynamics=dynamics;
Gravity=gravity;
Orientation=orientation;
Camera=camera;
SubgridWheelsGroupName=sbgrdWhlGrpNm;
FrictionSkipCycles=fCycles;
FCycleNum=fOffset;
TorqueSkipCycles=tCycles;
TCycleNum=tOffset;
HeightOfstSkipCycles=hCycles;
HCycleNum=hOffset;
StrenghtSkipCycles=strCycles;
StrCycleNum=strOffset;
SpeedLimitSkipCycles=sCycles;
SpdCycleNum=sOffset;
SteerSkipCycles=steCycles;
SteCycleNum=steOffset;
BrakesSkipCycles=bCycles;
BrCycleNum=bOffset;
WheelAddSkipCycles=wCycles;
WlAdrCycleNum=wOffset;
WheelSuspensions=new List&lt;SuspensionWrapper&gt;();
SlaveShipControllers=new List&lt;IMyShipController&gt;();
InitStateMachines();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
WheelSuspensions.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
List&lt;IMyMotorSuspension&gt; allWheels=new List&lt;IMyMotorSuspension&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allWheels,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var suspension in allWheels)
{
Base6Directions.Direction blockOrientation=RC.Orientation.TransformDirectionInverse(suspension.Orientation.Up);
if(blockOrientation==Base6Directions.Direction.Left||blockOrientation==Base6Directions.Direction.Right)
{
suspension.AirShockEnabled=!UseDASAirShock;
SuspensionWrapper newSuspensionData=new SuspensionWrapper(suspension,blockOrientation);
newSuspensionData.PropulsionOverride=0;
newSuspensionData.SteerOverrie=0;
WheelSuspensions.Add(newSuspensionData);
}
}

IMyBlockGroup subgridWheelsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(SubgridWheelsGroupName);
if(subgridWheelsGroup!=null)
{
SuspensionWrapper newSuspension;
List&lt;IMyCubeGrid&gt; wheeledSubgrids=new List&lt;IMyCubeGrid&gt;();
List&lt;IMyShipController&gt; slaveControllers=new List&lt;IMyShipController&gt;();
allWheels.Clear();
subgridWheelsGroup.GetBlocksOfType(allWheels);
foreach(var suspension in allWheels)
{
if(suspension.CubeGrid!=Parent.Me.CubeGrid)
{
if(suspension.WorldMatrix.Up.Dot(RC.WorldMatrix.Left)&gt;0.7)
{
suspension.AirShockEnabled=!UseDASAirShock;
newSuspension=new SuspensionWrapper(suspension,Base6Directions.Direction.Left,true);
WheelSuspensions.Add(newSuspension);
if(wheeledSubgrids.IndexOf(suspension.CubeGrid)==-1)
wheeledSubgrids.Add(suspension.CubeGrid);
}
else if(suspension.WorldMatrix.Up.Dot(RC.WorldMatrix.Right)&gt;0.7)
{
suspension.AirShockEnabled=!UseDASAirShock;
newSuspension=new SuspensionWrapper(suspension,Base6Directions.Direction.Right,true);
WheelSuspensions.Add(newSuspension);
if(wheeledSubgrids.IndexOf(suspension.CubeGrid)==-1)
wheeledSubgrids.Add(suspension.CubeGrid);
}
}
}
foreach(var grid in wheeledSubgrids)
{
slaveControllers.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(slaveControllers,block =&gt; block.CubeGrid==grid&amp;&amp;!Utils.IsIgnore(block));
foreach(var controller in slaveControllers)
if(SlaveShipControllers.IndexOf(controller)==-1)
SlaveShipControllers.Add(controller);
}
}
UpdateSuspensionCofiguration();
}
}
public void UpdateSprungWeight(double gridPhysMass)
{
double unsprungMass=0;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
unsprungMass+=suspension.Obj.Top.Mass;
GridSprungWeight=(gridPhysMass-unsprungMass)*Gravity.Magnitude;
}
public void UpdateSuspensionCofiguration()
{
double maxL=0;
double maxR=0;
double wheelFocus;
double rearHalfZ=double.MinValue;
double frontHalfZ=double.MaxValue;
double wheelsBaseZ;
double weightRearRatio=0;
double weightFrontRatio=0;
double weightsSum=0;
double comHeight=0;

VehicleTurnRadiusLeft=VehicleTurnRadiusRight=0;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
{
switch(AckFocal)
{
case AckermannFocalPointRef.CoM:
suspension.UpdateLocalPosition(RC,RC.CenterOfMass);
break;
case AckermannFocalPointRef.RC:
suspension.UpdateLocalPosition(RC,RC.GetPosition());
break;
case AckermannFocalPointRef.BSphere:
suspension.UpdateLocalPosition(RC,RC.CubeGrid.WorldVolume.Center);
break;
}
if(Math.Sign(suspension.WheelPositionAgainstRef.Z)!=Math.Sign(suspension.WheelPositionAgainstCoM.Z))
suspension.Obj.InvertSteer=true;
else
suspension.Obj.InvertSteer=false;

comHeight=Math.Max(comHeight,-suspension.WheelPositionAgainstCoM.Y+suspension.WheelRadius
- Math.Max(_HeightOffset,suspension.HeightOffsetMin));
if(suspension.OrientationInVehicle==Base6Directions.Direction.Left)
maxL=Math.Max(maxL,-suspension.WheelPositionAgainstCoM.X);
else if(suspension.OrientationInVehicle==Base6Directions.Direction.Right)
maxR=Math.Max(maxR,suspension.WheelPositionAgainstCoM.X);

if(suspension.Obj.Steering)
{
wheelFocus=Math.Abs(suspension.WheelPositionAgainstRef.Z/Math.Tan(MathHelperD.ToRadians(MaxSteerAngleDegree)));
if(VehicleTurnRadiusLeft&gt;suspension.WheelPositionAgainstRef.X-wheelFocus)
VehicleTurnRadiusLeft=suspension.WheelPositionAgainstRef.X-wheelFocus;
if(VehicleTurnRadiusRight&lt;suspension.WheelPositionAgainstRef.X+wheelFocus)
VehicleTurnRadiusRight=suspension.WheelPositionAgainstRef.X+wheelFocus;
}
rearHalfZ=Math.Max(rearHalfZ,suspension.WheelPositionAgainstCoM.Z);
frontHalfZ=Math.Min(frontHalfZ,suspension.WheelPositionAgainstCoM.Z);
}
CoMToWheelsBaseAngle=Math.Atan(comHeight/Math.Min(maxL,maxR));
wheelsBaseZ=rearHalfZ-frontHalfZ;
weightRearRatio=Math.Abs(frontHalfZ/wheelsBaseZ);
weightFrontRatio=Math.Abs(rearHalfZ/wheelsBaseZ);
double frictionLowerLever=0.5*rearHalfZ/-frontHalfZ;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.Steering)
{
double temp1=(VehicleTurnRadiusLeft-suspension.WheelPositionAgainstRef.X);
double temp2=(VehicleTurnRadiusRight-suspension.WheelPositionAgainstRef.X);
suspension.LeftMaxSteerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/temp1));
suspension.RightMaxSteerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/temp2));
suspension.TurnRadiusLeftMin=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+temp1*temp1);
suspension.TurnRadiusRightMin=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+temp2*temp2);
}
else
{
suspension.LeftMaxSteerAngle=suspension.RightMaxSteerAngle=0;
suspension.TurnRadiusCurrent=suspension.TurnRadiusLeftMin=suspension.TurnRadiusRightMin=1;
}
if(wheelsBaseZ&gt;0.1)
{
if(suspension.WheelPositionAgainstCoM.Z&gt;=0)
suspension.WeightDistributionRatio=Math.Abs((suspension.WheelPositionAgainstCoM.Z-frontHalfZ)/wheelsBaseZ*weightRearRatio);
else
suspension.WeightDistributionRatio=Math.Abs((rearHalfZ-suspension.WheelPositionAgainstCoM.Z)/wheelsBaseZ*weightFrontRatio);

suspension.BrakeFrictionDistributionRatio=frictionLowerLever+(1-frictionLowerLever)*(suspension.WheelPositionAgainstCoM.Z-frontHalfZ)/wheelsBaseZ;
}
else
{
suspension.WeightDistributionRatio=1;
suspension.BrakeFrictionDistributionRatio=1;
}
weightsSum+=suspension.WeightDistributionRatio;
}
foreach(var suspension in WheelSuspensions)
{
suspension.WeightDistributionRatio/=weightsSum;
}
}
public void ReleaseControl()
{
foreach(var suspension in WheelSuspensions)
{
suspension.Power=100*PowerLimit;
suspension.Friction=100;
suspension.SpeedLimit=ForwardSpeedLimitKPH;
if(UseAckermannSteering)
suspension.MaxSteerAngle=MathHelperD.ToRadians(MaxSteerAngleDegree);
suspension.PropulsionOverride=0;
suspension.SteerOverrie=0;
suspension.Obj.AirShockEnabled=true;
}
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!FStMachine.MoveNext()) FStMachine=UpdateFriction();
if(!TStMachine.MoveNext()) TStMachine=UpdateTorque();
if(!HStMachine.MoveNext()) HStMachine=UpdateHeight();
if(!StrStMachine.MoveNext()) StrStMachine=UpdateStrenght();
if(!SpdStMachine.MoveNext()) SpdStMachine=UpdateSpeedLim();
if(!SteStMachine.MoveNext()) SteStMachine=UpdateSteerAngl();
if(!BrStMachine.MoveNext()) BrStMachine=UpdateBrakes();
if(!WlAdrStMachine.MoveNext()) WlAdrStMachine=UpdateWheelAdder();
}
else if(EnableState)
{
ReleaseControl();
InitStateMachines();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateFriction()
{
int temp=FrictionSkipCycles-1;
for(;FCycleNum&lt;temp;++FCycleNum)
yield return true;
FCycleNum=0;
// calc. friction modifiers to get proper total friction point against velocity and CoM
double baseFriction;
double driftAngleSinThreshold=0.017;
double wheelsBaseZ=1,frictionLowerLever=1,driftAngleSin=0;
double rearHalfZ=double.MinValue;
double frontHalfZ=double.MaxValue;
double minBrakeFriction=double.MaxValue;
if(Dynamics.Velocity.Scalar&gt;5)
{
Vector3D velocityLocal=Vector3D.TransformNormal(Dynamics.Velocity.Vector,MatrixD.Transpose(RC.WorldMatrix));
velocityLocal.Y=0;
velocityLocal.Normalize();
driftAngleSin=Math.Abs(velocityLocal.Dot(Vector3D.Right));
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
suspension.UpdatePositionVelocity(-velocityLocal);
rearHalfZ=Math.Max(rearHalfZ,suspension.WheelPositionAgainstVelocity);
frontHalfZ=Math.Min(frontHalfZ,suspension.WheelPositionAgainstVelocity);
minBrakeFriction=Math.Min(minBrakeFriction,suspension.BrakeFrictionDistributionRatio);
}
}
wheelsBaseZ=rearHalfZ-frontHalfZ;
frictionLowerLever=(0.95-MathHelperD.Clamp(driftAngleSin*2,0,0.9))*rearHalfZ/-frontHalfZ;
}
if(wheelsBaseZ==0)
wheelsBaseZ=1;
baseFriction=100-35*Math.Abs(UserInput.AD);
if(driftAngleSin&gt;driftAngleSinThreshold)
baseFriction*=(1-MathHelperD.Clamp(driftAngleSin*2,0,0.5));
if(FrictionSkipCycles&gt;0) yield return true;

double friction;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
friction=baseFriction;
if(Dynamics.Velocity.Scalar&gt;0.5)
{
if(RC.HandBrake||UserInput.CSpacebar&gt;0) // friction rebalance at braking
friction*=suspension.BrakeFrictionDistributionRatio;
else if(driftAngleSin&gt;driftAngleSinThreshold&amp;&amp;Dynamics.Velocity.SideAbs&gt;5) // friction rebalance against velocity
friction*=frictionLowerLever+(1-frictionLowerLever)*(suspension.WheelPositionAgainstVelocity-frontHalfZ)/wheelsBaseZ;
if(UserInput.AD!=0&amp;&amp;UserInput.WS&lt;0&amp;&amp;UserInput.CSpacebar&gt;0&amp;&amp;suspension.WheelPositionAgainstCoM.Z&gt;0&amp;&amp;Dynamics.Velocity.Forward&gt;8)
friction*=minBrakeFriction*1.4;
friction=Math.Max(friction,5);
}
suspension.Friction=friction;
}
}
}
IEnumerator&lt;bool&gt; UpdateTorque()
{
int temp=TorqueSkipCycles-1;
for(;TCycleNum&lt;temp;++TCycleNum)
{
RampUpDownTorque();
AmplifyPropulsion();
yield return true;
}
TCycleNum=0;

double maxTurnRadius=1;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
maxTurnRadius=Math.Max(maxTurnRadius,suspension.TurnRadiusCurrent);
if(TorqueSkipCycles&gt;0)
{
yield return true;
RampUpDownTorque();
AmplifyPropulsion();
}

RampUpDownTorque();
AmplifyPropulsion();
double torque;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
torque=CurrentTorque*PowerLimit;
if(Dynamics.Velocity.Scalar&gt;0.5)
torque*=suspension.TurnRadiusCurrent/maxTurnRadius;
torque=Math.Min(torque,100*PowerLimit);
suspension.Power=torque;

if(Dynamics.Velocity.VerticalAbs&lt;1) // !!workaround: another Keen's bug
{
double speedLimitKPH=Dynamics.Velocity.Forward&gt;0 ? ForwardSpeedLimitKPH : BackwardSpeedLimitKPH;
double propulsion=0;
if(UseHillDescentControl&amp;&amp;Dynamics.Velocity.LateralAbs*3.6&gt;speedLimitKPH&amp;&amp;!(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
propulsion=suspension.PropulsionSign*Math.Sign(Dynamics.Velocity.Forward);
else if(suspension.IsSubgrid||ForceFullOverride)
propulsion=torque/100*suspension.PropulsionSign*UserInput.WS*PropulsionAmp;
propulsion=Math.Min(propulsion,PowerLimit);
suspension.PropulsionOverride=propulsion;
}
else
suspension.PropulsionOverride=0;
}
}
}
IEnumerator&lt;bool&gt; UpdateHeight()
{
for(;HCycleNum&lt;HeightOfstSkipCycles;++HCycleNum)
yield return true;
HCycleNum=0;

double currentHeightOffset;
double clampedTargetHeightOffset;
double temp;
double delta=HeightOffsetDelta/ValueChangeRate*(HeightOfstSkipCycles+1);
BusyWithHeight=false;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
currentHeightOffset=suspension.Height;
clampedTargetHeightOffset=MathHelperD.Clamp(_HeightOffset,suspension.HeightOffsetMin,suspension.HeightOffsetMax);
temp=Math.Round(clampedTargetHeightOffset-currentHeightOffset,2);
if(temp&lt;0)
{
currentHeightOffset=Math.Max(currentHeightOffset-delta,clampedTargetHeightOffset);
suspension.Height=currentHeightOffset;
BusyWithHeight=true;
}
else if(temp&gt;0)
{
currentHeightOffset=Math.Min(currentHeightOffset+delta,clampedTargetHeightOffset);
suspension.Height=currentHeightOffset;
BusyWithHeight=true;
}
}
}
}
IEnumerator&lt;bool&gt; UpdateStrenght()
{
for(;StrCycleNum&lt;StrenghtSkipCycles;++StrCycleNum)
yield return true;
StrCycleNum=0;

double currentStrenght;
double strenght;
double temp;
double delta=StrenghtDelta/ValueChangeRate*(HeightOfstSkipCycles+1);
BusyWithStrenght=false;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(_Strenght&gt;=0)
strenght=_Strenght;
else if(GridSprungWeight&gt;0)
{
strenght=Math.Sqrt(suspension.WeightDistributionRatio*GridSprungWeight);
if(suspension.Obj.CubeGrid.GridSizeEnum==MyCubeSize.Small)
{
if(suspension.Obj.BlockDefinition.SubtypeName.Contains("5x5"))
strenght/=18.5;
else
strenght/=15;
}
else
{
if(suspension.Obj.BlockDefinition.SubtypeName.Contains("5x5"))
strenght/=55;
else
strenght/=52.5;
}
}
else
strenght=5;

currentStrenght=suspension.Strength;
double fallVelocityExceeding=RC.WorldMatrix.Down.Dot(suspension.GetVelocityAtPoint(RC))/10;
if(fallVelocityExceeding&gt;1&amp;&amp;UseDASAirShock)
currentStrenght=strenght*fallVelocityExceeding*fallVelocityExceeding;
else if(Dynamics.Velocity.Up&gt;1&amp;&amp;UseDASAirShock)
currentStrenght=strenght;
else
{
temp=Math.Round(strenght-currentStrenght,2);
if(temp&lt;0)
{
currentStrenght=Math.Max(currentStrenght-delta,strenght);
BusyWithStrenght=true;
}
else if(temp&gt;0)
{
currentStrenght=Math.Min(currentStrenght+delta,strenght);
BusyWithStrenght=true;
}
}
if(Math.Abs(UserInput.AD)&lt;0.2) // !!workaround: steering bug
suspension.Strength=currentStrenght;
}
}
}
IEnumerator&lt;bool&gt; UpdateSpeedLim()
{
for(;SpdCycleNum&lt;SpeedLimitSkipCycles;++SpdCycleNum)
yield return true;
SpdCycleNum=0;

if(UserInput.WS!=0)
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(UserInput.CSpacebar&lt;0)
suspension.SpeedLimit=360*Math.Abs(UserInput.WS);
else if(Dynamics.Velocity.Forward&gt;0)
suspension.SpeedLimit=ForwardSpeedLimitKPH*Math.Abs(UserInput.WS);
else
suspension.SpeedLimit=BackwardSpeedLimitKPH*Math.Abs(UserInput.WS);
}
}
}
IEnumerator&lt;bool&gt; UpdateSteerAngl()
{
for(;SteCycleNum&lt;SteerSkipCycles;++SteCycleNum)
yield return true;
SteCycleNum=0;

double safeTurnRadiusRight=0;
double safeTurnRadiusLeft=0;
double turnCath=0;
double steerAngle=0;
bool adaptiveSteering;
if((UserInput.AD!=0&amp;&amp;UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&gt;0)||Dynamics.Velocity.LateralAbs&lt;0.5)
adaptiveSteering=false;
else
adaptiveSteering=UseAdaptiveSteering;
if(adaptiveSteering&amp;&amp;Gravity.Magnitude&gt;0)
{
double pow=Camera.SurfaceType==MyDetectedEntityType.LargeGrid ? 2 : 1.5;
if(UserInput.AD&lt;0)
safeTurnRadiusLeft=Math.Pow(Dynamics.Velocity.LateralAbs,pow)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle+Orientation.Roll,1e-6,MathHelperD.Pi/2.1)));
else if(UserInput.AD&gt;0)
safeTurnRadiusRight=Math.Pow(Dynamics.Velocity.LateralAbs,pow)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle-Orientation.Roll,1e-6,MathHelperD.Pi/2.1)));
}
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.Steering&amp;&amp;suspension.Obj.IsAttached)
{
if(UserInput.AD!=0&amp;&amp;UseAckermannSteering)
{
if(adaptiveSteering)
{
if(UserInput.AD&gt;0)
turnCath=Math.Max(VehicleTurnRadiusRight,safeTurnRadiusRight)-suspension.WheelPositionAgainstRef.X;
else
turnCath=Math.Min(VehicleTurnRadiusLeft,-safeTurnRadiusLeft)-suspension.WheelPositionAgainstRef.X;
steerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/turnCath));
suspension.TurnRadiusCurrent=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+turnCath*turnCath);
}
else
{
if(UserInput.AD&gt;0)
{
steerAngle=suspension.RightMaxSteerAngle;
suspension.TurnRadiusCurrent=suspension.TurnRadiusRightMin;
}
else
{
steerAngle=suspension.LeftMaxSteerAngle;
suspension.TurnRadiusCurrent=suspension.TurnRadiusLeftMin;
}
}
suspension.MaxSteerAngle=steerAngle;
}
else
suspension.TurnRadiusCurrent=1;
if(suspension.IsSubgrid||ForceFullOverride)
suspension.SteerOverrie=-Math.Sign(suspension.WheelPositionAgainstRef.Z)*UserInput.AD;
}
}
}
IEnumerator&lt;bool&gt; UpdateBrakes()
{
int temp=BrakesSkipCycles-1;
for(;BrCycleNum&lt;temp;++BrCycleNum)
yield return true;
BrCycleNum=0;

foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(suspension.WheelPositionAgainstCoM.Z&gt;0&amp;&amp;UserInput.WS!=0&amp;&amp;!RC.HandBrake)
suspension.Obj.Brake=false;
else
suspension.Obj.Brake=true;
}
}
if(BrakesSkipCycles&gt;0) yield return true;
// If there slave controllers on wheeled subgrid-handle handbrakes
if(SlaveShipControllers.Count&gt;0)
{
if(UserInput.CSpacebar&gt;0||RC.HandBrake)
foreach(var sc in SlaveShipControllers)
sc.HandBrake=true;
else
foreach(var sc in SlaveShipControllers)
sc.HandBrake=false;
}
}
IEnumerator&lt;bool&gt; UpdateWheelAdder()
{
for(;WlAdrCycleNum&lt;WheelAddSkipCycles;++WlAdrCycleNum)
yield return true;
WlAdrCycleNum=0;

foreach(var suspension in WheelSuspensions)
{
if(!suspension.Obj.IsAttached)
{
for(int i=0;i&lt;=10;++i)
{
if(suspension.AddTopPart())
break;
yield return true;
suspension.Height=suspension.HeightOffsetMin+suspension.HeightOffsetRange/10.0*i;
}
}
}
}
void RampUpDownTorque()
{
if((Dynamics.Acceleration.AvrEMA&lt;MaxForwardAcceleration&amp;&amp;UserInput.WS&lt;0)
|| (Dynamics.Acceleration.AvrEMA&lt;MaxBackwardAcceleration&amp;&amp;UserInput.WS&gt;0))
CurrentTorque=Math.Min(CurrentTorque*1.05,100);
else
CurrentTorque=Math.Max(CurrentTorque*0.9,5);
}
void AmplifyPropulsion()
{
if(Dynamics.Velocity.LateralAbs*3.6&lt;Math.Abs(UserInput.WS)*ForwardSpeedLimitKPH*0.9&amp;&amp;UserInput.WS&lt;0)
PropulsionAmp=Math.Min(PropulsionAmp*1.01,360.0/ForwardSpeedLimitKPH);
else if(Dynamics.Velocity.LateralAbs*3.6&lt;Math.Abs(UserInput.WS)*BackwardSpeedLimitKPH*0.9&amp;&amp;UserInput.WS&gt;0)
PropulsionAmp=Math.Min(PropulsionAmp*1.01,360.0/BackwardSpeedLimitKPH);
else
PropulsionAmp=Math.Max(PropulsionAmp*0.95,1);
}
void InitStateMachines()
{
FStMachine=UpdateFriction();
TStMachine=UpdateTorque();
HStMachine=UpdateHeight();
StrStMachine=UpdateStrenght();
SpdStMachine=UpdateSpeedLim();
SteStMachine=UpdateSteerAngl();
BrStMachine=UpdateBrakes();
WlAdrStMachine=UpdateWheelAdder();
}
}

class FallDampeningSystem : BaseClass
{
int CycleNum;
int AltitudeAge;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
List&lt;IMyThrust&gt; Thrusters;
GridDynamicsWatcher Dynamics;
GravityWatcher Gravity;
GridMassWatcher Mass;
CameraScheduler Camera;
IInputData UserInput;
double Altitude;
double AltitudePrev;
double EmpiricDescentVeloc;
double Time;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Thrusters.Count&gt;0;}}
public bool EnoughThrust {get;set;}
public bool UseJumpJets;
public int SkipCycles;
public double SafeFallVelocity;
public double dT=0.016;
public FallDampeningSystem(Program parent,GridDynamicsWatcher dynamics,GravityWatcher gravity,
GridMassWatcher masses,CameraScheduler camera,IInputData userInput=null,
int skipCycles=0,int skipOffset=0)
: base(parent)
{
Dynamics=dynamics;
Gravity=gravity;
Mass=masses;
Camera=camera;
UserInput=userInput;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Thrusters=new List&lt;IMyThrust&gt;();
StMachine=UpdateIterator();
EnoughThrust=true;
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Thrusters.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Base6Directions.Direction blockOrientation;
List&lt;IMyThrust&gt; allThrusters=new List&lt;IMyThrust&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allThrusters,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var thruster in allThrusters)
{
blockOrientation=RC.Orientation.TransformDirectionInverse(thruster.Orientation.Forward);
if(blockOrientation==Base6Directions.Direction.Down)
Thrusters.Add(thruster);
}
ReleaseControl();
}
}
public void ReleaseControl()
{
foreach(var thruster in Thrusters)
thruster.ThrustOverride=0;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
Time+=dT;
if(Camera.Ready&amp;&amp;Camera.DataAge==0)
{
EmpiricDescentVeloc=(AltitudePrev-Camera.Altitude)/Time;
Time=0;
AltitudePrev=Altitude=Camera.Altitude;
AltitudeAge=0;
}
else
IntegrateAltitude();
yield return true;
}
CycleNum=0;

Time+=dT;
if(Camera.Ready&amp;&amp;Camera.DataAge==0)
{
EmpiricDescentVeloc=(AltitudePrev-Camera.Altitude)/Time;
Time=0;
AltitudePrev=Altitude=Camera.Altitude;
AltitudeAge=0;
}
else if(AltitudeAge&gt;Camera.SkipCycles*3)
{
double alt=0;
RC.TryGetPlanetElevation(MyPlanetElevation.Surface,out alt);
alt-=RC.CubeGrid.WorldVolume.Radius;
EmpiricDescentVeloc=(AltitudePrev-alt)/Time;
Time=0;
AltitudePrev=Altitude=alt;
AltitudeAge=0;
}
else
IntegrateAltitude();
double discriminantOver4=-1;
double fallVelocity=0;
if(Gravity.Magnitude&gt;0)
{
double totalThrustForce=0;
foreach(var thruster in Thrusters)
if(thruster.IsWorking)
totalThrustForce+=thruster.MaxEffectiveThrust;
double liftThrust=totalThrustForce/Mass.Masses.PhysicalMass-Gravity.Magnitude;
EnoughThrust=liftThrust&gt;0;
if(Dynamics.Velocity.Down&gt;SafeFallVelocity)
fallVelocity=Dynamics.Velocity.Down*0.3+EmpiricDescentVeloc*0.7;
else
fallVelocity=Dynamics.Velocity.Down;
discriminantOver4=fallVelocity*fallVelocity-liftThrust*2*Altitude;
}
if((discriminantOver4&gt;=0&amp;&amp;fallVelocity&gt;SafeFallVelocity)||(UserInput.CSpacebar&gt;0&amp;&amp;UseJumpJets))
foreach(var thruster in Thrusters)
thruster.ThrustOverridePercentage=1;
else if(UserInput!=null)
foreach(var thruster in Thrusters)
thruster.ThrustOverride=0.01f;
}
void IntegrateAltitude()
{
Altitude+=Dynamics.Velocity.Up*dT;
++AltitudeAge;
}
}

class GyroStabilisationAssisting : BaseClass
{
List&lt;IMyGyro&gt; Gyros;
GravityWatcher Gravity;
OrientationComputer OrientationPrime;
OrientationComputer OrientationSecond;
CameraScheduler Camera;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
PID PitchPID;
PID RollPID;
Vector3D AnglesPrev;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double Time;
bool EnableState;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Gyros.Count&gt;0;}}
public bool IsAllGyrosWorking {get;set;}
public int SkipCycles;
public double dT=0.016;
public double MinGyroPower=0.2;
public double NaturalPitchDegree;
public double VehicleTurnRadiusRight;
public double VehicleTurnRadiusLeft;
public double CoMToWheelsBaseAngle;
public GyroStabilisationAssisting(Program parent,GravityWatcher gravity,
OrientationComputer orientation,CameraScheduler camera,GridDynamicsWatcher dynamics,
int skipCycles=0,int skipOffset=0) : base(parent)
{
Gravity=gravity;
OrientationPrime=orientation;
Camera=camera;
Dynamics=dynamics;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Gyros=new List&lt;IMyGyro&gt;();
OrientationSecond=new OrientationComputer(parent);
PitchPID=new PID(3,0,0.33);
RollPID=new PID(3,0,0.33);
StMachine=UpdateIterator();
IsAllGyrosWorking=true;
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Gyros.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Parent.GridTerminalSystem.GetBlocksOfType(Gyros,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
OrientationSecond.RC=RC;
}
}
public void ReleaseControl()
{
foreach(var gyro in Gyros)
{
gyro.GyroOverride=false;
gyro.GyroPower=100;
}
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
int temp=SkipCycles-1;
for(;CycleNum&lt;temp;++CycleNum)
{
Time+=dT;
yield return true;
}
CycleNum=0;

Time+=dT;
if(Gravity.Magnitude==0) yield break;
Vector3D angles=OrientationPrime.RollYawPitch;
if(!Vector3D.IsZero(Camera.SurfaceTilt))
{
Vector3D tempv=Gravity.Direction;
tempv=Vector3D.Reject(Gravity.Direction,Vector3D.Normalize(Camera.SurfaceTilt));
if(!Vector3D.IsZero(Camera.SurfaceBank))
tempv=Vector3D.Reject(tempv,Vector3D.Normalize(Camera.SurfaceBank));
OrientationSecond.Update(tempv,true);
angles=OrientationSecond.RollYawPitch;
if(Math.Abs(angles.X)&lt;0.05236) // 3 degree
angles.X=0;
if(Math.Abs(angles.Z)&lt;0.05236)
angles.Z=0;
}
else if(Dynamics.Velocity.Down&gt;3)
{
double vLen=Gravity.Magnitude*0.364;// tan(20 deg)
Vector3D tempv=Vector3D.Normalize(Dynamics.Velocity.Vector)*vLen+Gravity.Direction;
OrientationSecond.Update(tempv,true);
angles=OrientationSecond.RollYawPitch;
}

angles.Z-=MathHelperD.ToRadians(NaturalPitchDegree);
angles.X=-angles.X;
angles.Y=0;
if(UserInput.AD!=0)
{
if(Dynamics.Velocity.VerticalAbs&gt;0.5)
{
angles.Y=UserInput.AD*0.618;
if(Dynamics.Velocity.Backward&gt;=0.1)
angles.Y=-angles.Y;
}
else
{
if(UserInput.AD&gt;0&amp;&amp;VehicleTurnRadiusRight&gt;0)
{
double safeTurnRadiusRight=Math.Pow(Dynamics.Velocity.LateralAbs,1.5)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle-OrientationPrime.Roll,1e-6,MathHelperD.Pi/2.1)));
angles.Y=Dynamics.Velocity.Forward/Math.Max(VehicleTurnRadiusRight,safeTurnRadiusRight)*UserInput.AD;
}
else if(UserInput.AD&lt;0&amp;&amp;VehicleTurnRadiusLeft&lt;0)
{
double safeTurnRadiusLeft=Math.Pow(Dynamics.Velocity.LateralAbs,1.5)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle+OrientationPrime.Roll,1e-6,MathHelperD.Pi/2.1)));
angles.Y=Dynamics.Velocity.Forward/Math.Min(VehicleTurnRadiusLeft,-safeTurnRadiusLeft)*-UserInput.AD;
}
}
}
Vector3D PIDSignal=Vector3D.Zero;
bool blackScienceEquation=(angles-AnglesPrev).AbsMax()&gt;=angles.AbsMax()/5||angles.Y!=0;
if(blackScienceEquation)
{
AnglesPrev=angles;
PIDSignal.Y=angles.Y;
PIDSignal.X=RollPID.GetSignal(angles.X,Time);
PIDSignal.Z=PitchPID.GetSignal(angles.Z,Time);
}
if(SkipCycles&gt;0)
{
yield return true;
Time+=dT;
}
double gyroPower=MathHelperD.Clamp(angles.AbsMax()/MathHelperD.PiOver4,MinGyroPower,1.0);
Base6Directions.Direction gyroOrientation;
int workingGyrosCount=0;
foreach(var gyro in Gyros)
{
if(gyro.IsWorking)
{
++workingGyrosCount;
if(blackScienceEquation)
{
gyro.GyroOverride=true;
gyro.GyroPower=(float)gyroPower;
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Up);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Yaw=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Yaw=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Yaw=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Yaw=(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Yaw=-(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Yaw=(float)PIDSignal.Z;break;
}
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Left);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Pitch=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Pitch=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Pitch=(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Pitch=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Pitch=(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Pitch=-(float)PIDSignal.Z;break;
}
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Forward);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Roll=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Roll=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Roll=(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Roll=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Roll=(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Roll=-(float)PIDSignal.Z;break;
}
}
}
}
IsAllGyrosWorking=workingGyrosCount==Gyros.Count;
}
}

class SmartDampenersOverride : BaseClass
{
List&lt;IMyThrust&gt; ForwardThrusters;
List&lt;IMyThrust&gt; BackwardThrusters;
List&lt;IMyThrust&gt; RightwardThrusters;
List&lt;IMyThrust&gt; LeftwardThrusters;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;

public bool Enabled;
new public bool Ready
{
get
{
return (this as BaseClass).Ready &amp;&amp;
(ForwardThrusters.Count+BackwardThrusters.Count+RightwardThrusters.Count+LeftwardThrusters.Count)&gt;0;
}
}
public int SkipCycles;
public SmartDampenersOverride(Program parent,GridDynamicsWatcher dynamics,
int skipCycles=0,int skipOffset=0) : base(parent)
{
Dynamics=dynamics;
SkipCycles=skipCycles;
CycleNum=skipOffset;
ForwardThrusters=new List&lt;IMyThrust&gt;();
BackwardThrusters=new List&lt;IMyThrust&gt;();
RightwardThrusters=new List&lt;IMyThrust&gt;();
LeftwardThrusters=new List&lt;IMyThrust&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
ForwardThrusters.Clear();
BackwardThrusters.Clear();
RightwardThrusters.Clear();
LeftwardThrusters.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Base6Directions.Direction blockOrientation;
List&lt;IMyThrust&gt; allThrusters=new List&lt;IMyThrust&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allThrusters,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var thruster in allThrusters)
{
blockOrientation=RC.Orientation.TransformDirectionInverse(thruster.Orientation.Forward);
switch(blockOrientation)
{
case Base6Directions.Direction.Backward:
ForwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Forward:
BackwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Right:
LeftwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Left:
RightwardThrusters.Add(thruster);
break;
}
}
}
}
public void ReleaseControl()
{
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0;
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;

if((RC.DampenersOverride&amp;&amp;(UserInput.WS&gt;=0||Dynamics.Velocity.Backward&gt;1))||(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0;
else
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0.01f;

if((RC.DampenersOverride&amp;&amp;(UserInput.WS&lt;=0||Dynamics.Velocity.Forward&gt;1))||(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0;
else
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0.01f;

if(RC.DampenersOverride&amp;&amp;!(UserInput.AD&gt;0&amp;&amp;Dynamics.Velocity.Right&gt;1)&amp;&amp;Dynamics.Velocity.SideAbs&gt;1)
{
if(UserInput.AD&lt;0&amp;&amp;Dynamics.Velocity.Left&gt;1)
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverridePercentage=1;
else
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0;
}
else
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0.01f;

if(RC.DampenersOverride&amp;&amp;!(UserInput.AD&lt;0&amp;&amp;Dynamics.Velocity.Left&gt;1)&amp;&amp;Dynamics.Velocity.SideAbs&gt;1)
{
if(UserInput.AD&gt;0&amp;&amp;Dynamics.Velocity.Right&gt;1)
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverridePercentage=1;
else
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0;
}
else
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0.01f;
}
}

class LightsManager : BaseClass
{
List&lt;IMyLightingBlock&gt; StopLights;
List&lt;IMyLightingBlock&gt; TurnLights;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
string StopLightsGroupName;
string TurnLightsGroupName;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;(StopLights.Count+TurnLights.Count)&gt;0;}}
public int SkipCycles;
public LightsManager(Program parent,GridDynamicsWatcher dynamics,string stopLightGrpNm,
string turnLightGrpNm,int skipCycles=0,int skipOffset=0) : base(parent)
{
Dynamics=dynamics;
StopLightsGroupName=stopLightGrpNm;
TurnLightsGroupName=turnLightGrpNm;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StopLights=new List&lt;IMyLightingBlock&gt;();
TurnLights=new List&lt;IMyLightingBlock&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
StopLights.Clear();
TurnLights.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
IMyBlockGroup lightsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(StopLightsGroupName);
if(lightsGroup!=null)
lightsGroup.GetBlocksOfType(StopLights,block =&gt; block.IsSameConstructAs(Parent.Me));

lightsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(TurnLightsGroupName);
if(lightsGroup!=null)
lightsGroup.GetBlocksOfType(TurnLights,block =&gt; block.IsSameConstructAs(Parent.Me));
}
}
public void ReleaseControl()
{
foreach(var light in StopLights)
light.Enabled=true;
foreach(var light in TurnLights)
light.Enabled=true;
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
int temp=SkipCycles-1;
for(;CycleNum&lt;temp;++CycleNum)
yield return true;
CycleNum=0;

foreach(var light in StopLights)
{
if((Dynamics.Velocity.Forward&gt;0.4&amp;&amp;Dynamics.Acceleration.AvrEMA&lt;-7&amp;&amp;UserInput.WS&gt;=0)||UserInput.CSpacebar&gt;0)
{
light.Radius=2f;
light.Intensity=5f;
light.Falloff=1.3f;
light.Color=Color.Red;
}
else if(Dynamics.Velocity.Backward&gt;0.5)
{
light.Radius=5f;
light.Intensity=5f;
light.Falloff=1.3f;
light.Color=Color.White;
}
else
{
light.Radius=3f;
light.Intensity=3f;
light.Falloff=0;
light.Color=Color.DarkRed;
}
}
if(SkipCycles&gt;0) yield return true;
foreach(var light in TurnLights)
{
if(light.CustomData.Equals("LEFT",StringComparison.OrdinalIgnoreCase))
{
if(UserInput.AD&lt;0)
light.Enabled=true;
else
light.Enabled=false;
}
else if(light.CustomData.Equals("RIGHT",StringComparison.OrdinalIgnoreCase))
{
if(UserInput.AD&gt;0)
light.Enabled=true;
else
light.Enabled=false;
}
}
}
}

class DisplayScheduler
{
Program Parent;
List&lt;IMyTextSurface&gt; LCDs;
int CycleNum;
int PrintCounter;
IEnumerator&lt;bool&gt; StMachine;
string Keyword;
StringBuilder Str;
CallBackFunk CallBack;

public delegate StringBuilder CallBackFunk(int i);
public bool Ready {get;set;}
public int SkipCycles;
public string Caption;

public DisplayScheduler(Program parent,CallBackFunk callBack,string keyword,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
CallBack=callBack;
Keyword=keyword;
SkipCycles=skipCycles;
CycleNum=skipOffset;
LCDs=new List&lt;IMyTextSurface&gt;();
Str=new StringBuilder();
StMachine=UpdateIterator();
}
public void DetectBlocks()
{
LCDs.Clear();
List&lt;IMyTerminalBlock&gt; lcdHosts=new List&lt;IMyTerminalBlock&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(lcdHosts,block =&gt; block as IMyTextSurfaceProvider!=null&amp;&amp;block.IsSameConstructAs(Parent.Me));
List&lt;string&gt; lines=new List&lt;string&gt;();
IMyTextSurface lcd;
foreach(var block in lcdHosts)
{
if(block.CustomData.Length&gt;0)
{
lines.Clear();
new StringSegment(block.CustomData).GetLines(lines);
foreach(var line in lines)
{
if(line.Contains(Keyword))
{
if(block as IMyTextSurface!=null)
lcd=block as IMyTextSurface;
else
{
int i=0;
int.TryParse(line.Replace(Keyword,""),out i);
IMyTextSurfaceProvider t_sp=block as IMyTextSurfaceProvider;
i=Math.Max(0,Math.Min(i,t_sp.SurfaceCount));
lcd=t_sp.GetSurface(i);
}
lcd.ContentType=ContentType.TEXT_AND_IMAGE;
LCDs.Add(lcd);
}
}
}
}
Ready=LCDs.Count&gt;0;
}
public void ForcePrint(StringBuilder text=null)
{
if(Ready)
{
Str.Clear();
Str.Append(Caption);
++PrintCounter;
switch(PrintCounter % 4)
{
case 0: Str.Append("--");break;
case 1: Str.Append("\\");break;
case 2: Str.Append("|");break;
case 3: Str.Append("/");break;
}
Str.Append("\n_________________________________________________________\n");
if(text!=null)
Str.Append(text);
else
Str.Append(CallBack(PrintCounter));
foreach(var lcd in LCDs)
lcd.WriteText(Str);
}
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
while(CycleNum&lt;SkipCycles)
{
++CycleNum;
yield return true;
}
CycleNum=0;
ForcePrint();
}
}

class AutoHandbrakesSubroutine : BaseClass
{
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool WasManned;

public int SkipCycles;
public HandbrakeMode Mode;
public AutoHandbrakesSubroutine(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
if(WasManned&amp;&amp;!UserInput.Manning&amp;&amp;(Mode==HandbrakeMode.Auto||Mode==HandbrakeMode.Semi))
RC.HandBrake=true;
if(!WasManned&amp;&amp;UserInput.Manning&amp;&amp;Mode==HandbrakeMode.Auto)
RC.HandBrake=false;
WasManned=UserInput.Manning;
}
}

class ArtificialMassSubroutine
{
Program Parent;
List&lt;IMyVirtualMass&gt; VirtualMassBlocks;
GravityWatcher Gravity;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public bool Ready {get;private set;}
public int SkipCycles;
public ArtificialMassSubroutine(Program parent,GravityWatcher gravity,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
Gravity=gravity;
SkipCycles=skipCycles;
CycleNum=skipOffset;
VirtualMassBlocks=new List&lt;IMyVirtualMass&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks()
{
VirtualMassBlocks.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(VirtualMassBlocks,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
Ready=VirtualMassBlocks.Count&gt;0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
if(Gravity.ArtificialStongerNatural)
foreach(var block in VirtualMassBlocks)
block.Enabled=true;
else
foreach(var block in VirtualMassBlocks)
block.Enabled=false;
}
}

class GPSTrackerSubroutine : BaseClass
{
bool EnableState;
IInputData UserInput;
GridDynamicsWatcher Dynamics;
float ADPrev;
int WaypointNum;

public bool Enabled;
public StringBuilder GPSTrackList {get;}
public GPSTrackerSubroutine(Program parent,IInputData userInput,GridDynamicsWatcher dynamics) : base(parent)
{
UserInput=userInput;
Dynamics=dynamics;
GPSTrackList=new StringBuilder();
}
public void Update()
{
if(Enabled)
{
if(!EnableState)
{
WaypointNum=1;
GPSTrackList.Clear();
ADPrev=1-UserInput.AD;
}
if(UserInput.AD!=ADPrev&amp;&amp;Dynamics.Velocity.VerticalAbs&lt;1)
{
GPSTrackList.AppendFormat("GPS:{0} #{1:D3}:{2:F2}:{3:F2}:{4:F2}:\n",RC.CubeGrid.CustomName,WaypointNum,
RC.CubeGrid.WorldVolume.Center.X,RC.CubeGrid.WorldVolume.Center.Y,RC.CubeGrid.WorldVolume.Center.Z);
++WaypointNum;
ADPrev=UserInput.AD;
}
}
else if(EnableState)
GPSTrackList.AppendFormat("GPS:{0} #{1:D3}:{2:F2}:{3:F2}:{4:F2}:\n",RC.CubeGrid.CustomName,WaypointNum,
RC.CubeGrid.WorldVolume.Center.X,RC.CubeGrid.WorldVolume.Center.Y,RC.CubeGrid.WorldVolume.Center.Z);
EnableState=Enabled;
}
}

class BackupBeeperSubroutine
{
Program Parent;
int CycleNum;
bool IsPlaying;
string SoundBlocksName;
IEnumerator&lt;bool&gt; StMachine;
GridDynamicsWatcher Dynamics;
List&lt;IMySoundBlock&gt; SoundBlocks;

public bool Ready {get;set;}
public int SkipCycles;
public BackupBeeperSubroutine(Program parent,GridDynamicsWatcher dynamics,string soundBlocksName,
int skipCycles=0,int skipOffset=0)
{
Parent=parent;
Dynamics=dynamics;
SoundBlocksName=soundBlocksName;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
SoundBlocks=new List&lt;IMySoundBlock&gt;();
}
public void DetectBlocks()
{
SoundBlocks.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(SoundBlocks,block =&gt; block.IsSameConstructAs(Parent.Me)&amp;&amp;block.CustomName.Contains(SoundBlocksName));
Ready=SoundBlocks.Count&gt;0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
while(CycleNum&lt;SkipCycles)
{
++CycleNum;
yield return true;
}
CycleNum=0;
if(Dynamics.Velocity.Backward&gt;0.5)
{
if(!IsPlaying)
{
foreach(var sb in SoundBlocks)
sb.Play();
IsPlaying=true;
}
}
else
{
if(IsPlaying)
{
foreach(var sb in SoundBlocks)
sb.Stop();
IsPlaying=false;
}
}
}
}

class ConnectorSubroutine : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
List&lt;IMyShipConnector&gt; Connectors;

new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Connectors.Count&gt;0;}}
public int SkipCycles;
public bool IsConnected {get;private set;}
public ConnectorSubroutine(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
Connectors=new List&lt;IMyShipConnector&gt;();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
Connectors.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(Connectors,
block =&gt; block.IsSameConstructAs(Parent.Me)&amp;&amp;!Utils.IsIgnore(block));
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
IsConnected=false;
foreach(var con in Connectors)
if(con.Status==MyShipConnectorStatus.Connected)
{
IsConnected=true;
break;
}
}
}

UserInputWatcher UserInput;
AutopilotDriver Autopilot;
CruiseControlUnit CruiseControl;
GridDynamicsWatcher VehicleDynamics;
GridMassWatcher VehicleMass;
GravityWatcher Gravity;
OrientationComputer Orientation;
CameraScheduler Cameras;
TractionControlSystem TCS;
FallDampeningSystem FDS;
GyroStabilisationAssisting GSA;
SmartDampenersOverride SDO;
LightsManager Lights;
DisplayScheduler NavgtnDisplays;
DisplayScheduler StatusDisplays;
AutoHandbrakesSubroutine AutoBrakes;
ArtificialMassSubroutine ArtMass;
GPSTrackerSubroutine GPSTracker;
BackupBeeperSubroutine BackupBeeper;
ConnectorSubroutine ConnectorSubrtn;
RuntimeProfiler Profiler;

IEnumerator&lt;bool&gt; BootStMachine;
Program Parent;
bool Booted;
bool Busy;
bool ShowGPSList;
StringBuilder StrN;
StringBuilder StrS;

public double MaxForwardAcceleration {get {return _MaxForwardAccel;} set {_MaxForwardAccel=TCS.MaxForwardAcceleration=value;}}
public double MaxBackwardAcceleration {get {return _MaxBackwardAccel;} set {_MaxBackwardAccel=TCS.MaxBackwardAcceleration=value;}}
public double MaxPowerConsumption {get {return _MaxPowerConsumption;} set {_MaxPowerConsumption=TCS.PowerLimit=value;}}
public double NaturalPitchDegree {get {return _NaturalPitchDegree;} set {_NaturalPitchDegree=GSA.NaturalPitchDegree=VehicleDynamics.NaturalPitchDegree=value;}}
public double SafeFallVelocity {get {return _SafeFallVelocity;} set {_SafeFallVelocity=FDS.SafeFallVelocity=value;}}
public double LeanToSurfaceDistance {get {return _LeanToSurfaceDistance;} set {_LeanToSurfaceDistance=Cameras.CalcSurfaceAfter=value;}}
public double MaxSteerAngleDegree {get {return _MaxSteerAngleDegree;} set {_MaxSteerAngleDegree=TCS.MaxSteerAngleDegree=value;}}
public double ForwardSpeedLimitKPH {get {return _FrwrdSpeedLimitKPH;} set {_FrwrdSpeedLimitKPH=TCS.ForwardSpeedLimitKPH=value;}}
public double BackwardSpeedLimitKPH {get {return _BckwrdSpeedLimitKPH;} set {_BckwrdSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=value;}}
public double SuspensionHeightOffset {get {return _SusHeightOffset;} set {_SusHeightOffset=TCS.HeightOffset=value;}}
public double SuspensionStrenght {get {return _SusStrenght;} set {_SusStrenght=TCS.Strenght=value;}}
public double SuspensionValueChangeRate {get {return _SusValueChangeRate;} set {_SusValueChangeRate=TCS.ValueChangeRate=value;}}
public double AutopilotAccuracy {get {return _AutopilotAccuracy;} set {_AutopilotAccuracy=Autopilot.Accuracy=value;}}
public double AutopilotWait {get {return _AutopilotWait;} set {_AutopilotWait=Autopilot.WaitTimeSec=value;}}
public double AutopilotSpeedLimitKMP {get {return _AutopilotSpeedLimitKMP;} set {_AutopilotSpeedLimitKMP=value;}}
public bool UseJumpJets {get {return _UseJumpJets;} set {_UseJumpJets=FDS.UseJumpJets=value;}}
public bool UseAdaptiveSteering {get {return _UseAdaptiveSteering;} set {_UseAdaptiveSteering=TCS.UseAdaptiveSteering=value;}}
public bool UseAckermannSteering {get {return _UseAckermannSteering;} set {_UseAckermannSteering=TCS.UseAckermannSteering=value;}}
public bool UseDASAirShock {get {return _UseDASAirShock;} set {_UseDASAirShock=TCS.UseDASAirShock=value;}}
public bool UseHillDescentControl {get {return _UseHillDescentControl;} set {_UseHillDescentControl=value;TCS.UseHillDescentControl=Autopilot.Enabled ? true : value;}}
public bool UseGSA {get {return _UseGSA;} set {_UseGSA=GSA.Enabled=value;}}
public bool UseTCS {get {return _UseTCS;} set {_UseTCS=TCS.Enabled=value;}}
public bool UseFDS {get {return _UseFDS;} set {_UseFDS=FDS.Enabled=value;}}
public bool UseSDO {get {return _UseSDO;} set {_UseSDO=SDO.Enabled=value;}}
public bool UseLights {get {return _UseLights;} set {_UseLights=Lights.Enabled=value;}}
public bool Run;
public double Odometer;

public DriverAssistingSystem(Program parentProgram)
{
Parent=parentProgram;

UserInput=new UserInputWatcher(Parent);

VehicleDynamics=new GridDynamicsWatcher(Parent);
VehicleMass=new GridMassWatcher(Parent,9,9);
VehicleMass.SetIgnorArray(new float[] {
100,// player
420,// l.g. 1x1 wheel
105,// s.g. 1x1
590,// l.g. 3x3
205,// s.g. 3x3
760,// l.g. 5x5
310 // s.g. 5x5
});
Gravity=new GravityWatcher(Parent,59,56);
Orientation=new OrientationComputer(Parent,2,2);
Cameras=new CameraScheduler(Parent,VehicleDynamics,2,2);
TCS=new TractionControlSystem(Parent,VehicleDynamics,Gravity,Orientation,Cameras,
_SubgridWheelsGroupName,1,1,7,4,7,1,7,0,9,5,7,5,9,7,59,53);
FDS=new FallDampeningSystem(Parent,VehicleDynamics,Gravity,VehicleMass,Cameras,UserInput,3);
GSA=new GyroStabilisationAssisting(Parent,Gravity,Orientation,Cameras,VehicleDynamics,3,2);
SDO=new SmartDampenersOverride(Parent,VehicleDynamics);
Lights=new LightsManager(Parent,VehicleDynamics,_StopLightsGroupName,_TurnLightsGroupName,9,4);
Autopilot=new AutopilotDriver(Parent,_AutopilotTimerName,5);
CruiseControl=new CruiseControlUnit(Parent,UserInput,VehicleDynamics,Orientation,5);
AutoBrakes=new AutoHandbrakesSubroutine(Parent,9,9);
ArtMass=new ArtificialMassSubroutine(Parent,Gravity,99,91);
GPSTracker=new GPSTrackerSubroutine(Parent,UserInput,VehicleDynamics);
BackupBeeper=new BackupBeeperSubroutine(Parent,VehicleDynamics,_BackupBeeperName,9,8);
ConnectorSubrtn=new ConnectorSubroutine(Parent);

NavgtnDisplays=new DisplayScheduler(Parent,ComposeNavigationData,"DAS_navigation",14,2);
StatusDisplays=new DisplayScheduler(Parent,ComposeStatusData,"DAS_status",29,8);
Profiler=new RuntimeProfiler(Parent,14);
Profiler.Caption="DAS - Driver Assisting System  ";

Run=true;
Load();
VehicleDynamics.NaturalPitchDegree=_NaturalPitchDegree;
TCS.MaxForwardAcceleration=_MaxForwardAccel;
TCS.MaxBackwardAcceleration=_MaxBackwardAccel;
TCS.PowerLimit=_MaxPowerConsumption;
TCS.AckFocal=_AckermannFocalPoint;
TCS.UseAdaptiveSteering=_UseAdaptiveSteering;
TCS.UseAckermannSteering=_UseAckermannSteering;
TCS.UseDASAirShock=_UseDASAirShock;
TCS.UseHillDescentControl=_UseHillDescentControl;
TCS.ForwardSpeedLimitKPH=_FrwrdSpeedLimitKPH;
TCS.BackwardSpeedLimitKPH=_BckwrdSpeedLimitKPH;
TCS.MaxSteerAngleDegree=_MaxSteerAngleDegree;
TCS.HeightOffset=_SusHeightOffset;
TCS.Strenght=_SusStrenght;
TCS.ValueChangeRate=_SusValueChangeRate;
TCS.Enabled=_UseTCS;
FDS.SafeFallVelocity=_SafeFallVelocity;
FDS.UseJumpJets=_UseJumpJets;
FDS.Enabled=_UseFDS;
GSA.NaturalPitchDegree=_NaturalPitchDegree;
GSA.Enabled=_UseGSA;
SDO.Enabled=_UseSDO;
Lights.Enabled=_UseLights;
Cameras.CalcSurfaceAfter=_LeanToSurfaceDistance;
AutoBrakes.Mode=_HandbrakeMode;
Autopilot.WaitTimeSec=_AutopilotWait;
Autopilot.Accuracy=_AutopilotAccuracy;
if(Autopilot.Enabled)
SetAutopilotControl();
else
SetUserControl();

StrN=new StringBuilder();
StrS=new StringBuilder();

BootStMachine=Boot();
Booted=false;
if(Run)
Start();
}

public void Save()
{
MyIni config=new MyIni();
config.Set("General","Run",Run);
config.Set("General","JumpJets",_UseJumpJets);
config.Set("General","HDC",_UseHillDescentControl);
config.Set("General","Odometer",Odometer);

config.Set("Autopilot","Enabled",Autopilot.Enabled);
config.Set("Autopilot","WaitTime",_AutopilotWait);
config.Set("Autopilot","Accuracy",_AutopilotAccuracy);
config.Set("Autopilot","WaypointIndex",Autopilot.WaypointIndx);
config.Set("Autopilot","WaypointSelector",Autopilot.WaypointSelector);
config.Set("Autopilot","DriveMode",(int)Autopilot.DriveMode);

Parent.Storage=config.ToString();
}

public void Start()
{
Busy=true;
Run=true;
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update1;
}

public void Stop()
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.None;
Run=false;
ReleaseAllOverrides();
NavgtnDisplays.ForcePrint(ComposeNavigationData());
StatusDisplays.ForcePrint(ComposeStatusData());

}

public void Update(UpdateType updateSource)
{
if(Booted)
{
double dT=0;
if(updateSource.HasFlag(UpdateType.Update1))
dT=0.016;
else if(updateSource.HasFlag(UpdateType.Update10))
dT=0.16;
else if(updateSource.HasFlag(UpdateType.Update100))
dT=1.6;
FDS.dT=GSA.dT=Cameras.dT=Autopilot.dT=VehicleDynamics.dT=dT;
try
{
ConnectorSubrtn.Update();
if(!ConnectorSubrtn.IsConnected)
{
Gravity.Update();
VehicleMass.Update();
if(VehicleMass.BaseMassChanged)
{
Booted=false;
return;
}
if(VehicleMass.PhysicalMassChanged)
{
TCS.UpdateSuspensionCofiguration();
TCS.UpdateSprungWeight(VehicleMass.Masses.PhysicalMass);
RelayTCSDataToGSA();
}
if(Gravity.MagnitudeChanged)
{
TCS.UpdateSprungWeight(VehicleMass.Masses.PhysicalMass);
RelayTCSDataToGSA();
}
VehicleDynamics.Update();
UserInput.Update();
Autopilot.Update();
CruiseControl.Update();
AutoBrakes.Update();
TCS.Update();
ArtMass.Update();
if(Busy)
{
Cameras.SkipCycles=2+(100-(int)VehicleDynamics.Velocity.Scalar)/14;
Cameras.Update();
Orientation.Update(Gravity.Direction);
GSA.Update();
FDS.Update();
SDO.Update();
Lights.Update();
GPSTracker.Update();
BackupBeeper.Update();
}
if(Autopilot.Enabled&amp;&amp;!Autopilot.Busy)
{
Autopilot.Enabled=false;
SetUserControl();
}
if(CruiseControl.Enabled)
{
if(CruiseControl.Busy)
TCS.ForwardSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=CruiseControl.SpeedKPH;
else
{
CruiseControl.Enabled=false;
SetUserControl();
}
}

if(VehicleDynamics.Velocity.LateralAbs&gt;0.5)
Odometer+=VehicleDynamics.Velocity.LateralAbs*dT;
}
NavgtnDisplays.Update();
StatusDisplays.Update();
bool busy=!ConnectorSubrtn.IsConnected&amp;&amp;(TCS.Busy||Autopilot.Enabled||CruiseControl.Enabled||UserInput.Manning||VehicleDynamics.Velocity.Scalar&gt;0.5);
if(Busy&amp;&amp;!busy)
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update10;
Profiler.SkipCycles=2;
}
else if(!Busy&amp;&amp;busy)
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update1;
Profiler.SkipCycles=14;
}
Busy=busy;
}
catch(Exception ex) // *Pokemon joke here*
{
Booted=false;
Parent.Echo("Exeption: "+ex.ToString());
VehicleDynamics.Reset();
UserInput.Reset();
ReleaseAllOverrides();
Save();
}
Profiler.Update();
}
else // Run boot sequence
{
if(!BootStMachine.MoveNext())
BootStMachine=Boot();
}
}

public void ChangeHandbrakeMode()
{
++_HandbrakeMode;
if(_HandbrakeMode==HandbrakeMode.END_OF_ENUM)
_HandbrakeMode=0;
AutoBrakes.Mode=_HandbrakeMode;
}

public void ToggleAutopilot(bool reset=true)
{
Autopilot.Enabled=!Autopilot.Enabled;
if(Autopilot.Enabled)
{
Autopilot.ResetWaypointIndex(reset);
SetAutopilotControl();
}
else
SetUserControl();
}

public void ChangeAutopilotDriveMode()
{
++Autopilot.DriveMode;
if(Autopilot.DriveMode==AutopilotDriver.EDriveMode.END_OF_ENUM)
Autopilot.DriveMode=AutopilotDriver.EDriveMode.OneWay;
}

public void InverseAutopilot()
{
Autopilot.InverseRoute();
}

public void ToggleCruiseControl()
{
CruiseControl.Enabled=!CruiseControl.Enabled;
if(CruiseControl.Enabled)
SetCruiseControl();
else
SetUserControl();
}

public void ToggleGPSTracker()
{
if(!CruiseControl.Enabled&amp;&amp;!Autopilot.Enabled)
GPSTracker.Enabled=!GPSTracker.Enabled;
}

public void ToggleGPSList()
{
ShowGPSList=!ShowGPSList;
if(ShowGPSList)
StatusDisplays.Caption="Driver Assisting System\\\\GPS Track ";
else
StatusDisplays.Caption="Driver Assisting System\\\\Status ";
}

//-------------------------------------------------------------------
void Load()
{
MyIni config=new MyIni();
if(config.TryParse(Parent.Storage))
{
if(config.ContainsSection("General"))
{
config.Get("General","Run").TryGetBoolean(out Run);
config.Get("General","JumpJets").TryGetBoolean(out _UseJumpJets);
config.Get("General","HDC").TryGetBoolean(out _UseHillDescentControl);
config.Get("General","Odometer").TryGetDouble(out Odometer);
}
if(config.ContainsSection("Autopilot"))
{
config.Get("Autopilot","Enabled").TryGetBoolean(out Autopilot.Enabled);
config.Get("Autopilot","WaitTime").TryGetDouble(out _AutopilotWait);
config.Get("Autopilot","Accuracy").TryGetDouble(out _AutopilotAccuracy);
config.Get("Autopilot","WaypointIndex").TryGetInt32(out Autopilot.WaypointIndx);
config.Get("Autopilot","WaypointSelector").TryGetInt32(out Autopilot.WaypointSelector);
int t=(int)Autopilot.DriveMode;
config.Get("Autopilot","DriveMode").TryGetInt32(out t);
Autopilot.DriveMode=(AutopilotDriver.EDriveMode)t;
}
}
}

IEnumerator&lt;bool&gt; Boot()
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update10;
StringQueue bootLog=new StringQueue(15);
StringBuilder failList=new StringBuilder("\n");
IMyTextSurface myLCD=(Parent.Me as IMyTextSurfaceProvider).GetSurface(0);
NavgtnDisplays.DetectBlocks();
StatusDisplays.DetectBlocks();
if(NavgtnDisplays.Ready||StatusDisplays.Ready)
{
StatusDisplays.Caption=NavgtnDisplays.Caption="Driver Assisting System\\\\Booting... ";
bootLog.Append("DAS.DisplayScheduler...   ok");
}
else
{
bootLog.Append("DAS.DisplayScheduler...   failure");
failList.Append("DAS.DisplayScheduler failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
VehicleDynamics.ForceDetectRemoteControl();
if(!VehicleDynamics.Ready)
{
bootLog.Append("DAS.GridDynamicsWatcher...   failure\n\nCritical failure during boot:\nNo Remote Control Block found.");
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update100;
BootPrint(bootLog.GetString(),myLCD);
yield break;
}
IMyRemoteControl rc=VehicleMass.RC=Gravity.RC=Orientation.RC=VehicleDynamics.RC;
VehicleMass.InitMasses();
for(int i=0;i&lt;=Gravity.SkipCycles;++i)
Gravity.Update();
for(int i=0;i&lt;=Orientation.SkipCycles;++i)
Orientation.Update(Gravity.Direction,true);
bootLog.Append("DAS.GridMassWatcher...   ok");
bootLog.Append("DAS.GravityWatcher...   ok");
bootLog.Append("DAS.OrientationComputer...   ok");
bootLog.Append("DAS.GridDynamicsWatcher...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
UserInput.DetectFuncBlocks();
bootLog.Append("DAS.UserInputWatcher...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
Cameras.DetectBlocks(rc);
if(Cameras.Ready)
{
for(int i=0;i&lt;(Cameras.SkipCycles+2)*2;++i)
Cameras.Update();
bootLog.Append("DAS.CameraScheduler...   ok");
}
else
{
bootLog.Append("DAS.CameraScheduler...   failure");
failList.Append("DAS.CameraScheduler failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
TCS.DetectBlocks(rc);
if(TCS.Ready)
bootLog.Append("DAS.TCS...   ok");
else
{
bootLog.Append("DAS.TCS...   failure");
failList.Append("DAS.TCS failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
FDS.DetectBlocks(rc);
if(FDS.Ready)
bootLog.Append("DAS.FDS...   ok");
else
{
bootLog.Append("DAS.FDS...   failure");
failList.Append("DAS.FDS failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
GSA.DetectBlocks(rc);
RelayTCSDataToGSA();
if(GSA.Ready)
{
for(int i=0;i&lt;=GSA.SkipCycles;++i)
GSA.Update();
bootLog.Append("DAS.GSA...   ok");
}
else
{
bootLog.Append("DAS.GSA...   failure");
failList.Append("DAS.GSA failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
SDO.DetectBlocks(rc);
if(SDO.Ready)
bootLog.Append("DAS.SDO...   ok");
else
{
bootLog.Append("DAS.SDO...   failure");
failList.Append("DAS.SDO failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
Lights.DetectBlocks(rc);
if(Lights.Ready)
bootLog.Append("DAS.LightsManager...   ok");
else
{
bootLog.Append("DAS.LightsManager...   failure");
failList.Append("DAS.LightsManager failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
AutoBrakes.RC=CruiseControl.RC=GPSTracker.RC=rc;
bootLog.Append("DAS.AutoHandbrakesSubroutine...   ok");
ArtMass.DetectBlocks();
Autopilot.DetectBlocks(rc);
if(ArtMass.Ready)
bootLog.Append("DAS.ArtificialMassSubroutine...   ok");
else
bootLog.Append("DAS.ArtificialMassSubroutine...   failure");
bootLog.Append("DAS.AutopilotDriver...   ok");
bootLog.Append("DAS.CruiseControlSubroutine...   ok");
bootLog.Append("DAS.GPSTrackerSubroutine...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
ConnectorSubrtn.DetectBlocks(rc);
if(ConnectorSubrtn.Ready)
bootLog.Append("DAS.ConnectorSubroutine...   ok");
else
bootLog.Append("DAS.ConnectorSubroutine...   failure");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
BackupBeeper.DetectBlocks();
if(BackupBeeper.Ready)
bootLog.Append("DAS.BackupBeeperSubroutine...   ok");
else
bootLog.Append("DAS.BackupBeeperSubroutine...   failure");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
NavgtnDisplays.Caption="Driver Assisting System\\\\Navigation ";
StatusDisplays.Caption="Driver Assisting System\\\\Status ";
Profiler.Memo=failList.ToString();
Busy=false;
Booted=true;
}

string textDASshutdown="\n\n\n\n                         DAS shutdown";
string textDASstandby="\n\n\n\n                         DAS standby";
StringBuilder ComposeNavigationData(int i=0)
{
StrN.Clear();
if(!Run)
StrN.Append(textDASshutdown);
else if(ConnectorSubrtn.IsConnected)
StrN.Append(textDASstandby);
else
{
StrN.AppendFormat("\nLocation:\nGPS:{0}:",Parent.Me.CubeGrid.CustomName);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.X);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.Y);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.Z);
StrN.AppendFormat(":\n\nLateral velocity:    {0,-1:N2} km/h\nVertical velocity:   {1,-1:N2} m/s\nAcceleration:         {2,-1:N1} m/c^2\nTraveled distance: {3,-1:N1} km",
VehicleDynamics.Velocity.Forward*3.6,
VehicleDynamics.Velocity.Up,
VehicleDynamics.Acceleration.AvrEMA,
Odometer/1000.0);
StrN.AppendFormat("\n\nPitch: {0,-1:F2}Â°\nYaw:  {1,-1:F2}Â°\nRoll:   {2,-1:F2}Â°",
MathHelperD.ToDegrees(Orientation.Pitch)-_NaturalPitchDegree,
MathHelperD.ToDegrees(Orientation.Yaw),
MathHelperD.ToDegrees(Orientation.Roll));
}
return StrN;
}

[Flags]
enum WarningFlags : byte {None,GSA,FDS,HDC=4}
WarningFlags Warns;
StringBuilder ComposeStatusData(int i=0)
{
StrS.Clear();
if(!Run)
StrS.Append(textDASshutdown);
else if(ConnectorSubrtn.IsConnected)
StrS.Append(textDASstandby);
else if(ShowGPSList)
return GPSTracker.GPSTrackList;
else
{
StrS.Append("                             Systems\n");
if(TCS.Ready)
{
if(TCS.Enabled)
StrS.Append("          [ TCS ]");
else
StrS.Append("            TCS  ");
}
else
StrS.Append("          [         ]");
if(GSA.Ready)
{
if(GSA.Enabled)
{
if(GSA.IsAllGyrosWorking||i % 2==0)
StrS.Append("          [ GSA ]");
else
StrS.Append("          [         ]");
}
else
StrS.Append("            GSA  ");
}
else
StrS.Append("          [         ]");
if(FDS.Ready)
{
if(FDS.Enabled)
{
if(FDS.EnoughThrust||i % 2==0)
StrS.Append("          [ FDS ]");
else
StrS.Append("          [         ]");
}
else
StrS.Append("            FDS  ");
}
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(SDO.Ready)
{
if(SDO.Enabled)
StrS.Append("          [ SDO ]");
else
StrS.Append("            SDO  ");
}
else
StrS.Append("          [         ]");
if(Lights.Ready)
{
if(Lights.Enabled)
StrS.Append("          [LGHT]");
else
StrS.Append("           LGHT ");
}
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(Warns==WarningFlags.None)
{
if(GSA.Ready&amp;&amp;GSA.Enabled&amp;&amp;!GSA.IsAllGyrosWorking)
Warns |= WarningFlags.GSA;
if(FDS.Ready&amp;&amp;FDS.Enabled&amp;&amp;!FDS.EnoughThrust)
Warns |= WarningFlags.FDS;
if(TCS.UseHillDescentControl&amp;&amp;!_UseHillDescentControl)
Warns |= WarningFlags.HDC;
}
if(Warns.HasFlag(WarningFlags.GSA))
{
StrS.Append("   GSA: Some gyros disabled or damaged.\n");
if(i % 4==0)
Warns ^= WarningFlags.GSA;
}
else if(Warns.HasFlag(WarningFlags.FDS))
{
StrS.Append("   FDS: Not enough thrust.\n");
if(i % 4==0)
Warns ^= WarningFlags.FDS;
}
else if(Warns.HasFlag(WarningFlags.HDC))
{
StrS.Append("   DAS: HDC activated by autopilot.\n");
if(i % 4==0)
Warns ^= WarningFlags.HDC;
}
else
StrS.Append("\n");
switch(_HandbrakeMode)
{
case HandbrakeMode.Semi:
StrS.Append("          [SEMI]");
break;
case HandbrakeMode.Auto:
StrS.Append("          [AUTO]");
break;
case HandbrakeMode.Off:
StrS.Append("          [         ]");
break;
}
if(_UseJumpJets)
StrS.Append("          [JUMP]");
else
StrS.Append("          [         ]");
if(TCS.UseHillDescentControl&amp;&amp;(_UseHillDescentControl||i % 2==0))
StrS.Append("          [ HDC ]");
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(CruiseControl.Enabled)
StrS.Append("          [  CC  ]");
else
StrS.Append("          [         ]");
if(GPSTracker.Enabled&amp;&amp;i % 2==0)
StrS.Append("          [Â¤REC]");
else
StrS.Append("          [         ]");
StrS.Append("\n_________________________________________________________\n");
StrS.AppendFormat("Autopilot:              {0}\n",Autopilot.Enabled ? "ACTIVE" : "OFF");
StrS.AppendFormat("Accuracy:              {0}\n",_AutopilotAccuracy);
StrS.Append("Wait time:              ");
if(Autopilot.Time&gt;=1)
StrS.AppendFormat("{0}/",Math.Floor(Autopilot.Time));
StrS.AppendFormat("{0} sec\n",_AutopilotWait);
switch(Autopilot.DriveMode)
{
case AutopilotDriver.EDriveMode.OneWay:
StrS.Append("Drive Mode:           ONE WAY\n");
break;
case AutopilotDriver.EDriveMode.Patrol:
StrS.Append("Drive Mode:           PATROL\n");
break;
case AutopilotDriver.EDriveMode.Cicrle:
StrS.Append("Drive Mode:           CIRCLE\n");
break;
}
StrS.Append("Route:\n");
if(Autopilot.Enabled)
{
StrS.AppendFormat("{0} {1} {2}\n",
Autopilot.FirstWaypoint.Name,
i % 3==0 ? "&gt;--&gt;" : i % 3==1 ? "-&gt;--" : "--&gt;-",
Autopilot.LastWaypoint.Name);
}
else
StrS.Append("N/A\n");
StrS.Append("Current Waypoint:\n");
StrS.AppendFormat("{0}\n",Autopilot.Enabled ? Autopilot.CurrentWaypoint.ToString() : "N/A");
}
return StrS;
}

void BootPrint(StringBuilder str,IMyTextSurface pbLCD)
{
NavgtnDisplays.ForcePrint(str);
StatusDisplays.ForcePrint(str);
Parent.Echo(str.ToString());
pbLCD?.WriteText(str);
}

void ReleaseAllOverrides()
{
try
{
TCS.ReleaseControl();
FDS.ReleaseControl();
GSA.ReleaseControl();
SDO.ReleaseControl();
Lights.ReleaseControl();
}
finally {}
}

void SetAutopilotControl()
{
CruiseControl.Enabled=false;
GPSTracker.Enabled=false;
TCS.SetInputSource(Autopilot);
TCS.ForceFullOverride=true;
TCS.UseHillDescentControl=true;
TCS.ForwardSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=_AutopilotSpeedLimitKMP;
GSA.SetInputSource(Autopilot);
SDO.SetInputSource(Autopilot);
AutoBrakes.SetInputSource(Autopilot);
Lights.SetInputSource(Autopilot);
}

void SetCruiseControl()
{
Autopilot.Enabled=false;
GPSTracker.Enabled=false;
TCS.SetInputSource(CruiseControl);
TCS.ForceFullOverride=true;
TCS.UseHillDescentControl=_UseHillDescentControl;
GSA.SetInputSource(CruiseControl);
SDO.SetInputSource(CruiseControl);
AutoBrakes.SetInputSource(CruiseControl);
Lights.SetInputSource(CruiseControl);
}

void SetUserControl()
{
TCS.SetInputSource(UserInput);
TCS.ForceFullOverride=false;
TCS.UseHillDescentControl=_UseHillDescentControl;
TCS.ForwardSpeedLimitKPH=_FrwrdSpeedLimitKPH;
TCS.BackwardSpeedLimitKPH=_BckwrdSpeedLimitKPH;
TCS.ReleaseControl();
GSA.SetInputSource(UserInput);
SDO.SetInputSource(UserInput);
AutoBrakes.SetInputSource(UserInput);
Lights.SetInputSource(UserInput);
}

void RelayTCSDataToGSA()
{
GSA.CoMToWheelsBaseAngle=TCS.CoMToWheelsBaseAngle;
GSA.VehicleTurnRadiusLeft=TCS.VehicleTurnRadiusLeft;
GSA.VehicleTurnRadiusRight=TCS.VehicleTurnRadiusRight;
}

}
//-------------------------------------------------------------------

DriverAssistingSystem DAS;

public Program()
{
DAS=new DriverAssistingSystem(this);
}

public void Save()
{
if(DAS.Run)
DAS.Save();
}

public void Main(string args,UpdateType updateSource)
{
if(updateSource.HasFlag(UpdateType.Terminal)||updateSource.HasFlag(UpdateType.Trigger))
{
StringComparison ic=StringComparison.OrdinalIgnoreCase;
if(args.Equals("START",ic))
DAS.Start();
else if(args.Equals("STOP",ic))
{
DAS.Stop();
DAS.Save();
}
else if(args.Equals("STARTSTOP",ic))
{
if(DAS.Run)
DAS.Stop();
else
DAS.Start();
DAS.Save();
}
else if(args.Equals("LOW_MODE",ic))
{
DAS.SuspensionValueChangeRate=60;
DAS.SuspensionHeightOffset=0;
}
else if(args.Equals("HIGH_MODE",ic))
{
DAS.SuspensionValueChangeRate=15;
DAS.SuspensionHeightOffset=-1.5;
}
else if(args.Equals("RESET_ODOMETER",ic))
{
DAS.Odometer=0;
DAS.Save();
}
else if(args.Equals("CYCLE_HANDBRAKES",ic))
DAS.ChangeHandbrakeMode();
else if(args.Equals("TOGGLE_JUMPJETS",ic))
DAS.UseJumpJets=!DAS.UseJumpJets;
else if(args.Equals("TOGGLE_GSA",ic))
DAS.UseGSA=!DAS.UseGSA;
else if(args.Equals("TOGGLE_HDC",ic))
DAS.UseHillDescentControl=!DAS.UseHillDescentControl;
else if(args.Equals("TOGGLE_AUTOPILOT",ic))
DAS.ToggleAutopilot();
else if(args.Equals("RESUME_AUTOPILOT",ic))
DAS.ToggleAutopilot(false);
else if(args.Equals("CYCLE_AUTOPILOT_ACC",ic))
DAS.AutopilotAccuracy=DAS.AutopilotAccuracy % 2.5+0.25;
else if(args.Equals("CYCLE_AUTOPILOT_WAIT",ic))
DAS.AutopilotWait=(DAS.AutopilotWait+5) % 65;
else if(args.Equals("CYCLE_AUTOPILOT_MODE",ic))
DAS.ChangeAutopilotDriveMode();
else if(args.Equals("INVERSE_AUTOPILOT",ic))
DAS.InverseAutopilot();
else if(args.Equals("TOGGLE_CRUISECONTROL",ic))
DAS.ToggleCruiseControl();
else if(args.Equals("TOGGLE_GPSTRACKER",ic))
DAS.ToggleGPSTracker();
else if(args.Equals("TOGGLE_GPSLIST",ic))
DAS.ToggleGPSList();
}
else
{
DAS.Update(updateSource);
}
}
</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2SideLeft</SubtypeName>
              <EntityId>122755255597796479</EntityId>
              <Min x="3" y="7" z="5" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>80026679774527337</EntityId>
              <Min x="0" y="5" z="7" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Popout Anti Clang 2 - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>22</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>91256678586189042</EntityId>
              <Min x="-1" y="5" z="0" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Popouts - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>119211023997703340</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Reverse</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>91256678586189042</BlockEntityId>
                      <GroupName>Popout Light Hinges</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Start</Action>
                      <BlockEntityId>119371656091985189</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>124904416514470595</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>90289710685082885</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>119371656091985189</EntityId>
              <Min x="1" y="5" z="0" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>119371656091985189</BlockEntityId>
                      <GroupName>Anti Clang - Merge Blocks</GroupName>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>1000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>true</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_HydrogenEngine">
              <SubtypeName>SmallHydrogenEngine</SubtypeName>
              <EntityId>127862669666440648</EntityId>
              <Min x="-1" y="5" z="2" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>3.0 L V6</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Capacity>5000</Capacity>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
              <SubtypeName>RoverCockpit</SubtypeName>
              <EntityId>124860209506544151</EntityId>
              <Min x="1" y="5" z="4" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyHierarchyComponentBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_HierarchyComponentBase">
                      <Children />
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_EnergyHydrogen</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190335</PackedValue>
                            <X>255</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>255</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_ArtificialHorizon</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190335</PackedValue>
                            <X>255</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>255</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_Gravity</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190335</PackedValue>
                            <X>255</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>255</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_Velocity</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190335</PackedValue>
                            <X>255</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>255</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_ClockAnalog</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190335</PackedValue>
                            <X>255</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>255</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Seat Entry/Exit Activated Timers - Seat Config]
Timer to trigger on entry=Seat - Timer Block
Timer to trigger on exit=Seat 2 - Timer Block
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Rover Cockpit</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>3</NumberInGrid>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>142589055273735771</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>91256678586189042</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>130544504407675692</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>10</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Reverse</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>124860209506544151</BlockEntityId>
                      <GroupName>Popout Headlight - Hinges</GroupName>
                    </Data>
                  </Slot>
                </SlotsGamepad>
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <IsMainCockpit>true</IsMainCockpit>
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </BuildToolbar>
              <OnLockedToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </OnLockedToolbar>
              <IsTargetLockingEnabled>false</IsTargetLockingEnabled>
              <PilotRelativeWorld>
                <Position x="-1.5082277059555054" y="-1.1022884845733643" z="-0.55567467212677" />
                <Forward x="0.746147752" y="-0.148324922" z="0.649047732" />
                <Up x="0.1558953" y="0.9866894" z="0.04626727" />
                <Orientation>
                  <X>0.061415</X>
                  <Y>0.9059537</Y>
                  <Z>0.05369817</Z>
                  <W>-0.415442616</W>
                </Orientation>
              </PilotRelativeWorld>
              <PilotGunDefinition xsi:nil="true" />
              <IsInFirstPersonView>true</IsInFirstPersonView>
              <OxygenLevel>0</OxygenLevel>
              <PilotJetpackEnabled>true</PilotJetpackEnabled>
              <TargetData>
                <TargetId>0</TargetId>
                <IsTargetLocked>false</IsTargetLocked>
                <LockingProgress>0</LockingProgress>
              </TargetData>
              <SitAnimation>712461</SitAnimation>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2SideRight</SubtypeName>
              <EntityId>93937136362349850</EntityId>
              <Min x="-3" y="7" z="5" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2SideLeft</SubtypeName>
              <EntityId>117323204578808666</EntityId>
              <Min x="3" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="3" y="5" z="13" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-3" y="5" z="13" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerInv</SubtypeName>
              <Min x="3" y="6" z="12" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="5" z="9" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2SideRight</SubtypeName>
              <EntityId>91249407907715157</EntityId>
              <Min x="-3" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>100485444245451286</EntityId>
              <Min x="1" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="1" y="6" z="8" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallTextPanel</SubtypeName>
              <EntityId>75057177166610015</EntityId>
              <Min x="1" y="6" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyLcdSurfaceComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_LcdSurfaceComponent">
                      <SelectedRotationIndex>0</SelectedRotationIndex>
                      <TextPanelContent>
                        <ChangeInterval>0</ChangeInterval>
                        <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                        <FontSize>1</FontSize>
                        <ShowText>NONE</ShowText>
                        <FontColor>
                          <PackedValue>4294967295</PackedValue>
                          <X>255</X>
                          <Y>255</Y>
                          <Z>255</Z>
                          <R>255</R>
                          <G>255</G>
                          <B>255</B>
                          <A>255</A>
                        </FontColor>
                        <BackgroundColor>
                          <PackedValue>4278190080</PackedValue>
                          <X>0</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>0</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </BackgroundColor>
                        <CurrentShownTexture>0</CurrentShownTexture>
                        <ContentType>SCRIPT</ContentType>
                        <SelectedScript />
                        <TextPadding>2</TextPadding>
                        <CustomizeScripts>true</CustomizeScripts>
                        <ScriptBackgroundColor>
                          <PackedValue>4278255873</PackedValue>
                          <X>1</X>
                          <Y>1</Y>
                          <Z>1</Z>
                          <R>1</R>
                          <G>1</G>
                          <B>1</B>
                          <A>255</A>
                        </ScriptBackgroundColor>
                        <ScriptForegroundColor>
                          <PackedValue>4294962611</PackedValue>
                          <X>179</X>
                          <Y>237</Y>
                          <Z>255</Z>
                          <R>179</R>
                          <G>237</G>
                          <B>255</B>
                          <A>255</A>
                        </ScriptForegroundColor>
                        <Sprites>
                          <Length>0</Length>
                        </Sprites>
                      </TextPanelContent>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value />
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Dashboard</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>4</NumberInGrid>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor xsi:nil="true" />
              <BackgroundColor xsi:nil="true" />
              <CurrentShownTexture>0</CurrentShownTexture>
              <TextPadding>2</TextPadding>
              <Version>0</Version>
              <ScriptBackgroundColor xsi:nil="true" />
              <ScriptForegroundColor xsi:nil="true" />
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex xsi:nil="true" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallTextPanel</SubtypeName>
              <EntityId>120122908108621829</EntityId>
              <Min x="0" y="6" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyLcdSurfaceComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_LcdSurfaceComponent">
                      <SelectedRotationIndex>0</SelectedRotationIndex>
                      <TextPanelContent>
                        <ChangeInterval>0</ChangeInterval>
                        <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                        <FontSize>6.027</FontSize>
                        <Text>-0.24 g</Text>
                        <ShowText>NONE</ShowText>
                        <FontColor>
                          <PackedValue>4278190335</PackedValue>
                          <X>255</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>255</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </FontColor>
                        <BackgroundColor>
                          <PackedValue>4278190080</PackedValue>
                          <X>0</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>0</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </BackgroundColor>
                        <CurrentShownTexture>0</CurrentShownTexture>
                        <Alignment>1</Alignment>
                        <ContentType>TEXT_AND_IMAGE</ContentType>
                        <SelectedScript>TSS_Velocity</SelectedScript>
                        <TextPadding>3.598</TextPadding>
                        <CustomizeScripts>true</CustomizeScripts>
                        <ScriptBackgroundColor>
                          <PackedValue>4278190080</PackedValue>
                          <X>0</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>0</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </ScriptBackgroundColor>
                        <ScriptForegroundColor>
                          <PackedValue>4278190335</PackedValue>
                          <X>255</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>255</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </ScriptForegroundColor>
                        <Sprites>
                          <Length>0</Length>
                        </Sprites>
                      </TextPanelContent>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value />
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>G Force - Text Panel</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor xsi:nil="true" />
              <BackgroundColor xsi:nil="true" />
              <CurrentShownTexture>0</CurrentShownTexture>
              <TextPadding>2</TextPadding>
              <Version>0</Version>
              <ScriptBackgroundColor xsi:nil="true" />
              <ScriptForegroundColor xsi:nil="true" />
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex xsi:nil="true" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>113555893121430706</EntityId>
              <Min x="0" y="5" z="8" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Drift Signal Extender 2 - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>17</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>128848421206213934</EntityId>
              <Min x="0" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>88562785613953057</EntityId>
              <Min x="0" y="6" z="0" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Drift - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>5</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Run</Action>
                      <Parameters>
                        <MyObjectBuilder_ToolbarItemActionParameter>
                          <TypeCode>String</TypeCode>
                          <Value>FRICTION</Value>
                        </MyObjectBuilder_ToolbarItemActionParameter>
                      </Parameters>
                      <BlockEntityId>88174211089786061</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels 2</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels 5</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels 6</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>88562785613953057</BlockEntityId>
                      <GroupName>Front Wheels 7</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>10</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_1</SubtypeName>
              <EntityId>109961961981931370</EntityId>
              <Min x="0" y="5" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyLcdSurfaceComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_LcdSurfaceComponent">
                      <SelectedRotationIndex>0</SelectedRotationIndex>
                      <TextPanelContent>
                        <ChangeInterval>0</ChangeInterval>
                        <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                        <FontSize>9</FontSize>
                        <Text>RMN-270</Text>
                        <ShowText>NONE</ShowText>
                        <FontColor>
                          <PackedValue>4294967295</PackedValue>
                          <X>255</X>
                          <Y>255</Y>
                          <Z>255</Z>
                          <R>255</R>
                          <G>255</G>
                          <B>255</B>
                          <A>255</A>
                        </FontColor>
                        <BackgroundColor>
                          <PackedValue>4278190080</PackedValue>
                          <X>0</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>0</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </BackgroundColor>
                        <CurrentShownTexture>0</CurrentShownTexture>
                        <Alignment>2</Alignment>
                        <ContentType>TEXT_AND_IMAGE</ContentType>
                        <SelectedScript />
                        <TextPadding>10</TextPadding>
                        <ScriptBackgroundColor>
                          <PackedValue>4288108544</PackedValue>
                          <X>0</X>
                          <Y>88</Y>
                          <Z>151</Z>
                          <R>0</R>
                          <G>88</G>
                          <B>151</B>
                          <A>255</A>
                        </ScriptBackgroundColor>
                        <ScriptForegroundColor>
                          <PackedValue>4294962611</PackedValue>
                          <X>179</X>
                          <Y>237</Y>
                          <Z>255</Z>
                          <R>179</R>
                          <G>237</G>
                          <B>255</B>
                          <A>255</A>
                        </ScriptForegroundColor>
                        <Sprites>
                          <Length>0</Length>
                        </Sprites>
                      </TextPanelContent>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>License Plate LCD</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor xsi:nil="true" />
              <BackgroundColor xsi:nil="true" />
              <CurrentShownTexture>0</CurrentShownTexture>
              <TextPadding>2</TextPadding>
              <Version>0</Version>
              <ScriptBackgroundColor xsi:nil="true" />
              <ScriptForegroundColor xsi:nil="true" />
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex xsi:nil="true" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>101001028099757645</EntityId>
              <Min x="-1" y="7" z="-2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="0" y="5" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="2" y="5" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="6" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="3" y="6" z="-2" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>139964609391098347</EntityId>
              <Min x="0" y="7" z="-2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-3" y="6" z="-2" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-2" y="5" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="1" y="5" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="6" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>119211023997703340</EntityId>
              <Min x="-1" y="5" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Popout Anti Clang 1 - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>21</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>80026679774527337</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
              <Min x="-3" y="5" z="-1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorInvCorner2Tip</SubtypeName>
              <Min x="3" y="5" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="3" y="5" z="-2" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="-3" y="5" z="-2" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="-2" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="-2" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="6" z="-2" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="-2" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="-2" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="6" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>114053732557926360</EntityId>
              <Min x="0" y="6" z="1" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>CCDS V3 - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>73735089700766590</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Braking</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Rear Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>133531310712744753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>102693746688457437</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 2</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>10</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>11</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 2</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>12</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>13</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>14</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 5</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>15</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 6</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>16</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 7</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>17</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseFriction</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels 8</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>18</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>19</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>20</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 2</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>21</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>22</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>23</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 5</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>24</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 6</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>25</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 7</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>26</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 8</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>27</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>28</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>29</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 2</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>30</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>31</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>32</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 5</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>33</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 6</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>34</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 7</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>35</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 8</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>36</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>37</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>38</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 2</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>39</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>40</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>41</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 5</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>42</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 6</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>43</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 7</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>44</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseSpeed Limit</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Wheels 8</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>45</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Front Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>46</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>134682286113818262</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>47</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>122758898328591614</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>48</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>138029837795220689</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>49</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>114053732557926360</BlockEntityId>
                      <GroupName>Stop lights</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>50</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>104651774836194591</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>51</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>104651774836194591</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>52</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>118404872395531286</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>53</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>113306331771191821</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="6" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>75841731065719877</EntityId>
              <Min x="0" y="8" z="6" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>138984051150018075</EntityId>
              <Min x="-1" y="4" z="9" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>125272109654490472</EntityId>
              <Min x="0" y="8" z="5" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>72551666220366519</EntityId>
              <Min x="0" y="8" z="4" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>143662711389257002</EntityId>
              <Min x="0" y="8" z="3" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>104583805574748822</EntityId>
              <Min x="1" y="8" z="6" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>102358288816919637</EntityId>
              <Min x="1" y="8" z="5" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>133394417889847791</EntityId>
              <Min x="1" y="8" z="4" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>123670812060002772</EntityId>
              <Min x="1" y="8" z="3" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>125812183724888894</EntityId>
              <Min x="2" y="8" z="6" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>90561286073394439</EntityId>
              <Min x="2" y="8" z="5" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>81294644115184401</EntityId>
              <Min x="2" y="8" z="4" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLight</SubtypeName>
              <EntityId>96174981103169728</EntityId>
              <Min x="-2" y="8" z="3" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>122920244917680925</EntityId>
              <Min x="-1" y="8" z="6" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>96637291889765995</EntityId>
              <Min x="-1" y="8" z="5" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>141977451180025704</EntityId>
              <Min x="-1" y="8" z="4" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>110054556917213299</EntityId>
              <Min x="-1" y="8" z="3" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>86838016498783824</EntityId>
              <Min x="-2" y="8" z="6" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>113505526815763175</EntityId>
              <Min x="-2" y="8" z="5" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>88944972649716184</EntityId>
              <Min x="-2" y="8" z="4" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLightInv</SubtypeName>
              <EntityId>138593155725105346</EntityId>
              <Min x="2" y="8" z="3" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>98817414678957224</EntityId>
              <Min x="0" y="8" z="2" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>126129935523730738</EntityId>
              <Min x="1" y="8" z="2" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLight</SubtypeName>
              <EntityId>98599418998654997</EntityId>
              <Min x="-2" y="8" z="2" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>117248858203075483</EntityId>
              <Min x="-1" y="8" z="2" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLightInv</SubtypeName>
              <EntityId>109018441359653053</EntityId>
              <Min x="2" y="8" z="2" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>86457410969432441</EntityId>
              <Min x="-1" y="4" z="10" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>127715865655318743</EntityId>
              <Min x="0" y="7" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>121105215253920878</EntityId>
              <Min x="1" y="7" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>108334764893989300</EntityId>
              <Min x="-1" y="7" z="0" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Face</SubtypeName>
              <EntityId>127147808988246277</EntityId>
              <Min x="2" y="7" z="0" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Face</SubtypeName>
              <EntityId>116650470453795711</EntityId>
              <Min x="-2" y="7" z="0" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Inv</SubtypeName>
              <EntityId>88467424800790706</EntityId>
              <Min x="2" y="7" z="2" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Inv</SubtypeName>
              <EntityId>126709728518693826</EntityId>
              <Min x="-2" y="7" z="2" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>79535394985593752</EntityId>
              <Min x="2" y="6" z="0" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>119504787933181304</EntityId>
              <Min x="2" y="6" z="1" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>80514414932349770</EntityId>
              <Min x="-2" y="6" z="0" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>116845954836036727</EntityId>
              <Min x="-2" y="6" z="1" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-3" y="6" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="3" y="6" z="0" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>142822425208639769</EntityId>
              <Min x="-2" y="6" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Offset Light 9 turn right</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>9</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>4.25</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.0196078438</ColorRed>
              <ColorGreen>0.0117647061</ColorGreen>
              <ColorBlue>0.003921569</ColorBlue>
              <Falloff>1.3</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>0</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>90504738184674238</EntityId>
              <Min x="-1" y="6" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>8</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>3</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.545098066</ColorRed>
              <ColorGreen>0</ColorGreen>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>109975152323373499</EntityId>
              <Min x="2" y="6" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Offset Light 7 turn left</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>7</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>4.25</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.0196078438</ColorRed>
              <ColorGreen>0.0117647061</ColorGreen>
              <ColorBlue>0.003921569</ColorBlue>
              <Falloff>1.3</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>0</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>139395120112760493</EntityId>
              <Min x="1" y="6" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>6</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>3</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.545098066</ColorRed>
              <ColorGreen>0</ColorGreen>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>75004330961756565</EntityId>
              <Min x="0" y="6" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>5</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>3</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.545098066</ColorRed>
              <ColorGreen>0</ColorGreen>
              <ColorBlue>0</ColorBlue>
              <Falloff>0</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="3" y="7" z="-2" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>82379876649088599</EntityId>
              <Min x="-2" y="7" z="-2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-3" y="7" z="-2" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="-3" y="7" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="3" y="7" z="-1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>109247218109923131</EntityId>
              <Min x="-1" y="6" z="11" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Rear Wheel On/Off 2 - Timer Block </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>19</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>Steering</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>109247218109923131</BlockEntityId>
                      <GroupName>Rear Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>132071972474887425</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>1000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>72746621791893962</EntityId>
              <Min x="1" y="7" z="12" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>83205478877536715</EntityId>
              <Min x="1" y="7" z="9" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>107191824986699935</EntityId>
              <Min x="0" y="7" z="10" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>114229465052008530</EntityId>
              <Min x="0" y="7" z="9" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>87614537114334172</EntityId>
              <Min x="2" y="7" z="9" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>143254066156850228</EntityId>
              <Min x="2" y="7" z="12" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>143809482176979224</EntityId>
              <Min x="2" y="7" z="11" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>102212958208426620</EntityId>
              <Min x="3" y="7" z="11" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>93755071914272012</EntityId>
              <Min x="-1" y="7" z="12" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>85304413918806848</EntityId>
              <Min x="1" y="7" z="11" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>72334218079589028</EntityId>
              <Min x="1" y="6" z="11" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Rear Wheel On/Off 1 - Timer Block </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>18</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_Off</Action>
                      <BlockEntityId>132071972474887425</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels 2</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels 5</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels 6</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>DecreaseMaxSteerAngle</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>72334218079589028</BlockEntityId>
                      <GroupName>Rear Wheels 7</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>9</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Start</Action>
                      <BlockEntityId>109247218109923131</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>108167021380152788</EntityId>
              <Min x="-3" y="6" z="9" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>126203935128347701</EntityId>
              <Min x="-1" y="4" z="13" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Base</SubtypeName>
              <Min x="-3" y="6" z="13" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>136021238108778336</EntityId>
              <Min x="3" y="7" z="9" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="5" z="14" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>76109855719105171</EntityId>
              <Min x="-3" y="7" z="12" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>117716306714956371</EntityId>
              <Min x="-3" y="7" z="11" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>111423966547567844</EntityId>
              <Min x="-3" y="7" z="10" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>128850315863217539</EntityId>
              <Min x="-2" y="7" z="10" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>103809557979055306</EntityId>
              <Min x="1" y="7" z="10" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>123086314107971542</EntityId>
              <Min x="-2" y="7" z="11" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>108378539908570700</EntityId>
              <Min x="2" y="7" z="10" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="6" z="14" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="3" y="6" z="11" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>125841490247100567</EntityId>
              <Min x="-1" y="7" z="9" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLight</SubtypeName>
              <EntityId>109334974954237512</EntityId>
              <Min x="-3" y="4" z="14" />
              <IntegrityPercent>0.975431442</IntegrityPercent>
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>111127349654960371</EntityId>
              <Min x="0" y="4" z="9" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="-2" y="5" z="14" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>135553557581336479</EntityId>
              <Min x="-2" y="7" z="9" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>118294935976601922</EntityId>
              <Min x="0" y="5" z="11" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ReflectorLight">
              <SubtypeName>SmallBlockFrontLight</SubtypeName>
              <EntityId>90289710685082885</EntityId>
              <Min x="0" y="6" z="12" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Spotlight</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>10</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>1.5</Falloff>
              <Intensity>5</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>5</Offset>
              <RotationSpeed>0.08</RotationSpeed>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCorner2Tip</SubtypeName>
              <Min x="3" y="6" z="14" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>114031029160022119</EntityId>
              <Min x="-3" y="7" z="9" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="5" z="14" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-1" y="5" z="13" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>143032199124381465</EntityId>
              <Min x="2" y="4" z="14" />
              <IntegrityPercent>0.98561877</IntegrityPercent>
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="2" y="5" z="13" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>94769544786998941</EntityId>
              <Min x="0" y="4" z="14" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>105676071169747852</EntityId>
              <Min x="-2" y="4" z="14" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>115861416471314708</EntityId>
              <Min x="2" y="4" z="13" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>124381517630001273</EntityId>
              <Min x="-3" y="4" z="13" />
              <IntegrityPercent>0.987270534</IntegrityPercent>
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>97821039793853165</EntityId>
              <Min x="3" y="4" z="13" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>74849020813427008</EntityId>
              <Min x="1" y="6" z="12" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>104093195778429176</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0.08333337</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>0.4014256</MaxAngle>
              <CurrentAngle>0.4014256</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>538936640</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>98658880239897691</EntityId>
              <Min x="-2" y="4" z="13" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>142092048055286065</EntityId>
              <Min x="0" y="4" z="11" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>123823978395155173</EntityId>
              <Min x="1" y="4" z="12" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>136784730159205318</EntityId>
              <Min x="0" y="5" z="-1" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.35" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <ScriptBackgroundColor>
                            <PackedValue>4288108544</PackedValue>
                            <X>0</X>
                            <Y>88</Y>
                            <Z>151</Z>
                            <R>0</R>
                            <G>88</G>
                            <B>151</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <ScriptBackgroundColor>
                            <PackedValue>4288108544</PackedValue>
                            <X>0</X>
                            <Y>88</Y>
                            <Z>151</Z>
                            <R>0</R>
                            <G>88</G>
                            <B>151</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>Controller block name: Cockpit
Surface provider name: Dashboard
Surface number: 0
Gather mode: 1
Battery name: Battery
Headlight name: Spotlight
Speed limit: 360
Cargo mass limit: 40000
Battery Charge: 40:81:80
Battery Output: 100:81:80
Spidometer: 256:256:350
Turn left led: 100:56:70
Turn right led: 400:56:70
Headlight led: 75:400:65
Handbrake led: 425:400:70

</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>PB VDS</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
              <Program>class Vehicle
{
#region "private fields"
Program _program;
IMyShipController _controller;
IMyLightingBlock _headlight;
IMyMotorSuspension _steeringWheel;
IMyTextSurfaceProvider _textSurfaceProvider;
IMyTextSurface _surface;
IMyBatteryBlock _battery;
List&lt;IMyLightingBlock&gt;
_lightsTurnLeft = new List&lt;IMyLightingBlock&gt;(),
_lightsTurnRight = new List&lt;IMyLightingBlock&gt;();
List&lt;IMyTerminalBlock&gt; _containers = new List&lt;IMyTerminalBlock&gt;();
string
_controllerName,
_headlightName,
_textSurfaceProviderName,
_surfaceDimensions,
_batteryName;
int
_surfaceNumber = 0,
_mode = 1;
float
arrowAngleLeftSide = -(float)Math.PI / 3.0f,
arrowAngleRightSide = (float)(Math.PI + Math.PI / 3.0f),
_halfPi = (float)(Math.PI * 0.5d),
_speedLimit = 60.0f,
_gFactor = 1,
_cargoMassLimit = 0.0f,
_totalVolume = 0.0f;
bool
_pressedQ = false,
_pressedE = false,
_pressedA = false,
_pressedD = false,
_rightSignal = false,
_leftSignal = false,
_hazardWarning = false,
_showBatteryCharge = false,
_showBatteryOutput = false,
_showCargoVolume = false,
_showRightArrow = false,
_showLeftArrow = false,
_showHandbrake = false,
_showHeadLight = false,
_showSpidometer = false,
_showCargoMass = false;
enum State { Idle, Ignition, Running, Stop };
State _state = State.Stop;
Vector3
_surfaceOff = new Vector3(),
_batteryChargeXYS = new Vector3(),
_batteryOutputXYS = new Vector3(),
_cargoVolumeXYS = new Vector3(),
_rightArrow = new Vector3(),
_leftArrow = new Vector3(),
_handbrake = new Vector3(),
_cargoMassXYS = new Vector3(),
_headLightXYS = new Vector3(),
_spidometerXYS = new Vector3();
MySprite[]
_rightArrowSprites = new MySprite[4],
_batteryChargeSprites = new MySprite[11],
_batteryOutputSprites = new MySprite[11],
_cargoVolumeSprites = new MySprite[11],
_leftArrowSprites = new MySprite[4],
_cargoMassSprites = new MySprite[11],
_headLightSprites = new MySprite[12],
_spidometerSprites = new MySprite[20];
StringBuilder log = new StringBuilder();
Color
RScolor = new Color(15, 45, 5, 255),
LScolor = new Color(15, 45, 5, 255),
blue = new Color(25, 195, 245, 255),
green = new Color(125, 245, 55, 255),
grey = new Color(35, 35, 35, 255),
pit = new Color(15, 10, 10, 255),
orange = new Color(225, 165, 55),
red = new Color(245, 65, 25, 255),
white = new Color(255, 255, 255, 255),
darkBlue = new Color(5, 15, 25, 255),
darkGreen = new Color(15, 45, 5, 255),
darkOrange = new Color(5, 3, 1),
darkRed = new Color(55, 10, 5, 255);
#endregion
#region "Other"
public Vehicle(Program newProgram)
{
_program = newProgram;
_program.Me.CustomName = "PB VDS";
try { ReadData(); }
catch
{
WriteDefaultData();
_program.Echo("Data read error!");
}
InitializeSystems();
if (_battery == null)
{
_showBatteryCharge = false;
_showBatteryOutput = false;
log.AppendLine("Battery is not found!");
}
if (_headlight == null)
{
_showHeadLight = false;
log.AppendLine("Spotlight is not found!");
}
if (_steeringWheel == null)
log.AppendLine("Lead wheel is not found!");
_program.Echo(log.ToString());
CollectDashboardElements();
_controller.HandBrake = true;
}
private T GetFirstWithName&lt;T&gt;(string name) where T : class, IMyTerminalBlock
{
List&lt;IMyTerminalBlock&gt; units = new List&lt;IMyTerminalBlock&gt;();
_program.GridTerminalSystem.SearchBlocksOfName(name, units);
foreach (IMyTerminalBlock unit in units)
{
T block = unit as T;
if (block != null &amp;&amp; unit.CubeGrid == _program.Me.CubeGrid)
return block;
}
return null;
}
private void GatherTruckContainersFrom&lt;T&gt;(ref List&lt;IMyTerminalBlock&gt; refList) where T : class, IMyTerminalBlock
{
List&lt;T&gt; units = new List&lt;T&gt;();
_program.GridTerminalSystem.GetBlocksOfType(units);
foreach (T unit in units)
if (unit.IsSameConstructAs(_program.Me) &amp;&amp; unit.HasInventory)
refList.Add(unit);
units.Clear();
}
private void FillListWithFromSameGrid&lt;T&gt;(ref List&lt;T&gt; refList) where T : class, IMyTerminalBlock
{
List&lt;T&gt; units = new List&lt;T&gt;();
_program.GridTerminalSystem.GetBlocksOfType(units);
foreach (T unit in units)
if (unit.CubeGrid == _program.Me.CubeGrid)
refList.Add(unit);
units.Clear();
}
private void FillListWith&lt;T&gt;(ref List&lt;T&gt; refList, string name) where T : class, IMyTerminalBlock
{
List&lt;T&gt; units = new List&lt;T&gt;();
_program.GridTerminalSystem.GetBlocksOfType(units);
foreach (T unit in units)
if (unit.IsSameConstructAs(_program.Me) &amp;&amp; unit.CustomName.ToLower().Contains(name))
refList.Add(unit);
units.Clear();
}
private Vector3D VectorFromWords(string[] words)
{
Vector3D returnValue = new Vector3();
try
{ returnValue = new Vector3(float.Parse(words[1]), float.Parse(words[2]), float.Parse(words[3])); }
catch { return new Vector3(); }
return returnValue;
}
private void ReadData()
{
string data = _program.Me.CustomData;
string[] lines = data.Split('\n');
string[] words;
words = lines[0].Split(':'); _controllerName = words[1].Trim();
words = lines[1].Split(':'); _textSurfaceProviderName = words[1].Trim();
words = lines[2].Split(':'); _surfaceNumber = int.Parse(words[1].Trim());
words = lines[3].Split(':'); _mode = int.Parse(words[1].Trim());
words = lines[4].Split(':'); _batteryName = words[1].Trim();
words = lines[5].Split(':'); _headlightName = words[1].Trim();
words = lines[6].Split(':'); _speedLimit = float.Parse(words[1].Trim());
words = lines[7].Split(':'); _cargoMassLimit = float.Parse(words[1].Trim());
words = lines[8].Split(':');
_batteryChargeXYS = VectorFromWords(words);
_showBatteryCharge = _batteryChargeXYS.Length() &gt; 1;
words = lines[9].Split(':');
_batteryOutputXYS = VectorFromWords(words);
_showBatteryOutput = _batteryOutputXYS.Length() &gt; 1;
words = lines[10].Split(':');
_spidometerXYS = VectorFromWords(words);
_showSpidometer = _spidometerXYS.Length() &gt; 1;
words = lines[11].Split(':');
_leftArrow = VectorFromWords(words);
_showLeftArrow = _leftArrow.Length() &gt; 1;
words = lines[12].Split(':');
_rightArrow = VectorFromWords(words);
_showRightArrow = _rightArrow.Length() &gt; 1;
words = lines[13].Split(':');
_headLightXYS = VectorFromWords(words);
_showHeadLight = _headLightXYS.Length() &gt; 1;
words = lines[14].Split(':');
_handbrake = VectorFromWords(words);
_showHandbrake = _handbrake.Length() &gt; 1;
words = lines[15].Split(':');
_cargoVolumeXYS = VectorFromWords(words);
_showCargoVolume = _cargoVolumeXYS.Length() &gt; 1;
words = lines[16].Split(':');
_cargoMassXYS = VectorFromWords(words);
_showCargoMass = _cargoMassXYS.Length() &gt; 1;
}
private void WriteDefaultData()
{
StringBuilder sb = new StringBuilder();
sb.AppendLine("Controller block name: Cockpit");
sb.AppendLine("Surface provider name: Dashboard");
sb.AppendLine("Surface number: 0");
sb.AppendLine("Gather mode: 1");
sb.AppendLine("Battery name: Battery");
sb.AppendLine("Headlight name: Spotlight");
sb.AppendLine("Speed limit: 120");
sb.AppendLine("Cargo mass limit: 40000");
sb.AppendLine("Battery Charge: 40:81:80");
sb.AppendLine("Battery Output: 100:81:80");
sb.AppendLine("Spidometer: 256:81:120");
sb.AppendLine("Turn left led: 166:56:40");
sb.AppendLine("Turn right led: 346:56:40");
sb.AppendLine("Headlight led: 166:106:35");
sb.AppendLine("Handbrake led: 346:106:40");
sb.AppendLine("Load meter: 410:81:80");
sb.AppendLine("Mass meter: 470:81:80");
_program.Me.CustomData = sb.ToString();
}
private void GatherContainers()
{
_containers = new List&lt;IMyTerminalBlock&gt;();
GatherTruckContainersFrom&lt;IMyCargoContainer&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyShipConnector&gt;(ref _containers);
if (_mode &gt; 0)
{
GatherTruckContainersFrom&lt;IMyShipDrill&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyShipGrinder&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyShipWelder&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyShipController&gt;(ref _containers);
}
if (_mode &gt; 1)
{
GatherTruckContainersFrom&lt;IMyAssembler&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyRefinery&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyGasGenerator&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyReactor&gt;(ref _containers);
}
if (_mode &gt; 2)
{
GatherTruckContainersFrom&lt;IMyLargeGatlingTurret&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyLargeInteriorTurret&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMyLargeMissileTurret&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMySmallMissileLauncher&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMySmallMissileLauncherReload&gt;(ref _containers);
GatherTruckContainersFrom&lt;IMySmallGatlingGun&gt;(ref _containers);
}
_totalVolume = 0.0f;
foreach (IMyTerminalBlock container in _containers)
_totalVolume += container.GetInventory().MaxVolume.ToIntSafe();
}
private void InitializeSystems()
{
_controller = GetFirstWithName&lt;IMyShipController&gt;(_controllerName);
if (_controller == null) log.AppendLine("Controller is not found!");
_battery = GetFirstWithName&lt;IMyBatteryBlock&gt;(_batteryName);
_headlight = GetFirstWithName&lt;IMyLightingBlock&gt;(_headlightName);
List&lt;IMyMotorSuspension&gt; truckWheels = new List&lt;IMyMotorSuspension&gt;();
FillListWithFromSameGrid(ref truckWheels);
foreach (IMyMotorSuspension suspension in truckWheels)
if (suspension.Steering)
{
_steeringWheel = suspension;
break;
}
GatherLigths();
GatherContainers();
_textSurfaceProvider = GetFirstWithName&lt;IMyTerminalBlock&gt;(_textSurfaceProviderName) as IMyTextSurfaceProvider;
if (_textSurfaceProvider == null) log.AppendLine("Surface provider is not found!");
else if (_textSurfaceProvider.SurfaceCount &gt; 0)
{
_surfaceNumber %= _textSurfaceProvider.SurfaceCount;
_surface = _textSurfaceProvider.GetSurface(_surfaceNumber);
_surface.ContentType = ContentType.SCRIPT;
_surface.Script = "";
_surface.ScriptBackgroundColor = new Color(1, 1, 1, 255);
_surfaceOff.X = (_surface.TextureSize.X - _surface.SurfaceSize.X) * 0.5f;
_surfaceOff.Y = (_surface.TextureSize.Y - _surface.SurfaceSize.Y) * 0.5f;
_surfaceDimensions = "Surface dimensions [" + (int)_surface.SurfaceSize.X + ":" + (int)_surface.SurfaceSize.Y + "]";
_batteryChargeXYS += _surfaceOff;
_batteryOutputXYS += _surfaceOff;
_spidometerXYS += _surfaceOff;
_leftArrow += _surfaceOff;
_rightArrow += _surfaceOff;
_headLightXYS += _surfaceOff;
_handbrake += _surfaceOff;
_cargoVolumeXYS += _surfaceOff;
_cargoMassXYS += _surfaceOff;
}
}
private void GatherLigths()
{
_lightsTurnLeft = new List&lt;IMyLightingBlock&gt;();
_lightsTurnRight = new List&lt;IMyLightingBlock&gt;();
List&lt;IMyLightingBlock&gt; turnLights = new List&lt;IMyLightingBlock&gt;();
FillListWith(ref turnLights, "turn");
string name = "";
foreach (IMyLightingBlock light in turnLights)
{
light.BlinkIntervalSeconds = 0.0f;
light.BlinkLength = 0.0f;
light.Color = darkOrange;
light.Radius = 4.25f;
light.Intensity = 10.0f;
light.Enabled = false;
name = light.CustomName.ToLower();
if (name.Contains("right"))
_lightsTurnRight.Add(light);
else
_lightsTurnLeft.Add(light);
}
}
#endregion
#region "Make Sprites"
private void CollectDashboardElements()
{
_batteryChargeSprites = MeterSprites(_batteryChargeXYS, "CHARGE", false, false);//BatteryChargeSprites();
_batteryOutputSprites = MeterSprites(_batteryOutputXYS, "OUTPUT", true, true);
_cargoVolumeSprites = MeterSprites(_cargoVolumeXYS, "LOAD", false, true);
_cargoMassSprites = MeterSprites(_cargoMassXYS, "MASS", true, true);
_leftArrowSprites = TurnLed(_leftArrow, false);
_rightArrowSprites = TurnLed(_rightArrow, true);
SpeedometrSprites();
HeadLightSprites();
}
private MySprite[] MeterSprites(Vector3 arguments, string label, bool mirrored, bool up)
{
MySprite[] mySprites = new MySprite[11];
Vector2 arrowPosition = new Vector2(arguments.X, arguments.Y);
float scale = arguments.Z;
float topAngle = 0;
float middleAngle = 0;
float bottomAngle = 0;
float alertAngle = 0;
float ledAngle = (float)(Math.PI / 2.0f);
Color topColor = red;
Color bottomColor = white;
//steps
float radius = scale * 0.4f;
float width = scale / 15.0f;
float height = scale / 30.0f;
if (mirrored)
{
arrowPosition.X = arrowPosition.X - scale / 6.0f;
alertAngle = (float)Math.PI / 6.0f * 4.5f;
topAngle = (float)Math.PI / 6.0f * 4.0f;
middleAngle = (float)Math.PI;
bottomAngle = (float)(-Math.PI / 6.0f * 4.0f);
}
else
{
arrowPosition.X = arrowPosition.X + scale / 6.0f;
alertAngle = (float)Math.PI / 6.0f * 1.5f;
topAngle = (float)Math.PI / 6.0f * 2.0f;
middleAngle = 0.0f;
bottomAngle = (float)-Math.PI / 6.0f * 2.0f;
}
if (!up)
{
topColor = white;
bottomColor = red;
alertAngle = -alertAngle;
ledAngle = -ledAngle;
}
Vector2 step1Position = new Vector2(arrowPosition.X - radius * (float)Math.Cos(topAngle), arrowPosition.Y - radius * (float)Math.Sin(topAngle));
Vector2 step2Position = new Vector2(arrowPosition.X - radius * (float)Math.Cos(middleAngle), arrowPosition.Y - radius * (float)Math.Sin(middleAngle));
Vector2 step3Position = new Vector2(arrowPosition.X - radius * (float)Math.Cos(bottomAngle), arrowPosition.Y - radius * (float)Math.Sin(bottomAngle));
Vector2 stepAlertPosition = new Vector2(arrowPosition.X - radius * (float)Math.Cos(alertAngle), arrowPosition.Y - radius * (float)Math.Sin(alertAngle));
Vector2 elementPosition = new Vector2(arguments.X, arguments.Y);
float textSize = scale / 120.0f * 0.75f;
Vector2 Size = new Vector2(scale * 2.0f / 3.0f, scale);
//label
Vector2 strSize = _surface.MeasureStringInPixels(new StringBuilder(label), "Debug", textSize);
mySprites[0] = MySprite.CreateText(label, "Debug", white, textSize, TextAlignment.LEFT);
mySprites[0].Position = new Vector2(elementPosition.X - strSize.X * 0.5f, elementPosition.Y - scale * 0.675f);
//frame
mySprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple", elementPosition, Size, grey);
mySprites[2] = new MySprite(SpriteType.TEXTURE, "SquareSimple", elementPosition, Size - 2, pit);
//steps
mySprites[3] = new MySprite(SpriteType.TEXTURE, "SquareSimple", step1Position, new Vector2(width, height), topColor, rotation: topAngle);
mySprites[4] = new MySprite(SpriteType.TEXTURE, "SquareSimple", step2Position, new Vector2(width, height), white, rotation: middleAngle);
mySprites[5] = new MySprite(SpriteType.TEXTURE, "SquareSimple", step3Position, new Vector2(width, height), bottomColor, rotation: bottomAngle);
mySprites[6] = new MySprite(SpriteType.TEXTURE, "SquareSimple", stepAlertPosition, new Vector2(width, scale / 10.0f), red, rotation: alertAngle);
float ledRadius = scale * 0.35f;
float ledDim = scale / 10.0f;
Vector2 ledPosition = new Vector2(arrowPosition.X - ledRadius * (float)Math.Cos(ledAngle), arrowPosition.Y - ledRadius * (float)Math.Sin(ledAngle));
mySprites[7] = new MySprite(SpriteType.TEXTURE, "Circle", ledPosition, new Vector2(ledDim, ledDim), white);
mySprites[8] = new MySprite(SpriteType.TEXTURE, "Circle", arrowPosition,
new Vector2(scale / 10.0f, scale / 10.0f), white);
mySprites[9] = new MySprite(SpriteType.TEXTURE, "SquareSimple", arrowPosition,
new Vector2(scale * 2.0f / 6.0f, scale / 30.0f), white);
mySprites[10] = new MySprite(SpriteType.TEXTURE, "SquareSimple", arrowPosition,
new Vector2(scale / 15.0f, scale / 30.0f), red);
return mySprites;
}
private void RotateArrowSprites(ref MySprite arrow, ref MySprite head, float size, Vector2 arrowPosition, float angle)
{
float cos = (float)Math.Cos(angle);
float sin = (float)Math.Sin(angle);
arrow.RotationOrScale = angle;
arrow.Position = new Vector2(
arrowPosition.X - size / 6.0f * cos,
arrowPosition.Y - size / 6.0f * sin);
head.RotationOrScale = angle;
head.Position = new Vector2(
arrowPosition.X - size / 3.0f * cos,
arrowPosition.Y - size / 3.0f * sin);
}
private void SpeedometrSprites()
{
#region Background
Vector2 position = new Vector2(_spidometerXYS.X, _spidometerXYS.Y);
float size = _spidometerXYS.Z;
_spidometerSprites[0] = new MySprite(SpriteType.TEXTURE, "Circle", position, new Vector2(size, size), grey);
_spidometerSprites[1] = new MySprite(SpriteType.TEXTURE, "Circle", position, new Vector2(size - 2, size - 2), pit);
#endregion Background
#region Speed steps and numbers
float stepradius = size * 0.425f;
float textradius = size * 0.3f;
float textSize = size / 120.0f * 0.5f;
float angle = (float)-Math.PI * 0.25f;
_spidometerSprites[2] = new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0, 0),
new Vector2(size / 15.0f, size / 30.0f), white, rotation: angle);
_spidometerSprites[2].Position = new Vector2(
position.X - stepradius * (float)Math.Cos(angle),
position.Y - stepradius * (float)Math.Sin(angle));
Vector2 strSize = _surface.MeasureStringInPixels(new StringBuilder("0"), "Debug", textSize);
strSize = strSize * 0.5f;
_spidometerSprites[3] = MySprite.CreateText("0", "Debug", white, textSize, TextAlignment.LEFT);
_spidometerSprites[3].Position = new Vector2(
position.X - strSize.X - textradius * (float)Math.Cos(angle),
position.Y - strSize.Y - textradius * (float)Math.Sin(angle));
for (int i = 0; i &lt;= 5; i++)
{
angle = (float)Math.PI * (0.25f * i);
_spidometerSprites[4 + i * 2] = new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0, 0),
new Vector2(size / 15.0f, size / 30.0f), white);
_spidometerSprites[4 + i * 2].RotationOrScale = angle;
_spidometerSprites[4 + i * 2].Position = new Vector2(
position.X - stepradius * (float)Math.Cos(angle),
position.Y - stepradius * (float)Math.Sin(angle));
double number = Math.Round(_speedLimit / 6.0d * (i + 1), 0);
strSize = _surface.MeasureStringInPixels(new StringBuilder(number.ToString()), "Debug", textSize);
strSize = strSize * 0.5f;
_spidometerSprites[5 + i * 2] = MySprite.CreateText(number.ToString(), "Debug", white, textSize, TextAlignment.LEFT);
_spidometerSprites[5 + i * 2].Position = new Vector2(
position.X - strSize.X - textradius * (float)Math.Cos(angle),
position.Y - strSize.Y - textradius * (float)Math.Sin(angle));
}//12
//15
_spidometerSprites[16] = new MySprite(SpriteType.TEXTURE, "Circle", position,
new Vector2(size / 10.0f, size / 10.0f), white);
_spidometerSprites[17] = new MySprite(SpriteType.TEXTURE, "SquareSimple", position,
new Vector2(size * 2.0f / 6.0f, size / 30.0f), white);
_spidometerSprites[18] = new MySprite(SpriteType.TEXTURE, "SquareSimple", position,
new Vector2(size / 15.0f, size / 30.0f), red);
#endregion Speed steps and numbers
}
private MySprite[] TurnLed(Vector3 arguments, bool right)
{
MySprite[] sprites = new MySprite[4];
Vector2 position = new Vector2(arguments.X, arguments.Y);
float size = arguments.Z;
float half = size * 0.5f;
float fourth = half * 0.5f;
float angle = right ? 0 : (float)Math.PI;
float cos = (float)Math.Cos(angle);
float sin = (float)Math.Sin(angle);
sprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
new Vector2(position.X - half, position.Y), new Vector2(half * 1.15f, size * 0.2f * 1.15f), grey);
sprites[0].RotationOrScale = angle;
sprites[0].Position = new Vector2(position.X - fourth * cos, position.Y - fourth * sin);
sprites[1] = new MySprite(SpriteType.TEXTURE, "Triangle",
new Vector2(position.X + half, position.Y), new Vector2(half * 1.15f, half * 1.15f), grey);
sprites[1].RotationOrScale = (float)Math.PI * 0.5f + angle;
sprites[1].Position = new Vector2(position.X + fourth * cos, position.Y + fourth * sin);
sprites[2] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
new Vector2(position.X - half, position.Y), new Vector2(half, size * 0.2f), darkGreen);
sprites[2].RotationOrScale = angle;
sprites[2].Position = new Vector2(position.X - fourth * cos, position.Y - fourth * sin);
sprites[3] = new MySprite(SpriteType.TEXTURE, "Triangle",
new Vector2(position.X + half, position.Y), new Vector2(half, half), darkGreen);
sprites[3].RotationOrScale = (float)Math.PI * 0.5f + angle;
sprites[3].Position = new Vector2(position.X + fourth * cos, position.Y + fourth * sin);
return sprites;
}
private void HeadLightSprites()
{
Vector2 position = new Vector2(_headLightXYS.X, _headLightXYS.Y);
float size = _headLightXYS.Z;
_headLightSprites[0] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(size, size), grey);
_headLightSprites[1] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(size * 0.95f, size * 0.95f), pit);
float s6 = size / 6.0f;
float c = s6 * 5.0f;
float s3 = size / 3.0f;
_headLightSprites[2] = new MySprite(SpriteType.TEXTURE, "Circle",
position, new Vector2(c, c), white);
_headLightSprites[2].Position = new Vector2(position.X, position.Y);
_headLightSprites[3] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(size * 0.45f, size * 0.95f), pit);
_headLightSprites[3].Position = new Vector2(position.X - size * 0.25f, position.Y);
_headLightSprites[4] = new MySprite(SpriteType.TEXTURE, "Circle",
position, new Vector2(s6, s6), white);
_headLightSprites[4].Position = new Vector2(position.X, position.Y - s3);
_headLightSprites[5] = new MySprite(SpriteType.TEXTURE, "Circle",
position, new Vector2(s6, s6), white);
_headLightSprites[5].Position = new Vector2(position.X, position.Y + s3);
_headLightSprites[6] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(s6, s3 * 2.0f), white);
_headLightSprites[6].Position = new Vector2(position.X, position.Y);
float a = s6 * 0.25f;
float b = s6 * 1.55f;
float s325 = size / 3.25f;
for (int i = 0; i &lt; 5; i++)
{
_headLightSprites[7 + i] = new MySprite(SpriteType.TEXTURE, "SquareSimple",
position, new Vector2(b, a), white);
_headLightSprites[7 + i].Position = new Vector2(position.X - s325, position.Y - s3 + s6 * i);
}
}
#endregion
#region Draw
private void DrawPanel()
{
using (MySpriteDrawFrame frame = _surface.DrawFrame())
{
if (_showBatteryCharge)
DrawBatteryCharge(frame, new Vector2(_batteryChargeXYS.X, _batteryChargeXYS.Y), _batteryChargeXYS.Z);
if (_showBatteryOutput)
DrawBatteryOutput(frame, new Vector2(_batteryOutputXYS.X, _batteryOutputXYS.Y), _batteryOutputXYS.Z);
if (_showCargoVolume)
DrawVolume(frame, new Vector2(_cargoVolumeXYS.X, _cargoVolumeXYS.Y), _cargoVolumeXYS.Z);
if (_showCargoMass)
DrawMass(frame, new Vector2(_cargoMassXYS.X, _cargoMassXYS.Y), _cargoMassXYS.Z);
#region "Speed arrow and steps"
if (_showSpidometer)
DrawSpeedometer(frame, new Vector2(_spidometerXYS.X, _spidometerXYS.Y), _spidometerXYS.Z);
#endregion "Speed arrow and steps"
#region "Turn signals"
// Right turn signal
TrunLightsControl();
if (_showRightArrow) DrawTurnRight(frame, RScolor);
if (_showLeftArrow) DrawTurnLeft(frame, LScolor);
#endregion "Turn signals"
#region "Hanbrake"
if (_showHandbrake)
{
if (_controller.HandBrake)
DrawHandBrake(frame, new Vector2(_handbrake.X, _handbrake.Y), _handbrake.Z, red);
else
DrawHandBrake(frame, new Vector2(_handbrake.X, _handbrake.Y), _handbrake.Z, darkRed);
}
#endregion "Handbrake"
if (_showHeadLight)
{
if (_headlight.Enabled)
DrawHeadLight(frame, blue);
else
DrawHeadLight(frame, darkBlue);
}
}
}
private void DrawBatteryOutput(MySpriteDrawFrame frame, Vector2 position, float size)
{
frame.Add(_batteryOutputSprites[0]);
frame.Add(_batteryOutputSprites[1]);
frame.Add(_batteryOutputSprites[2]);
frame.Add(_batteryOutputSprites[3]);
frame.Add(_batteryOutputSprites[4]);
frame.Add(_batteryOutputSprites[5]);
frame.Add(_batteryOutputSprites[6]);
frame.Add(_batteryOutputSprites[8]);
// LED
float output = _battery.CurrentOutput / _battery.MaxOutput;
_batteryOutputSprites[7].Color = output &gt;= 0.75f ? red : darkRed;
frame.Add(_batteryOutputSprites[7]);
// Arrow
float angle = arrowAngleRightSide -
_battery.CurrentOutput / _battery.MaxOutput * (float)(Math.PI * 0.666f);
Vector2 arrowPosition = new Vector2(position.X - size / 6.0f, position.Y);
RotateArrowSprites(ref _batteryOutputSprites[9], ref _batteryOutputSprites[10], size, arrowPosition, angle);
frame.Add(_batteryOutputSprites[9]);
frame.Add(_batteryOutputSprites[10]);
}
private void DrawVolume(MySpriteDrawFrame frame, Vector2 position, float size)
{
frame.Add(_cargoVolumeSprites[0]);
frame.Add(_cargoVolumeSprites[1]);
frame.Add(_cargoVolumeSprites[2]);
frame.Add(_cargoVolumeSprites[3]);
frame.Add(_cargoVolumeSprites[4]);
frame.Add(_cargoVolumeSprites[5]);
frame.Add(_cargoVolumeSprites[6]);
frame.Add(_cargoVolumeSprites[8]);
float filledValue = 0.0f;
foreach (IMyTerminalBlock container in _containers)
filledValue += container.GetInventory().CurrentVolume.ToIntSafe();
// LED
float angle = arrowAngleLeftSide;
float output = 0;
if (_totalVolume != 0)
{
output = filledValue / _totalVolume;
angle = angle + output * (float)(Math.PI * 0.666f);
}
_cargoVolumeSprites[7].Color = output &gt;= 0.75f ? red : darkRed;
// Arrow
frame.Add(_cargoVolumeSprites[7]);
Vector2 arrowPosition = new Vector2(position.X + size / 6.0f, position.Y);
RotateArrowSprites(ref _cargoVolumeSprites[9], ref _cargoVolumeSprites[10], size, arrowPosition, angle);
frame.Add(_cargoVolumeSprites[9]);
frame.Add(_cargoVolumeSprites[10]);
}
private void DrawMass(MySpriteDrawFrame frame, Vector2 position, float size)
{
frame.Add(_cargoMassSprites[0]);
frame.Add(_cargoMassSprites[1]);
frame.Add(_cargoMassSprites[2]);
frame.Add(_cargoMassSprites[3]);
frame.Add(_cargoMassSprites[4]);
frame.Add(_cargoMassSprites[5]);
frame.Add(_cargoMassSprites[6]);
frame.Add(_cargoMassSprites[8]);
// LED
float output = (_controller.CalculateShipMass().TotalMass - _controller.CalculateShipMass().BaseMass) / (_cargoMassLimit * _gFactor);
_cargoMassSprites[7].Color = output &gt;= 0.75f ? red : darkRed;
frame.Add(_cargoMassSprites[7]);
// Arrow
float angle = arrowAngleRightSide - output * (float)(Math.PI * 0.666f);
Vector2 arrowPosition = new Vector2(position.X - size / 6.0f, position.Y);
RotateArrowSprites(ref _cargoMassSprites[9], ref _cargoMassSprites[10], size, arrowPosition, angle);
frame.Add(_cargoMassSprites[9]);
frame.Add(_cargoMassSprites[10]);
}
float speedZeroAngle = (float)-Math.PI * 0.25f;
private void DrawSpeedometer(MySpriteDrawFrame frame, Vector2 position, float size)
{
frame.Add(_spidometerSprites[0]);
frame.Add(_spidometerSprites[1]);
frame.Add(_spidometerSprites[2]);
frame.Add(_spidometerSprites[3]);
frame.Add(_spidometerSprites[4]);
frame.Add(_spidometerSprites[5]);
frame.Add(_spidometerSprites[6]);
frame.Add(_spidometerSprites[7]);
frame.Add(_spidometerSprites[8]);
frame.Add(_spidometerSprites[9]);
frame.Add(_spidometerSprites[10]);
frame.Add(_spidometerSprites[11]);
frame.Add(_spidometerSprites[12]);
frame.Add(_spidometerSprites[13]);
frame.Add(_spidometerSprites[14]);
frame.Add(_spidometerSprites[15]);
frame.Add(_spidometerSprites[16]);
// Arrow
float speed = (float)_controller.GetShipSpeed() * 3.7f;
float angle = speedZeroAngle + speed / _speedLimit * (float)Math.PI * 1.5f;
RotateArrowSprites(ref _spidometerSprites[17], ref _spidometerSprites[18], size, position, angle);
frame.Add(_spidometerSprites[17]);
frame.Add(_spidometerSprites[18]);
}
private void DrawBatteryCharge(MySpriteDrawFrame frame, Vector2 position, float size)
{
frame.Add(_batteryChargeSprites[0]);
frame.Add(_batteryChargeSprites[1]);
frame.Add(_batteryChargeSprites[2]);
frame.Add(_batteryChargeSprites[3]);
frame.Add(_batteryChargeSprites[4]);
frame.Add(_batteryChargeSprites[5]);
frame.Add(_batteryChargeSprites[6]);
frame.Add(_batteryChargeSprites[8]);
float charge = _battery.CurrentStoredPower / _battery.MaxStoredPower;
// LED
_batteryChargeSprites[7].Color = charge &lt;= 0.25f ? red : darkRed;
frame.Add(_batteryChargeSprites[7]);
// Arrow
Vector2 arrowPinPosition = new Vector2(position.X + size / 6.0f, position.Y);
float angle = arrowAngleLeftSide + charge * (float)(Math.PI * 0.666f);
RotateArrowSprites(ref _batteryChargeSprites[9], ref _batteryChargeSprites[10], size, arrowPinPosition, angle);
frame.Add(_batteryChargeSprites[9]);
frame.Add(_batteryChargeSprites[10]);
}
private void DrawHandBrake(MySpriteDrawFrame frame, Vector2 position, float size, Color color)
{
MySprite sprite = new MySprite(SpriteType.TEXTURE, "Circle",
position, new Vector2(size, size), new Color(0, 0, 0, 255));
frame.Add(sprite);
sprite = new MySprite(SpriteType.TEXTURE, "Circle",
position, new Vector2(size * 0.95f, size * 0.95f), new Color(15, 10, 10, 255));
frame.Add(sprite);
size *= 0.9f;
sprite = new MySprite(SpriteType.TEXTURE, "CircleHollow",
position, new Vector2(size * 0.9f, size * 0.9f), color);
frame.Add(sprite);
sprite = MySprite.CreateText("P", "Debug", color, size * 0.035f, TextAlignment.LEFT);
sprite.Position = new Vector2(position.X - size * 0.25f, position.Y - size * 0.55f);
frame.Add(sprite);
}
private void DrawTurnLeft(MySpriteDrawFrame frame, Color color)
{
frame.Add(_leftArrowSprites[0]);
frame.Add(_leftArrowSprites[1]);
_leftArrowSprites[2].Color = color;
_leftArrowSprites[3].Color = color;
frame.Add(_leftArrowSprites[2]);
frame.Add(_leftArrowSprites[3]);
}
private void DrawTurnRight(MySpriteDrawFrame frame, Color color)
{
frame.Add(_rightArrowSprites[0]);
frame.Add(_rightArrowSprites[1]);
_rightArrowSprites[2].Color = color;
_rightArrowSprites[3].Color = color;
frame.Add(_rightArrowSprites[2]);
frame.Add(_rightArrowSprites[3]);
}
private void DrawHeadLight(MySpriteDrawFrame frame, Color color)
{
frame.Add(_headLightSprites[0]);
frame.Add(_headLightSprites[1]);
_headLightSprites[2].Color = color;
frame.Add(_headLightSprites[2]);
frame.Add(_headLightSprites[3]);
_headLightSprites[4].Color = color;
frame.Add(_headLightSprites[4]);
_headLightSprites[5].Color = color;
frame.Add(_headLightSprites[5]);
_headLightSprites[6].Color = color;
frame.Add(_headLightSprites[6]);
_headLightSprites[7].Color = color;
frame.Add(_headLightSprites[7]);
_headLightSprites[8].Color = color;
frame.Add(_headLightSprites[8]);
_headLightSprites[9].Color = color;
frame.Add(_headLightSprites[9]);
_headLightSprites[10].Color = color;
frame.Add(_headLightSprites[10]);
_headLightSprites[11].Color = color;
frame.Add(_headLightSprites[11]);
}
#endregion
private void TurnControl()
{
if (!_pressedE &amp;&amp; _controller.RollIndicator &gt; 0)
{
_pressedE = true;
_leftSignal = false;
_hazardWarning = false;
_rightSignal = !_rightSignal;
}
if (!_pressedQ &amp;&amp; _controller.RollIndicator &lt; 0)
{
_pressedQ = true;
_rightSignal = false;
_hazardWarning = false;
_leftSignal = !_leftSignal;
}
if (Math.Abs(_controller.RollIndicator) &lt; 0.01)
{
_pressedQ = false;
_pressedE = false;
}
if (_steeringWheel != null)
{
if ((_pressedD || _pressedA) &amp;&amp; Math.Abs(_steeringWheel.SteerAngle) &lt; 0.03)
{
_rightSignal = false;
_leftSignal = false;
_pressedD = false;
_pressedA = false;
}
if (_controller.MoveIndicator.X &lt; 0)
{
_rightSignal = false;
_pressedA = true;
}
if (_controller.MoveIndicator.X &gt; 0)
{
_leftSignal = false;
_pressedD = true;
}
}
}
private void Blink(ref Color ledColor, Color newLedColor,  Color lightColor, List&lt;IMyLightingBlock&gt; lights, bool enabled)
{
ledColor = newLedColor;
foreach (IMyLightingBlock light in lights)
{
light.Color = lightColor;
light.Enabled = enabled;
}
}
private void TrunLightsControl()
{
if (DateTime.Now.Second % 2 == 0)
{
if (_leftSignal || _hazardWarning)
Blink(ref LScolor, green, orange, _lightsTurnLeft, true);
if (_rightSignal || _hazardWarning)
Blink(ref RScolor, green, orange, _lightsTurnRight, true);
}
else
{
Blink(ref LScolor, darkGreen, darkOrange, _lightsTurnRight, false);
Blink(ref RScolor, darkGreen, darkOrange, _lightsTurnLeft, false);
}
}
private void InputCommand(string input)
{
switch (input.ToLower())
{
case "trailer":
GatherContainers();
GatherLigths();
break;
case "hazard warning":
case "warning":
case "hazard":
_hazardWarning = !_hazardWarning;
break;
}
}
private void ReadInnerCom()
{
while (_program.IGC.UnicastListener.HasPendingMessage)
{
string command = _program.IGC.UnicastListener.AcceptMessage().Data.ToString();
if (!string.IsNullOrEmpty(command))
InputCommand(command);
}
}
public int Main(string argument)
{
InputCommand(argument);
try
{
switch (_state)
{
case State.Idle:
if (_controller.IsUnderControl || _hazardWarning)
{
float g = (float)_controller.GetNaturalGravity().Length();
_gFactor = g &gt; 0.001f ? 9.81f / g : 1f;
_state = State.Running;
_surface.ContentType = ContentType.SCRIPT;
_program.Runtime.UpdateFrequency = UpdateFrequency.Update10;
}
break;
case State.Running:
if (!_controller.IsUnderControl &amp;&amp; !_hazardWarning)
{
_state = State.Stop;
break;
}
TurnControl();
ReadInnerCom();
DrawPanel();
break;
case State.Stop:
_state = State.Idle;
_leftSignal = false;
_rightSignal = false;
_surface.ContentType = ContentType.TEXT_AND_IMAGE;
_program.Runtime.UpdateFrequency = UpdateFrequency.Update100;
break;
default:
_state = State.Idle;
break;
}
_program.Echo("Status: " + _state);
_program.Echo("Current mass limit: " + (_cargoMassLimit * _gFactor));
_program.Echo(_surfaceDimensions);
}
catch (NullReferenceException e)
{
_program.Echo("Check your truck. Required block(s) is missing. Or check names stored in custom data.");
_program.Echo(e.Message);
_program.Runtime.UpdateFrequency = UpdateFrequency.Update100;
return 1;
}
return 0;
}
}
public Program()
{
Runtime.UpdateFrequency = UpdateFrequency.Update100;
unit = new Vehicle(this);
}
Vehicle unit;
void Main(string argument)
{
unit.Main(argument);
}</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>143205774574582113</EntityId>
              <Min x="3" y="6" z="9" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-3" y="5" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-3" y="6" z="11" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-2" y="5" z="13" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>122450602365072995</EntityId>
              <Min x="-1" y="7" z="10" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>125497041632582552</EntityId>
              <Min x="-1" y="7" z="11" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="0" y="5" z="13" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>120359876161442645</EntityId>
              <Min x="-1" y="4" z="14" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>119430612974084436</EntityId>
              <Min x="0" y="7" z="11" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="1" y="5" z="13" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>99965847169346622</EntityId>
              <Min x="0" y="7" z="12" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>88077567057964439</EntityId>
              <Min x="-1" y="6" z="12" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>77560601690692283</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0.08333337</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>0.4014256</MaxAngle>
              <CurrentAngle>0.399597883</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>538936640</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>118841163300684298</EntityId>
              <Min x="3" y="7" z="12" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="3" y="5" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLightInv</SubtypeName>
              <EntityId>74646560456883890</EntityId>
              <Min x="3" y="4" z="14" />
              <IntegrityPercent>0.9367382</IntegrityPercent>
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>83328069222797744</EntityId>
              <Min x="-2" y="7" z="12" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>84679951684606312</EntityId>
              <Min x="1" y="4" z="14" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope</SubtypeName>
              <Min x="-1" y="6" z="8" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>96502946509908761</EntityId>
              <Min x="1" y="4" z="13" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>113633802054991176</EntityId>
              <Min x="0" y="6" z="8" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Drift Strength - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>23</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseStrength</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                      <GroupName>Front Wheels</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseHeight</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                      <GroupName>Wheels 1</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseHeight</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                      <GroupName>Wheels 3</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>6</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseHeight</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                      <GroupName>Wheels 4</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>7</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseHeight</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                      <GroupName>Wheels 5</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>8</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>IncreaseHeight</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>113633802054991176</BlockEntityId>
                      <GroupName>Wheels 6</GroupName>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="1" y="6" z="14" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-2" y="6" z="14" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="2" y="6" z="14" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>124904416514470595</EntityId>
              <Min x="1" y="5" z="-1" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Popout Off - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>20</NumberInGrid>
              <Enabled>false</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>91256678586189042</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>135248921041493766</EntityId>
              <Min x="-1" y="5" z="14" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>97133833108859089</EntityId>
              <Min x="0" y="5" z="14" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>95982362795626778</EntityId>
              <Min x="-1" y="4" z="12" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Reactor">
              <SubtypeName>SmallBlockSmallGenerator</SubtypeName>
              <EntityId>90884197633100689</EntityId>
              <Min x="-1" y="5" z="11" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>0.125</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanReceive</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyTimerComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_TimerComponent">
                      <Repeat>true</Repeat>
                      <TimeToEvent>0</TimeToEvent>
                      <SetTimeMinutes>0</SetTimeMinutes>
                      <TimerEnabled>false</TimerEnabled>
                      <RemoveEntityOnTimer>false</RemoveEntityOnTimer>
                      <TimerType>Frame100</TimerType>
                      <FramesFromLastTrigger>0</FramesFromLastTrigger>
                      <TimerTickInFrames>900</TimerTickInFrames>
                      <IsSessionUpdateEnabled>false</IsSessionUpdateEnabled>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Capacity>1</Capacity>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfArmorBlock</SubtypeName>
              <Min x="2" y="5" z="14" />
              <IntegrityPercent>0.9609647</IntegrityPercent>
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>89177108461811387</EntityId>
              <Min x="1" y="5" z="14" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>143071441495341368</EntityId>
              <Min x="-2" y="5" z="15" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Offset Light 3 turn right</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>3</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>4.25</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.0196078438</ColorRed>
              <ColorGreen>0.0117647061</ColorGreen>
              <ColorBlue>0.003921569</ColorBlue>
              <Falloff>1.3</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>0</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>139056013390938385</EntityId>
              <Min x="2" y="5" z="15" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Offset Light 4 turn left</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>4</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>4.25</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorRed>0.0196078438</ColorRed>
              <ColorGreen>0.0117647061</ColorGreen>
              <ColorBlue>0.003921569</ColorBlue>
              <Falloff>1.3</Falloff>
              <Intensity>10</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>0</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>132475629718541451</EntityId>
              <Min x="-3" y="7" z="1" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>136174649286740197</EntityId>
              <Min x="3" y="7" z="1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>82054530809084564</EntityId>
              <Min x="1" y="7" z="-2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorCenterPanelLight</SubtypeName>
              <EntityId>81672643642235662</EntityId>
              <Min x="2" y="7" z="-2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="2" y="5" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="1" y="5" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Base</SubtypeName>
              <Min x="-1" y="5" z="-2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-2" y="5" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>HalfSlopeArmorBlock</SubtypeName>
              <Min x="-1" y="5" z="-3" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeCorner</SubtypeName>
              <Min x="3" y="5" z="-3" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorHalfSlopeCorner</SubtypeName>
              <Min x="-3" y="5" z="-3" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>73492508369481607</EntityId>
              <Min x="2" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="5" z="3" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>136161473145202531</EntityId>
              <Min x="2" y="6" z="3" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Left Main Door - Hinge</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>6</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>134462508831720606</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>-0.196273983</TargetVelocity>
              <MinAngle>-1.57079637</MinAngle>
              <MaxAngle>-1.57079637</MaxAngle>
              <CurrentAngle>-1.57079637</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>612950.563</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Cockpit">
              <SubtypeName>RoverCockpit</SubtypeName>
              <EntityId>78713467394359024</EntityId>
              <Min x="-2" y="5" z="4" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyInventoryBase</TypeId>
                    <Component xsi:type="MyObjectBuilder_Inventory">
                      <Items />
                      <nextItemId>0</nextItemId>
                      <Volume>1</Volume>
                      <Mass>9223372036854.775807</Mass>
                      <MaxItemCount>2147483647</MaxItemCount>
                      <Size xsi:nil="true" />
                      <InventoryFlags>CanSend</InventoryFlags>
                      <RemoveEntityOnEmpty>false</RemoveEntityOnEmpty>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_EnergyHydrogen</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_ArtificialHorizon</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_Gravity</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_Velocity</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_ClockAnalog</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Seat Entry/Exit Activated Timers - Seat Config]
Timer to trigger on entry=Passenger Seat - Timer Block
Timer to trigger on exit=
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <ControlThrusters>false</ControlThrusters>
              <ControlWheels>false</ControlWheels>
              <ControlGyros>false</ControlGyros>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                    </Data>
                  </Slot>
                </SlotsGamepad>
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <HorizonIndicatorEnabled>false</HorizonIndicatorEnabled>
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </BuildToolbar>
              <OnLockedToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </OnLockedToolbar>
              <IsTargetLockingEnabled>false</IsTargetLockingEnabled>
              <PilotRelativeWorld>
                <Position x="-4.1039795875549316" y="-0.68521952629089355" z="0.10005258023738861" />
                <Forward x="0.9537388" y="-0.250058353" z="0.16689235" />
                <Up x="0.259673327" y="0.9649423" z="-0.0381603055" />
                <Orientation>
                  <X>-0.112306416</X>
                  <Y>-0.755535245</Y>
                  <Z>-0.0701152161</Z>
                  <W>0.64158994</W>
                </Orientation>
              </PilotRelativeWorld>
              <PilotGunDefinition xsi:nil="true" />
              <IsInFirstPersonView>true</IsInFirstPersonView>
              <OxygenLevel>0</OxygenLevel>
              <PilotJetpackEnabled xsi:nil="true" />
              <TargetData>
                <TargetId>0</TargetId>
                <IsTargetLocked>false</IsTargetLocked>
                <LockingProgress>0</LockingProgress>
              </TargetData>
              <SitAnimation>0</SitAnimation>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>88906261931127078</EntityId>
              <Min x="3" y="7" z="0" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>82108892373746485</EntityId>
              <Min x="3" y="6" z="1" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>127411008306340536</EntityId>
              <Min x="-3" y="7" z="0" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerSquare</SubtypeName>
              <Min x="-2" y="6" z="8" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerSquare</SubtypeName>
              <Min x="2" y="6" z="8" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>78740449570257937</EntityId>
              <Min x="-3" y="6" z="1" />
              <BlockOrientation Forward="Right" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>108282137165639119</EntityId>
              <Min x="3" y="7" z="2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>102628266829220233</EntityId>
              <Min x="-3" y="7" z="2" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MergeBlock">
              <SubtypeName>SmallShipSmallMergeBlock</SubtypeName>
              <EntityId>79100050194482266</EntityId>
              <Min x="-1" y="5" z="8" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MergeBlock">
              <SubtypeName>SmallShipSmallMergeBlock</SubtypeName>
              <EntityId>105180127517729709</EntityId>
              <Min x="1" y="5" z="8" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>92449606674356588</EntityId>
              <Min x="-1" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="5" z="3" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>141397618814734177</EntityId>
              <Min x="-2" y="6" z="3" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Right Main Door - Hinge </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>6</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>119764506996169359</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0</TargetVelocity>
              <MinAngle>1.57079637</MinAngle>
              <MaxAngle>1.57079637</MaxAngle>
              <CurrentAngle>1.57079637</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>612950.563</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>143470402419869971</EntityId>
              <Min x="1" y="5" z="11" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <Text>DAS - Driver Assisting System  --

DAS.DisplayScheduler failure
DAS.CameraScheduler failure
DAS.FDS failure
DAS.SDO failure

Instructions used: 156/50000
Average(EMA) run time: 0.022 ms
Last run time: 0.016 ms
_</Text>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <ScriptBackgroundColor>
                            <PackedValue>4288108544</PackedValue>
                            <X>0</X>
                            <Y>88</Y>
                            <Z>151</Z>
                            <R>0</R>
                            <G>88</G>
                            <B>151</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <ScriptBackgroundColor>
                            <PackedValue>4288108544</PackedValue>
                            <X>0</X>
                            <Y>88</Y>
                            <Z>151</Z>
                            <R>0</R>
                            <G>88</G>
                            <B>151</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Secondary DAS - Programmable Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>5</NumberInGrid>
              <Enabled>false</Enabled>
              <Program>/*
* Author: Wanderer

Version: 2.4.2
- Slight improvement of wheel adding algorithm.

*/
class DriverAssistingSystem
{
// General settings.
double _MaxForwardAccel=10000;// Maximum forward acceleration in m/s^999.
double _MaxBackwardAccel=0.1;// Maximum backward acceleration in m/s^2.
double _MaxPowerConsumption=100;// Maximum allowed power output to wheels.
double _NaturalPitchDegree=0;// If vehicle buld with chassis incline in mind,put this incline here.
double _SafeFallVelocity=15;// Vertical velocity which FDS will try to achive near ground level.
double _LeanToSurfaceDistance=10;// Distance at which script will align vehicle to surface curve. Downward camera required.
string _StopLightsGroupName="Stop lights";// Group name of stop/back/break lights which script will search.
string _TurnLightsGroupName="Turn lights";// Group name of stop/back/break lights which script will search.
string _SubgridWheelsGroupName="Subgrid Wheels";// Group of wheels on subgrid. These wheels controll will be overrien.
string _BackupBeeperName="Back-up beeper";// Sound block(s) that will triggered to play when driving backward.
HandbrakeMode _HandbrakeMode=HandbrakeMode.Auto;// Auto handbrakes mode:
// HandbrakeMode.Semi-turn hand brakes ON when no one control vehicle,don't turn OFF when someone get control;
// HandbrakeMode.Auto-turn hand brakes ON when no one control vehicle,turn OFF when someone get control;
// HandbrakeMode.Off -don't turn hand brakes ON when no one control vehicle and don't turn OFF when someone get control.
AckermannFocalPointRef _AckermannFocalPoint=AckermannFocalPointRef.CoM;// Define main turn axle for all wheels
// AckermannFocalPointRef.CoM-main turn axel will be vector from vehicle CoM to Ackermann focal point. Most stable.
// AckermannFocalPointRef.RC-main turn axel will be vector from RC block position to Ackermann focal point. RC block should be between left and right wheels.
// AckermannFocalPointRef.BSphere-main turn axel will be vector from bounding sphere centre to Ackermann focal point.
bool _UseJumpJets=true;// Engage upward thrusters when Spacebar pressed.
bool _UseAdaptiveSteering=false;// Reduce steering angle when driving at high speed.
bool _UseAckermannSteering=false;// Use Ackermann steering scheme.
bool _UseDASAirShock=true; // Use air shock system for suspensions provided by DAS instead of vanilla one.
bool _UseHillDescentControl=false;// Use use soft brakes if lateral velocity exceeds speed limit.
bool _UseGSA=false;// Override gyros or not.
bool _UseTCS=true;// Use all stuff tied to suspensions.
bool _UseFDS=true;// Override upward thrusters or not.
bool _UseSDO=false;// Override other thrusters?
bool _UseLights=true;// Handle stop and turn lights or not.

// Suspension settings.
double _FrwrdSpeedLimitKPH=345;// Suspension wheels speed limit when driving worward.
double _BckwrdSpeedLimitKPH=55;// Suspension wheels speed limit when driving backward.
double _MaxSteerAngleDegree=42;// Suspension wheel maximum steering angle.
double _SusHeightOffset=-0.3200;// Suspension heght offset that will be setted by script. Can be changed.
double _SusStrenght=6;// Suspension strenght that will be setted by script. Can be changed. Negative value enables auto calculation.
double _SusValueChangeRate=10;// Rate at wich script will adjuct height offset and strenght related to previous value. Mesured in game ticks.

// Autopilot settings.
string _AutopilotTimerName="Timer Block DAS Waypoint";// This timer block will be triggered at every waypoint.
double _AutopilotAccuracy=0.75;// How close to waypoint vehicle should be to consider it's reached. Higher-closer.
double _AutopilotWait=5;// Wait this time in sec when waypoint reached.
double _AutopilotSpeedLimitKMP=60;// Will drive at this speed.

//-------------------------------------------------------------------
// Script stuff. Modifying anything below will void your warranty.
//-------------------------------------------------------------------
enum HandbrakeMode : byte {Semi,Auto,Off,END_OF_ENUM}
enum AckermannFocalPointRef : byte {CoM,RC,BSphere}

class RuntimeProfiler
{
Program Parent;
double RunTimeAvrEMA;
double EMA_A;
int CycleNum;
int Counter;
StringBuilder Str;
IMyTextSurface MyLCD;
IEnumerator&lt;bool&gt; StMachine;
public int SkipCycles;
public string Caption;
public string Memo;
public RuntimeProfiler(Program parent,int skipCycles=0,int skipOffset=0,double emaA=0.003)
{
Parent=parent;
SkipCycles=skipCycles;
CycleNum=skipOffset;
EMA_A=emaA;
Str=new StringBuilder();
if(Parent.Me.CustomData=="")
MyLCD=(Parent.Me as IMyTextSurfaceProvider).GetSurface(0);
StMachine=UpdateIterator();
}
public void Update()
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
RunTimeAvrEMA=EMA_A*Parent.Runtime.LastRunTimeMs+(1-EMA_A)*RunTimeAvrEMA;
yield return true;
}
CycleNum=0;
Str.Clear();
Str.Append(Caption);
++Counter;
switch(Counter % 4)
{
case 0: Str.Append("--");break;
case 1: Str.Append("\\");break;
case 2: Str.Append(" |");break;
case 3: Str.Append("/");break;
}
Str.AppendFormat("\n{0}\n",Memo);
RunTimeAvrEMA=EMA_A*Parent.Runtime.LastRunTimeMs+(1-EMA_A)*RunTimeAvrEMA;
Str.AppendFormat("Instructions used: {0:G}/{1:G}\nAverage(EMA) run time: {2:F3} ms\nLast run time: {3:F3} ms\n{4}",
Parent.Runtime.CurrentInstructionCount,
Parent.Runtime.MaxInstructionCount,
RunTimeAvrEMA,
Parent.Runtime.LastRunTimeMs,
Counter % 2==0 ? "_" : "");
Parent.Echo(Str.ToString());
MyLCD?.WriteText(Str);
}
}

class PID
{
public double Kp {get;set;}
public double Ki {get;set;}
public double Kd {get;set;}
public double Signal {get;set;}
double ValuePrev;
double Integral;
double TimePrev;
public PID(double kp=1,double ki=1,double kd=1)
{
Kp=kp;
Ki=ki;
Kd=kd;
}
public void Reset()
{
ValuePrev=0;
Integral=0;
TimePrev=0;
Signal=0;
}
public double GetSignal(double value,double time=0)
{
if(Ki!=0)
Integral+=value*0.001;
double dt=time==0 ? 1 : time-TimePrev;
Signal=Kp*value+Ki*Integral*dt+Kd*(value-ValuePrev)/dt;
ValuePrev=value;
TimePrev=time;
return Signal;
}
}

class Utils
{
static public bool IsIgnore(IMyTerminalBlock block)
{
return block.CustomData.Equals("DAS_IGNORE",StringComparison.OrdinalIgnoreCase);
}
}

class StringQueue
{
List&lt;string&gt; StringsList;
StringBuilder String;
public int MaxCount {get;set;}
public StringQueue(int maxCount=0)
{
StringsList=new List&lt;string&gt;();
String=new StringBuilder();
MaxCount=maxCount;
}
public void Append(string str)
{
StringsList.Add(str);
if(MaxCount&gt;0&amp;&amp;StringsList.Count&gt;MaxCount)
StringsList.RemoveAt(0);
}
public void Remove(int count=1)
{
StringsList.RemoveRange(0,Math.Min(StringsList.Count,count));
}
public StringBuilder GetString()
{
String.Clear();
foreach(var item in StringsList)
String.AppendLine(item);
return String;
}
}

class BaseClass
{
protected Program Parent;
public IMyRemoteControl RC;
public bool Ready {get {return RC!=null;}}
public BaseClass(Program parent) {Parent=parent;}
public IMyRemoteControl ForceDetectRemoteControl()
{
RC=null;
List&lt;IMyRemoteControl&gt; remcomarr=new List&lt;IMyRemoteControl&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(remcomarr,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
if(remcomarr.Count&gt;0)
RC=remcomarr[0];
return RC;
}
}

interface IInputData
{
float WS {get;}
float AD {get;}
float CSpacebar {get;}
float QE {get;}
bool Ready {get;}
bool Manning {get;}
}
class UserInputWatcher : IInputData
{
Program Parent;
List&lt;IMyShipController&gt; Controllers;
int CycleNum;
int Indx;
IEnumerator&lt;bool&gt; StMachine;

public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Ready {get;set;}
public bool Manning {get;set;}
public int SkipCycles;

public UserInputWatcher(Program parent,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Controllers=new List&lt;IMyShipController&gt;();
StMachine=UpdateIterator();
}
public void DetectFuncBlocks()
{
Controllers.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(Controllers,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
Ready=Controllers.Count&gt;0;
Indx=0;
}
public void Reset()
{
WS=AD=CSpacebar=QE=0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
Manning=false;
Vector3 input=Vector3.Zero;
QE=0;
for(int i=0;i&lt;Controllers.Count;++i)
{
if(Controllers[Indx].IsUnderControl)
{
input=Controllers[Indx].MoveIndicator;
QE=Controllers[Indx].RollIndicator;
Manning=true;
break;
}
Indx=(Indx+1) % Controllers.Count;
}
WS=input.Z;
AD=input.X;
CSpacebar=input.Y;
}
}
class AutopilotDriver : BaseClass,IInputData
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
string TimerName;
IMyTimerBlock Timer;

public enum EDriveMode : byte {OneWay,Patrol,Cicrle,END_OF_ENUM}

public int SkipCycles;
public int WaypointIndx;
public int WaypointSelector=1;
public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Manning {get;set;}
public bool Busy {get;set;}
public MyWaypointInfo CurrentWaypoint {get;set;}
public MyWaypointInfo FirstWaypoint {get;set;}
public MyWaypointInfo LastWaypoint {get;set;}
public double Time {get;set;}
public EDriveMode DriveMode;
public bool Enabled;
public double dT=0.016;
public double Accuracy;
public double WaitTimeSec;

public AutopilotDriver(Program parent,string timerName,int skipCycles=0,int skipOffset=0) : base(parent)
{
TimerName=timerName;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void ResetWaypointIndex(bool reset=true)
{
if(reset)
{
WaypointIndx=0;
WaypointSelector=1;
}
}
public void InverseRoute()
{
List&lt;MyWaypointInfo&gt; waypoints=new List&lt;MyWaypointInfo&gt;();
RC.GetWaypointInfo(waypoints);
RC.ClearWaypoints();
for(int i=waypoints.Count-1;i&gt;=0;i--)
RC.AddWaypoint(waypoints[i]);
if(WaypointIndx&gt;0)
WaypointIndx=waypoints.Count-WaypointIndx;
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
Timer=Parent.GridTerminalSystem.GetBlockWithName(TimerName) as IMyTimerBlock;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
Manning=Busy=false;
WS=AD=0;
Time=0;
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
List&lt;MyWaypointInfo&gt; waypoints=new List&lt;MyWaypointInfo&gt;();
RC.GetWaypointInfo(waypoints);
if(waypoints.Count==0) yield return false;
FirstWaypoint=waypoints[0];
LastWaypoint=waypoints[waypoints.Count-1];
Manning=true;
WS=AD=0;
Busy=true;
WaypointIndx=MathHelper.Clamp(WaypointIndx,0,waypoints.Count-1);
Time=0;
while(Busy)
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
Time+=dT;
yield return true;
}
CycleNum=0;
CurrentWaypoint=waypoints[WaypointIndx];
Vector3D targetVector=CurrentWaypoint.Coords-RC.CubeGrid.WorldVolume.Center;
double boundSphereRadi=RC.CubeGrid.WorldVolume.Radius;
double temp=boundSphereRadi/Accuracy;
if(targetVector.LengthSquared()&gt;temp*temp)
{
Time=0;
RC.HandBrake=false;
float dir=(float)RC.WorldMatrix.Backward.Dot(targetVector)+0.3f;
WS=MathHelper.Clamp(dir+(dir&gt;0 ? 0.1f : -0.1f),-1,1);
AD=(float)MathHelper.Clamp(RC.WorldMatrix.Right.Dot(Vector3D.Normalize(targetVector))*Math.Sign(-WS)*2,-1,1);
yield return true;
}
else
{
RC.HandBrake=WaitTimeSec&gt;0;
Time+=dT;
WS=AD=0;
Timer?.Trigger();
if(Time&lt;WaitTimeSec)
yield return true;
else
{
Time=0;
WaypointIndx+=WaypointSelector;
if(WaypointIndx&gt;=waypoints.Count)
{
switch(DriveMode)
{
case EDriveMode.OneWay:
Busy=false;
break;
case EDriveMode.Patrol:
WaypointSelector=-1;
if(waypoints.Count&gt;1)
WaypointIndx-=2;
else
Busy=false;
break;
case EDriveMode.Cicrle:
WaypointIndx=0;
if(waypoints.Count&lt;2)
Busy=false;
break;
}
}
else if(WaypointIndx&lt;0)
{
WaypointSelector=1;
WaypointIndx=0;
}
}
}
}
Time=0;
Manning=false;
RC.HandBrake=true;
}
}
class CruiseControlUnit : BaseClass,IInputData
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
IInputData UserInput;
GridDynamicsWatcher Dynamics;
OrientationComputer Orientation;
float HeadingYaw;
float VelocitySign;

public int SkipCycles;
public float WS {get;set;}
public float AD {get;set;}
public float CSpacebar {get;set;}
public float QE {get;set;}
public bool Manning {get;set;}
public bool Busy {get;set;}
public double SpeedKPH {get;set;}
public bool Enabled;

public CruiseControlUnit(Program parent,IInputData userInput,GridDynamicsWatcher dynamics,OrientationComputer orientation,
int skipCycles=0,int skipOffset=0) : base(parent)
{
UserInput=userInput;
Dynamics=dynamics;
Orientation=orientation;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
Busy=false;
Manning=false;
WS=AD=0;
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
Manning=true;
SpeedKPH=Dynamics.Velocity.LateralAbs*3.6/0.9;
VelocitySign=WS=Math.Sign(Dynamics.Velocity.Backward);
HeadingYaw=(float)Orientation.Yaw;
AD=0;
Busy=true;
while(Busy)
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CSpacebar=0;
if(UserInput.WS!=0||UserInput.CSpacebar&gt;0)
{
SpeedKPH=Dynamics.Velocity.LateralAbs*3.6/0.9;
VelocitySign=Math.Sign(Dynamics.Velocity.Backward);
WS=UserInput.WS!=0 ? Math.Sign(UserInput.WS)+UserInput.WS : VelocitySign;
CSpacebar=UserInput.CSpacebar;
}
else
WS=VelocitySign;
if(UserInput.AD!=0)
{
HeadingYaw=(float)Orientation.Yaw;
AD=UserInput.AD;
}
else
AD=-VelocitySign*MathHelper.Clamp(MathHelper.WrapAngle(HeadingYaw-(float)Orientation.Yaw)*5f,-1,1);
if(Dynamics.Velocity.Scalar&lt;1)
Busy=false;
else
yield return true;
}
Manning=false;
RC.HandBrake=true;
}
}

class GridDynamicsWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public class VelocitiesCollection
{
public Vector3D Vector {get;set;}
public double Forward {get;set;}
public double Right {get;set;}
public double Down {get;set;}
public double Backward {get {return -Forward;}}
public double Left {get {return -Right;}}
public double Up {get {return -Down;}}
public double SideAbs {get;set;}
public double LateralAbs {get;set;}
public double VerticalAbs {get;set;}
public double Scalar {get;set;}
public double NaturalPitchDegree;
public VelocitiesCollection() {}
public void Update(IMyShipController rc)
{
Vector=rc.GetShipVelocities().LinearVelocity;
Scalar=Vector.Length();
Forward=Vector.Dot(rc.WorldMatrix.Forward);
Right=Vector.Dot(rc.WorldMatrix.Right);
Down=Vector.Dot(rc.WorldMatrix.Down);
if(NaturalPitchDegree!=0)
{
double pScalar=new Vector2D(Forward,Down).Length();
Down-=Math.Sin(MathHelperD.ToRadians(NaturalPitchDegree))*pScalar*Math.Sign(Forward);
Forward+=Math.Abs(Math.Sin(MathHelperD.ToRadians(NaturalPitchDegree)))*pScalar;
}
LateralAbs=Math.Abs(Forward);
VerticalAbs=Math.Abs(Down);
SideAbs=Math.Abs(Right);
}
public void Reset()
{
Forward=Right=Down=SideAbs=LateralAbs=VerticalAbs=Scalar=0;
Vector=Vector3D.Zero;
}
}
public class AccelerationCollection
{
Vector3D VelocityVPrev;
double VelocitySPrev;
public Vector3D VectorMoment {get;set;}
public double AvrEMA {get;set;}
public double Moment {get;set;}
public double EMA_A;
public AccelerationCollection(double emaA=0.2)
{
EMA_A=emaA;
}
public void Update(VelocitiesCollection velocity,double dT)
{
VectorMoment=(velocity.Vector-VelocityVPrev)/dT;
Moment=(velocity.Scalar-VelocitySPrev)/dT;
AvrEMA=EMA_A*Moment+(1-EMA_A)*AvrEMA;
VelocityVPrev=velocity.Vector;
VelocitySPrev=velocity.Scalar;
}
public void Reset()
{
AvrEMA=Moment=0;
VectorMoment=Vector3D.Zero;
}
}

public int SkipCycles;
public VelocitiesCollection Velocity {get;set;}
public AccelerationCollection Acceleration {get;set;}
public double NaturalPitchDegree {get {return Velocity.NaturalPitchDegree;} set {Velocity.NaturalPitchDegree=value;}}
public double dT=0.016;

public GridDynamicsWatcher(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
Velocity=new VelocitiesCollection();
Acceleration=new AccelerationCollection();
StMachine=UpdateIterator();
}
public void Reset()
{
Velocity.Reset();
Acceleration.Reset();
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
double time=dT;
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
time+=dT;
yield return true;
}
CycleNum=0;
Velocity.Update(RC);
Acceleration.Update(Velocity,time);
}
}

class GridMassWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool _BaseMassChanged;
bool _PhysicalMassChanged;
MyShipMass MassesPrev;
float[] ChangeIgnorArr;

public int SkipCycles;
public MyShipMass Masses {get;set;}
public bool BaseMassChanged
{
get
{
bool temp=_BaseMassChanged;
_BaseMassChanged=false;
return temp;
}
}
public bool PhysicalMassChanged
{
get
{
bool temp=_PhysicalMassChanged;
_PhysicalMassChanged=false;
return temp;
}
}

public GridMassWatcher(Program parent,int skipCycles=0,int skipOffset=0) : base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void InitMasses()
{
MassesPrev=RC.CalculateShipMass();
}
public void SetIgnorArray(float[] array)
{
ChangeIgnorArr=array;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
Masses=RC.CalculateShipMass();
double temp;
temp=Math.Abs(MassesPrev.BaseMass-Masses.BaseMass);
if(temp==0)
_BaseMassChanged=false;
else
{
_BaseMassChanged=true;
if(ChangeIgnorArr!=null)
foreach(var d in ChangeIgnorArr)
if(temp==d)
{
_BaseMassChanged=false;
break;
}
}

temp=Math.Abs(MassesPrev.PhysicalMass-Masses.PhysicalMass);
if(temp==0)
_PhysicalMassChanged=false;
else
{
_PhysicalMassChanged=true;
if(ChangeIgnorArr!=null)
foreach(var d in ChangeIgnorArr)
if(temp==d)
{
_PhysicalMassChanged=false;
break;
}
}

MassesPrev=Masses;
}
}

class GravityWatcher : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double MagnitudePrev;
bool _MagnitudeChanged;

public int SkipCycles;
public Vector3 Direction {get;set;}
public double Magnitude {get;set;}
public bool MagnitudeChanged
{
get
{
bool temp=_MagnitudeChanged;
_MagnitudeChanged=false;
return temp;
}
}
public bool ArtificialStongerNatural {get;set;}

public GravityWatcher(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
ArtificialStongerNatural=RC.GetNaturalGravity().LengthSquared()&lt;RC.GetArtificialGravity().LengthSquared();
Direction=RC.GetTotalGravity();
Magnitude=Direction.Length();
_MagnitudeChanged=Magnitude!=MagnitudePrev;
MagnitudePrev=Magnitude;
}
}

class OrientationComputer : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public int SkipCycles;
public double Roll {get;set;}
public double Yaw {get;set;}
public double Pitch {get;set;}
public Vector3D RollYawPitch {get;set;}
public OrientationComputer(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
}
public void Update(Vector3D gravity,bool skipYaw=false)
{
if(Ready)
{
if(StMachine==null)
StMachine=UpdateIterator(gravity,skipYaw);
if(!StMachine.MoveNext())
StMachine=null;
}
}
IEnumerator&lt;bool&gt; UpdateIterator(Vector3D gravity,bool skipYaw)
{
Vector3D fow=RC.WorldMatrix.Forward;
Vector3D up=RC.WorldMatrix.Up;
Vector3D left=RC.WorldMatrix.Left;
Vector3D result=Vector3D.Zero;
int temp=Math.Max(SkipCycles-(skipYaw ? 1 : 2),0);
int temp2=SkipCycles-temp;
for(;CycleNum&lt;temp;++CycleNum)
yield return true;
CycleNum=0;

if(!Vector3D.IsZero(gravity))
{
gravity.Normalize();
result.Z=-Math.Asin(MathHelperD.Clamp(fow.Dot(gravity),-1.0,1.0));
if(temp2&gt;1) yield return true;

gravity.Normalize();
result.X=Math.Asin(MathHelperD.Clamp(-gravity.Dot(left),-1.0,1.0));
if(gravity.Dot(up)&gt;0)
result.X=Math.Sign(result.X)*(Math.PI-Math.Abs(result.X));
if(temp2&gt;0) yield return true;

if(!skipYaw)
{
gravity.Normalize();
Vector3D gnNorth=Vector3D.Normalize(Vector3D.Reject(-Vector3D.UnitY,gravity));
Vector3D gnForwad=Vector3D.Normalize(Vector3D.Reject(fow,gravity));
result.Y=Math.Acos(MathHelperD.Clamp(gnForwad.Dot(gnNorth),-1.0,1.0));
if(Math.Abs(result.X)&lt;MathHelperD.PiOver2)
{
if(left.Dot(gnNorth)&lt;0)
result.Y=-result.Y;
}
else if(left.Dot(gnNorth)&gt;0)
result.Y=-result.Y;
}
}
Roll=result.X;
Yaw=result.Y;
Pitch=result.Z;
RollYawPitch=new Vector3D(Roll,Yaw,Pitch);
}
}

class CameraScheduler : BaseClass
{
class CameraWrapper
{
public IMyCameraBlock Camera {get;set;}
public Vector3D LocalPosition {get;set;}
public CameraWrapper(IMyCameraBlock camera,IMyShipController anchor)
{
Camera=camera;
Vector3D temp1,temp2;
temp2=Camera.GetPosition()-anchor.CubeGrid.WorldVolume.Center;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
LocalPosition=temp1;
}
}
List&lt;CameraWrapper&gt; Cameras;
GridDynamicsWatcher Dynamics;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double RaycastDistance=100;
double Time;
int CameraIndex;
int Odd;
Vector3D SurfaceHitPosPrev;

new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Cameras.Count&gt;0;}}
public int SkipCycles;
public double CalcSurfaceAfter;
public double dT=0.016;
public Vector3D SurfaceTilt {get;set;}
public Vector3D SurfaceBank {get;set;}
public MyDetectedEntityType SurfaceType {get;set;}
public double Altitude {get;set;}
public double RaycastDistanceUsed {get;set;}
public int DataAge {get;set;}

public CameraScheduler(Program parent,GridDynamicsWatcher dynamics,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
Dynamics=dynamics;
Cameras=new List&lt;CameraWrapper&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Cameras.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
List&lt;IMyCameraBlock&gt; allCameras=new List&lt;IMyCameraBlock&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allCameras,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var camera in allCameras)
{
if(RC.Orientation.TransformDirectionInverse(camera.Orientation.Forward)==Base6Directions.Direction.Down)
{
camera.EnableRaycast=true;
CameraWrapper newCamera=new CameraWrapper(camera,RC);
Cameras.Add(newCamera);
}
}
}
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
++DataAge;
Time+=dT;
yield return true;
}
CycleNum=0;

++DataAge;
Time+=dT;
Odd=(Odd+1) % 2;
Vector3D ScanDirection=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Forward,0.2+Odd/5.0);
// calc raycast direction as derivative from velocity and gravity vectors,but in 44.9 deg cone
if(Dynamics.Velocity.Scalar&gt;0.5)
{
double Y=Math.Acos(RC.WorldMatrix.Down.Dot(Vector3D.Normalize(Dynamics.Velocity.Vector)));
if(Y&lt;0.783652834148)
ScanDirection=Dynamics.Velocity.Vector;
else if(Y&lt;2.3561944902) // from 44.9 to 135 degree
{
double CC=Math.Sin(Y)/Math.Sin((Math.PI-Y)/2.0);
double C1=0.7070944397373547/Math.Sin(0.78538071010493+Y/2.0);// sin(PI/4)/sin(PI/4+Y/2)
ScanDirection=Vector3D.Lerp(RC.WorldMatrix.Down,Vector3D.Normalize(Dynamics.Velocity.Vector),C1/CC);
}
}
// raycast in ScanDirection vector and calc SurfaceTilt
MyDetectedEntityInfo hit=new MyDetectedEntityInfo();
SurfaceTilt=Vector3D.Zero;
SurfaceType=MyDetectedEntityType.None;
hit=TryRaycast(RaycastDistance,ScanDirection);
if(!hit.IsEmpty())
{
Vector3D rayCastDistance=hit.HitPosition.Value-Cameras[CameraIndex].Camera.GetPosition();
rayCastDistance=hit.HitPosition.Value-(RC.CubeGrid.WorldVolume.Center+RC.WorldMatrix.Down*RC.CubeGrid.WorldVolume.Radius);
RaycastDistance=rayCastDistance.Length()*1.05+5;
SurfaceType=hit.Type;
Altitude=RC.WorldMatrix.Down.Dot(rayCastDistance);
DataAge=0;

if(Altitude&lt;=CalcSurfaceAfter&amp;&amp;!Vector3D.IsZero(SurfaceHitPosPrev))
SurfaceTilt=hit.HitPosition.Value-SurfaceHitPosPrev;
SurfaceHitPosPrev=hit.HitPosition.Value;
}
else
{
RaycastDistance=Math.Min(RaycastDistance+25,1000.0);
SurfaceHitPosPrev=Vector3D.Zero;
}
yield return true;

++DataAge;
Time+=dT;
// raycast in side-to-side vectors and calc SurfaceBank
SurfaceBank=Vector3D.Zero;
if(Altitude&lt;=CalcSurfaceAfter&amp;&amp;!hit.IsEmpty())
{
Vector3D perpendicular=Vector3D.Normalize(ScanDirection.Cross(RC.WorldMatrix.Down));
Vector3D perpendicularDiagonal;
if(perpendicular.IsValid())
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,perpendicular,0.15);
else
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Left,0.15);
hit=TryRaycast(RaycastDistance,perpendicularDiagonal);
if(!hit.IsEmpty())
{
Vector3D currentHit=hit.HitPosition.Value;
if(perpendicular.IsValid())
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,-perpendicular,0.15);
else
perpendicularDiagonal=Vector3D.Lerp(RC.WorldMatrix.Down,RC.WorldMatrix.Right,0.15);
hit=TryRaycast(RaycastDistance,perpendicularDiagonal);
if(!hit.IsEmpty())
SurfaceBank=hit.HitPosition.Value-currentHit;
}
}

if(Time&gt;=1.0)
{
RaycastDistanceUsed=0;
Time=0;
}
}
MyDetectedEntityInfo TryRaycast(double distance,Vector3D worldDirection)
{
MyDetectedEntityInfo result=new MyDetectedEntityInfo();
if(RaycastDistanceUsed+distance&lt;=2000)
{
double minAngle=double.MaxValue;
CameraIndex=-1;
Vector3D localDirection=-Vector3D.Normalize(Vector3D.TransformNormal(worldDirection,MatrixD.Transpose(RC.WorldMatrix)));
for(int i=0;i&lt;Cameras.Count;++i)
{
double temp=localDirection.Dot(Cameras[i].LocalPosition);
if(temp&lt;minAngle&amp;&amp;Cameras[i].Camera.IsWorking&amp;&amp;Cameras[i].Camera.CanScan(distance))
{
minAngle=temp;
CameraIndex=i;
}
}
if(CameraIndex&gt;=0)
{
RaycastDistanceUsed+=distance;
localDirection=Vector3D.Normalize(Vector3D.TransformNormal(worldDirection,MatrixD.Transpose(Cameras[CameraIndex].Camera.WorldMatrix)));
result=Cameras[CameraIndex].Camera.Raycast(distance,localDirection);

}
}
return result;
}
}

class TractionControlSystem : BaseClass
{
class SuspensionWrapper
{
public IMyMotorSuspension Obj {get;}
public Base6Directions.Direction OrientationInVehicle {get;}
public Vector3D WheelPositionAgainstCoM {get;set;}
public Vector3D WheelPositionAgainstRef {get;set;}
public double WheelPositionAgainstVelocity {get;set;}
public double HeightOffsetMin {get;}
public double HeightOffsetMax {get;}
public double HeightOffsetRange {get;}
public double WheelRadius {get;}
public double PropulsionSign {get;}
public bool IsSubgrid {get;}
public double LeftMaxSteerAngle;
public double RightMaxSteerAngle;
public double TurnRadiusCurrent;
public double TurnRadiusLeftMin;
public double TurnRadiusRightMin;
public double WeightDistributionRatio;
public double BrakeFrictionDistributionRatio;
public double SpeedLimit {get {return Obj.GetValueFloat("Speed Limit");} set {Obj.SetValueFloat("Speed Limit",(float)value);}}
public double PropulsionOverride {get {return Obj.GetValueFloat("Propulsion override");} set {Obj.SetValueFloat("Propulsion override",(float)value);}}
public double SteerOverrie {get {return Obj.GetValueFloat("Steer override");} set {Obj.SetValueFloat("Steer override",(float)value);}}
public double Power {get {return Obj.Power;} set {Obj.Power=(float)value;}}
public double Friction {get {return Obj.Friction;} set {Obj.Friction=(float)value;}}
public double Strength {get {return Obj.Strength;} set {Obj.Strength=(float)value;}}
public double Height {get {return Obj.Height;} set {Obj.Height=(float)value;}}
public double MaxSteerAngle {get {return Obj.MaxSteerAngle;} set {Obj.MaxSteerAngle=(float)value;}}
public SuspensionWrapper(IMyMotorSuspension suspension,Base6Directions.Direction orientation,bool subgrid=false)
{
Obj=suspension;
OrientationInVehicle=orientation;
IsSubgrid=subgrid;
if(orientation==Base6Directions.Direction.Left)
PropulsionSign=-1;
else if(orientation==Base6Directions.Direction.Right)
PropulsionSign=1;
HeightOffsetMin=suspension.GetMinimum&lt;float&gt;("Height");
HeightOffsetMax=suspension.GetMaximum&lt;float&gt;("Height");
HeightOffsetRange=HeightOffsetMax-HeightOffsetMin;
if(suspension.CubeGrid.GridSizeEnum==MyCubeSize.Small)
{
if(suspension.BlockDefinition.SubtypeName.Contains("5x5")) WheelRadius=1.25;
else if(suspension.BlockDefinition.SubtypeName.Contains("3x3")) WheelRadius=0.75;
else if(suspension.BlockDefinition.SubtypeName.Contains("2x2")) WheelRadius=0.5;// modded
else if(suspension.BlockDefinition.SubtypeName.Contains("1x1")) WheelRadius=0.25;
else // some other modded wheels
WheelRadius=suspension.IsAttached ? suspension.Top.WorldVolume.Radius*0.79/MathHelper.Sqrt2 : 0;
}
else
{
if(suspension.BlockDefinition.SubtypeName.Contains("5x5")) WheelRadius=6.25;
else if(suspension.BlockDefinition.SubtypeName.Contains("3x3")) WheelRadius=3.75;
else if(suspension.BlockDefinition.SubtypeName.Contains("2x2")) WheelRadius=2.5;// modded
else if(suspension.BlockDefinition.SubtypeName.Contains("1x1")) WheelRadius=1.25;
else // some other modded wheels
WheelRadius=suspension.IsAttached ? suspension.Top.WorldVolume.Radius*0.79/MathHelper.Sqrt2 : 0;
}
}
public Vector3 GetVelocityAtPoint(IMyShipController anchor)
{
Vector3 value=Vector3D.Zero;
if(Obj.IsAttached)
{
Vector3 v=Obj.Top.GetPosition()-anchor.CenterOfMass;
value=anchor.GetShipVelocities().LinearVelocity+anchor.GetShipVelocities().AngularVelocity.Cross(v);
}
return value;
}
public bool AddTopPart()
{
Obj.ApplyAction("Add Top Part");
return Obj.IsAttached;
}
public void UpdateLocalPosition(IMyShipController anchor,Vector3D focalPointRef)
{
if(Obj.IsAttached)
{
Vector3D temp1,temp2;
temp2=Obj.Top.GetPosition()-anchor.CenterOfMass;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
WheelPositionAgainstCoM=temp1;
temp2=Obj.Top.GetPosition()-focalPointRef;
temp1.X=anchor.WorldMatrix.Right.Dot(temp2);
temp1.Y=anchor.WorldMatrix.Up.Dot(temp2);
temp1.Z=anchor.WorldMatrix.Backward.Dot(temp2);
WheelPositionAgainstRef=temp1;
}
else
WheelPositionAgainstRef=WheelPositionAgainstCoM=Vector3D.Zero;
}
public void UpdatePositionVelocity(Vector3D velocity)
{
if(Obj.IsAttached)
WheelPositionAgainstVelocity=velocity.Dot(WheelPositionAgainstCoM);
else
WheelPositionAgainstVelocity=0;
}
}
List&lt;SuspensionWrapper&gt; WheelSuspensions;
List&lt;IMyShipController&gt; SlaveShipControllers;
GridDynamicsWatcher Dynamics;
GravityWatcher Gravity;
OrientationComputer Orientation;
CameraScheduler Camera;
IInputData UserInput;
int FCycleNum;
int TCycleNum;
int HCycleNum;
int StrCycleNum;
int SpdCycleNum;
int SteCycleNum;
int BrCycleNum;
int WlAdrCycleNum;
IEnumerator&lt;bool&gt; FStMachine;
IEnumerator&lt;bool&gt; TStMachine;
IEnumerator&lt;bool&gt; HStMachine;
IEnumerator&lt;bool&gt; StrStMachine;
IEnumerator&lt;bool&gt; SpdStMachine;
IEnumerator&lt;bool&gt; SteStMachine;
IEnumerator&lt;bool&gt; BrStMachine;
IEnumerator&lt;bool&gt; WlAdrStMachine;
double CurrentTorque;
double PropulsionAmp=1;
double GridSprungWeight;
double StrenghtDelta=2;
double HeightOffsetDelta=0.1;
double _Strenght;
double _HeightOffset;
bool BusyWithHeight;
bool BusyWithStrenght;
bool EnableState;
string SubgridWheelsGroupName;

public bool Enabled;
new public bool Ready
{
get
{
return (this as BaseClass).Ready
&amp;&amp; UserInput.Ready&amp;&amp;Dynamics.Ready&amp;&amp;Gravity.Ready&amp;&amp;Orientation.Ready
&amp;&amp; WheelSuspensions.Count&gt;0;
}
}
public bool Busy {get {return BusyWithHeight||BusyWithStrenght;}}
public bool UseAdaptiveSteering;
public bool UseAckermannSteering;
public bool UseDASAirShock;
public bool UseHillDescentControl;
public bool ForceFullOverride;
public int FrictionSkipCycles;
public int TorqueSkipCycles;// 'power' property.
public int HeightOfstSkipCycles;
public int StrenghtSkipCycles;
public int SpeedLimitSkipCycles;
public int SteerSkipCycles;
public int BrakesSkipCycles;
public int WheelAddSkipCycles;
public double PowerLimit;
public double ForwardSpeedLimitKPH;
public double BackwardSpeedLimitKPH;
public double MaxForwardAcceleration;
public double MaxBackwardAcceleration;
public double MaxSteerAngleDegree;
public double Strenght
{
get {return _Strenght;}
set
{
StrenghtDelta=Math.Abs(value-_Strenght);
_Strenght=value;
}
}
public double HeightOffset
{
get {return _HeightOffset;}
set
{
if(value&gt;=0)
HeightOffsetDelta=Math.Abs(value-_HeightOffset);
_HeightOffset=value;
}
}
public double ValueChangeRate;
public double VehicleTurnRadiusRight {get;private set;}
public double VehicleTurnRadiusLeft {get;private set;}
public double CoMToWheelsBaseAngle {get;private set;}
public AckermannFocalPointRef AckFocal;
public TractionControlSystem(Program parent,GridDynamicsWatcher dynamics,GravityWatcher gravity,
OrientationComputer orientation,CameraScheduler camera,string sbgrdWhlGrpNm="",
int fCycles=0,int fOffset=0,int tCycles=0,int tOffset=0,int hCycles=0,int hOffset=0,
int strCycles=0,int strOffset=0,int sCycles=0,int sOffset=0,int steCycles=0,int steOffset=0,
int bCycles=0,int bOffset=0,int wCycles=0,int wOffset=0) : base(parent)
{
Dynamics=dynamics;
Gravity=gravity;
Orientation=orientation;
Camera=camera;
SubgridWheelsGroupName=sbgrdWhlGrpNm;
FrictionSkipCycles=fCycles;
FCycleNum=fOffset;
TorqueSkipCycles=tCycles;
TCycleNum=tOffset;
HeightOfstSkipCycles=hCycles;
HCycleNum=hOffset;
StrenghtSkipCycles=strCycles;
StrCycleNum=strOffset;
SpeedLimitSkipCycles=sCycles;
SpdCycleNum=sOffset;
SteerSkipCycles=steCycles;
SteCycleNum=steOffset;
BrakesSkipCycles=bCycles;
BrCycleNum=bOffset;
WheelAddSkipCycles=wCycles;
WlAdrCycleNum=wOffset;
WheelSuspensions=new List&lt;SuspensionWrapper&gt;();
SlaveShipControllers=new List&lt;IMyShipController&gt;();
InitStateMachines();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
WheelSuspensions.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
List&lt;IMyMotorSuspension&gt; allWheels=new List&lt;IMyMotorSuspension&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allWheels,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var suspension in allWheels)
{
Base6Directions.Direction blockOrientation=RC.Orientation.TransformDirectionInverse(suspension.Orientation.Up);
if(blockOrientation==Base6Directions.Direction.Left||blockOrientation==Base6Directions.Direction.Right)
{
suspension.AirShockEnabled=!UseDASAirShock;
SuspensionWrapper newSuspensionData=new SuspensionWrapper(suspension,blockOrientation);
newSuspensionData.PropulsionOverride=0;
newSuspensionData.SteerOverrie=0;
WheelSuspensions.Add(newSuspensionData);
}
}

IMyBlockGroup subgridWheelsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(SubgridWheelsGroupName);
if(subgridWheelsGroup!=null)
{
SuspensionWrapper newSuspension;
List&lt;IMyCubeGrid&gt; wheeledSubgrids=new List&lt;IMyCubeGrid&gt;();
List&lt;IMyShipController&gt; slaveControllers=new List&lt;IMyShipController&gt;();
allWheels.Clear();
subgridWheelsGroup.GetBlocksOfType(allWheels);
foreach(var suspension in allWheels)
{
if(suspension.CubeGrid!=Parent.Me.CubeGrid)
{
if(suspension.WorldMatrix.Up.Dot(RC.WorldMatrix.Left)&gt;0.7)
{
suspension.AirShockEnabled=!UseDASAirShock;
newSuspension=new SuspensionWrapper(suspension,Base6Directions.Direction.Left,true);
WheelSuspensions.Add(newSuspension);
if(wheeledSubgrids.IndexOf(suspension.CubeGrid)==-1)
wheeledSubgrids.Add(suspension.CubeGrid);
}
else if(suspension.WorldMatrix.Up.Dot(RC.WorldMatrix.Right)&gt;0.7)
{
suspension.AirShockEnabled=!UseDASAirShock;
newSuspension=new SuspensionWrapper(suspension,Base6Directions.Direction.Right,true);
WheelSuspensions.Add(newSuspension);
if(wheeledSubgrids.IndexOf(suspension.CubeGrid)==-1)
wheeledSubgrids.Add(suspension.CubeGrid);
}
}
}
foreach(var grid in wheeledSubgrids)
{
slaveControllers.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(slaveControllers,block =&gt; block.CubeGrid==grid&amp;&amp;!Utils.IsIgnore(block));
foreach(var controller in slaveControllers)
if(SlaveShipControllers.IndexOf(controller)==-1)
SlaveShipControllers.Add(controller);
}
}
UpdateSuspensionCofiguration();
}
}
public void UpdateSprungWeight(double gridPhysMass)
{
double unsprungMass=0;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
unsprungMass+=suspension.Obj.Top.Mass;
GridSprungWeight=(gridPhysMass-unsprungMass)*Gravity.Magnitude;
}
public void UpdateSuspensionCofiguration()
{
double maxL=0;
double maxR=0;
double wheelFocus;
double rearHalfZ=double.MinValue;
double frontHalfZ=double.MaxValue;
double wheelsBaseZ;
double weightRearRatio=0;
double weightFrontRatio=0;
double weightsSum=0;
double comHeight=0;

VehicleTurnRadiusLeft=VehicleTurnRadiusRight=0;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
{
switch(AckFocal)
{
case AckermannFocalPointRef.CoM:
suspension.UpdateLocalPosition(RC,RC.CenterOfMass);
break;
case AckermannFocalPointRef.RC:
suspension.UpdateLocalPosition(RC,RC.GetPosition());
break;
case AckermannFocalPointRef.BSphere:
suspension.UpdateLocalPosition(RC,RC.CubeGrid.WorldVolume.Center);
break;
}
if(Math.Sign(suspension.WheelPositionAgainstRef.Z)!=Math.Sign(suspension.WheelPositionAgainstCoM.Z))
suspension.Obj.InvertSteer=true;
else
suspension.Obj.InvertSteer=false;

comHeight=Math.Max(comHeight,-suspension.WheelPositionAgainstCoM.Y+suspension.WheelRadius
- Math.Max(_HeightOffset,suspension.HeightOffsetMin));
if(suspension.OrientationInVehicle==Base6Directions.Direction.Left)
maxL=Math.Max(maxL,-suspension.WheelPositionAgainstCoM.X);
else if(suspension.OrientationInVehicle==Base6Directions.Direction.Right)
maxR=Math.Max(maxR,suspension.WheelPositionAgainstCoM.X);

if(suspension.Obj.Steering)
{
wheelFocus=Math.Abs(suspension.WheelPositionAgainstRef.Z/Math.Tan(MathHelperD.ToRadians(MaxSteerAngleDegree)));
if(VehicleTurnRadiusLeft&gt;suspension.WheelPositionAgainstRef.X-wheelFocus)
VehicleTurnRadiusLeft=suspension.WheelPositionAgainstRef.X-wheelFocus;
if(VehicleTurnRadiusRight&lt;suspension.WheelPositionAgainstRef.X+wheelFocus)
VehicleTurnRadiusRight=suspension.WheelPositionAgainstRef.X+wheelFocus;
}
rearHalfZ=Math.Max(rearHalfZ,suspension.WheelPositionAgainstCoM.Z);
frontHalfZ=Math.Min(frontHalfZ,suspension.WheelPositionAgainstCoM.Z);
}
CoMToWheelsBaseAngle=Math.Atan(comHeight/Math.Min(maxL,maxR));
wheelsBaseZ=rearHalfZ-frontHalfZ;
weightRearRatio=Math.Abs(frontHalfZ/wheelsBaseZ);
weightFrontRatio=Math.Abs(rearHalfZ/wheelsBaseZ);
double frictionLowerLever=0.5*rearHalfZ/-frontHalfZ;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.Steering)
{
double temp1=(VehicleTurnRadiusLeft-suspension.WheelPositionAgainstRef.X);
double temp2=(VehicleTurnRadiusRight-suspension.WheelPositionAgainstRef.X);
suspension.LeftMaxSteerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/temp1));
suspension.RightMaxSteerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/temp2));
suspension.TurnRadiusLeftMin=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+temp1*temp1);
suspension.TurnRadiusRightMin=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+temp2*temp2);
}
else
{
suspension.LeftMaxSteerAngle=suspension.RightMaxSteerAngle=0;
suspension.TurnRadiusCurrent=suspension.TurnRadiusLeftMin=suspension.TurnRadiusRightMin=1;
}
if(wheelsBaseZ&gt;0.1)
{
if(suspension.WheelPositionAgainstCoM.Z&gt;=0)
suspension.WeightDistributionRatio=Math.Abs((suspension.WheelPositionAgainstCoM.Z-frontHalfZ)/wheelsBaseZ*weightRearRatio);
else
suspension.WeightDistributionRatio=Math.Abs((rearHalfZ-suspension.WheelPositionAgainstCoM.Z)/wheelsBaseZ*weightFrontRatio);

suspension.BrakeFrictionDistributionRatio=frictionLowerLever+(1-frictionLowerLever)*(suspension.WheelPositionAgainstCoM.Z-frontHalfZ)/wheelsBaseZ;
}
else
{
suspension.WeightDistributionRatio=1;
suspension.BrakeFrictionDistributionRatio=1;
}
weightsSum+=suspension.WeightDistributionRatio;
}
foreach(var suspension in WheelSuspensions)
{
suspension.WeightDistributionRatio/=weightsSum;
}
}
public void ReleaseControl()
{
foreach(var suspension in WheelSuspensions)
{
suspension.Power=100*PowerLimit;
suspension.Friction=100;
suspension.SpeedLimit=ForwardSpeedLimitKPH;
if(UseAckermannSteering)
suspension.MaxSteerAngle=MathHelperD.ToRadians(MaxSteerAngleDegree);
suspension.PropulsionOverride=0;
suspension.SteerOverrie=0;
suspension.Obj.AirShockEnabled=true;
}
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!FStMachine.MoveNext()) FStMachine=UpdateFriction();
if(!TStMachine.MoveNext()) TStMachine=UpdateTorque();
if(!HStMachine.MoveNext()) HStMachine=UpdateHeight();
if(!StrStMachine.MoveNext()) StrStMachine=UpdateStrenght();
if(!SpdStMachine.MoveNext()) SpdStMachine=UpdateSpeedLim();
if(!SteStMachine.MoveNext()) SteStMachine=UpdateSteerAngl();
if(!BrStMachine.MoveNext()) BrStMachine=UpdateBrakes();
if(!WlAdrStMachine.MoveNext()) WlAdrStMachine=UpdateWheelAdder();
}
else if(EnableState)
{
ReleaseControl();
InitStateMachines();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateFriction()
{
int temp=FrictionSkipCycles-1;
for(;FCycleNum&lt;temp;++FCycleNum)
yield return true;
FCycleNum=0;
// calc. friction modifiers to get proper total friction point against velocity and CoM
double baseFriction;
double driftAngleSinThreshold=0.017;
double wheelsBaseZ=1,frictionLowerLever=1,driftAngleSin=0;
double rearHalfZ=double.MinValue;
double frontHalfZ=double.MaxValue;
double minBrakeFriction=double.MaxValue;
if(Dynamics.Velocity.Scalar&gt;5)
{
Vector3D velocityLocal=Vector3D.TransformNormal(Dynamics.Velocity.Vector,MatrixD.Transpose(RC.WorldMatrix));
velocityLocal.Y=0;
velocityLocal.Normalize();
driftAngleSin=Math.Abs(velocityLocal.Dot(Vector3D.Right));
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
suspension.UpdatePositionVelocity(-velocityLocal);
rearHalfZ=Math.Max(rearHalfZ,suspension.WheelPositionAgainstVelocity);
frontHalfZ=Math.Min(frontHalfZ,suspension.WheelPositionAgainstVelocity);
minBrakeFriction=Math.Min(minBrakeFriction,suspension.BrakeFrictionDistributionRatio);
}
}
wheelsBaseZ=rearHalfZ-frontHalfZ;
frictionLowerLever=(0.95-MathHelperD.Clamp(driftAngleSin*2,0,0.9))*rearHalfZ/-frontHalfZ;
}
if(wheelsBaseZ==0)
wheelsBaseZ=1;
baseFriction=100-35*Math.Abs(UserInput.AD);
if(driftAngleSin&gt;driftAngleSinThreshold)
baseFriction*=(1-MathHelperD.Clamp(driftAngleSin*2,0,0.5));
if(FrictionSkipCycles&gt;0) yield return true;

double friction;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
friction=baseFriction;
if(Dynamics.Velocity.Scalar&gt;0.5)
{
if(RC.HandBrake||UserInput.CSpacebar&gt;0) // friction rebalance at braking
friction*=suspension.BrakeFrictionDistributionRatio;
else if(driftAngleSin&gt;driftAngleSinThreshold&amp;&amp;Dynamics.Velocity.SideAbs&gt;5) // friction rebalance against velocity
friction*=frictionLowerLever+(1-frictionLowerLever)*(suspension.WheelPositionAgainstVelocity-frontHalfZ)/wheelsBaseZ;
if(UserInput.AD!=0&amp;&amp;UserInput.WS&lt;0&amp;&amp;UserInput.CSpacebar&gt;0&amp;&amp;suspension.WheelPositionAgainstCoM.Z&gt;0&amp;&amp;Dynamics.Velocity.Forward&gt;8)
friction*=minBrakeFriction*1.4;
friction=Math.Max(friction,5);
}
suspension.Friction=friction;
}
}
}
IEnumerator&lt;bool&gt; UpdateTorque()
{
int temp=TorqueSkipCycles-1;
for(;TCycleNum&lt;temp;++TCycleNum)
{
RampUpDownTorque();
AmplifyPropulsion();
yield return true;
}
TCycleNum=0;

double maxTurnRadius=1;
foreach(var suspension in WheelSuspensions)
if(suspension.Obj.IsAttached)
maxTurnRadius=Math.Max(maxTurnRadius,suspension.TurnRadiusCurrent);
if(TorqueSkipCycles&gt;0)
{
yield return true;
RampUpDownTorque();
AmplifyPropulsion();
}

RampUpDownTorque();
AmplifyPropulsion();
double torque;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
torque=CurrentTorque*PowerLimit;
if(Dynamics.Velocity.Scalar&gt;0.5)
torque*=suspension.TurnRadiusCurrent/maxTurnRadius;
torque=Math.Min(torque,100*PowerLimit);
suspension.Power=torque;

if(Dynamics.Velocity.VerticalAbs&lt;1) // !!workaround: another Keen's bug
{
double speedLimitKPH=Dynamics.Velocity.Forward&gt;0 ? ForwardSpeedLimitKPH : BackwardSpeedLimitKPH;
double propulsion=0;
if(UseHillDescentControl&amp;&amp;Dynamics.Velocity.LateralAbs*3.6&gt;speedLimitKPH&amp;&amp;!(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
propulsion=suspension.PropulsionSign*Math.Sign(Dynamics.Velocity.Forward);
else if(suspension.IsSubgrid||ForceFullOverride)
propulsion=torque/100*suspension.PropulsionSign*UserInput.WS*PropulsionAmp;
propulsion=Math.Min(propulsion,PowerLimit);
suspension.PropulsionOverride=propulsion;
}
else
suspension.PropulsionOverride=0;
}
}
}
IEnumerator&lt;bool&gt; UpdateHeight()
{
for(;HCycleNum&lt;HeightOfstSkipCycles;++HCycleNum)
yield return true;
HCycleNum=0;

double currentHeightOffset;
double clampedTargetHeightOffset;
double temp;
double delta=HeightOffsetDelta/ValueChangeRate*(HeightOfstSkipCycles+1);
BusyWithHeight=false;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
currentHeightOffset=suspension.Height;
clampedTargetHeightOffset=MathHelperD.Clamp(_HeightOffset,suspension.HeightOffsetMin,suspension.HeightOffsetMax);
temp=Math.Round(clampedTargetHeightOffset-currentHeightOffset,2);
if(temp&lt;0)
{
currentHeightOffset=Math.Max(currentHeightOffset-delta,clampedTargetHeightOffset);
suspension.Height=currentHeightOffset;
BusyWithHeight=true;
}
else if(temp&gt;0)
{
currentHeightOffset=Math.Min(currentHeightOffset+delta,clampedTargetHeightOffset);
suspension.Height=currentHeightOffset;
BusyWithHeight=true;
}
}
}
}
IEnumerator&lt;bool&gt; UpdateStrenght()
{
for(;StrCycleNum&lt;StrenghtSkipCycles;++StrCycleNum)
yield return true;
StrCycleNum=0;

double currentStrenght;
double strenght;
double temp;
double delta=StrenghtDelta/ValueChangeRate*(HeightOfstSkipCycles+1);
BusyWithStrenght=false;
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(_Strenght&gt;=0)
strenght=_Strenght;
else if(GridSprungWeight&gt;0)
{
strenght=Math.Sqrt(suspension.WeightDistributionRatio*GridSprungWeight);
if(suspension.Obj.CubeGrid.GridSizeEnum==MyCubeSize.Small)
{
if(suspension.Obj.BlockDefinition.SubtypeName.Contains("5x5"))
strenght/=18.5;
else
strenght/=15;
}
else
{
if(suspension.Obj.BlockDefinition.SubtypeName.Contains("5x5"))
strenght/=55;
else
strenght/=52.5;
}
}
else
strenght=5;

currentStrenght=suspension.Strength;
double fallVelocityExceeding=RC.WorldMatrix.Down.Dot(suspension.GetVelocityAtPoint(RC))/10;
if(fallVelocityExceeding&gt;1&amp;&amp;UseDASAirShock)
currentStrenght=strenght*fallVelocityExceeding*fallVelocityExceeding;
else if(Dynamics.Velocity.Up&gt;1&amp;&amp;UseDASAirShock)
currentStrenght=strenght;
else
{
temp=Math.Round(strenght-currentStrenght,2);
if(temp&lt;0)
{
currentStrenght=Math.Max(currentStrenght-delta,strenght);
BusyWithStrenght=true;
}
else if(temp&gt;0)
{
currentStrenght=Math.Min(currentStrenght+delta,strenght);
BusyWithStrenght=true;
}
}
if(Math.Abs(UserInput.AD)&lt;0.2) // !!workaround: steering bug
suspension.Strength=currentStrenght;
}
}
}
IEnumerator&lt;bool&gt; UpdateSpeedLim()
{
for(;SpdCycleNum&lt;SpeedLimitSkipCycles;++SpdCycleNum)
yield return true;
SpdCycleNum=0;

if(UserInput.WS!=0)
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(UserInput.CSpacebar&lt;0)
suspension.SpeedLimit=360*Math.Abs(UserInput.WS);
else if(Dynamics.Velocity.Forward&gt;0)
suspension.SpeedLimit=ForwardSpeedLimitKPH*Math.Abs(UserInput.WS);
else
suspension.SpeedLimit=BackwardSpeedLimitKPH*Math.Abs(UserInput.WS);
}
}
}
IEnumerator&lt;bool&gt; UpdateSteerAngl()
{
for(;SteCycleNum&lt;SteerSkipCycles;++SteCycleNum)
yield return true;
SteCycleNum=0;

double safeTurnRadiusRight=0;
double safeTurnRadiusLeft=0;
double turnCath=0;
double steerAngle=0;
bool adaptiveSteering;
if((UserInput.AD!=0&amp;&amp;UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&gt;0)||Dynamics.Velocity.LateralAbs&lt;0.5)
adaptiveSteering=false;
else
adaptiveSteering=UseAdaptiveSteering;
if(adaptiveSteering&amp;&amp;Gravity.Magnitude&gt;0)
{
double pow=Camera.SurfaceType==MyDetectedEntityType.LargeGrid ? 2 : 1.5;
if(UserInput.AD&lt;0)
safeTurnRadiusLeft=Math.Pow(Dynamics.Velocity.LateralAbs,pow)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle+Orientation.Roll,1e-6,MathHelperD.Pi/2.1)));
else if(UserInput.AD&gt;0)
safeTurnRadiusRight=Math.Pow(Dynamics.Velocity.LateralAbs,pow)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle-Orientation.Roll,1e-6,MathHelperD.Pi/2.1)));
}
foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.Steering&amp;&amp;suspension.Obj.IsAttached)
{
if(UserInput.AD!=0&amp;&amp;UseAckermannSteering)
{
if(adaptiveSteering)
{
if(UserInput.AD&gt;0)
turnCath=Math.Max(VehicleTurnRadiusRight,safeTurnRadiusRight)-suspension.WheelPositionAgainstRef.X;
else
turnCath=Math.Min(VehicleTurnRadiusLeft,-safeTurnRadiusLeft)-suspension.WheelPositionAgainstRef.X;
steerAngle=Math.Abs(Math.Atan(suspension.WheelPositionAgainstRef.Z/turnCath));
suspension.TurnRadiusCurrent=Math.Sqrt(suspension.WheelPositionAgainstRef.Z*suspension.WheelPositionAgainstRef.Z+turnCath*turnCath);
}
else
{
if(UserInput.AD&gt;0)
{
steerAngle=suspension.RightMaxSteerAngle;
suspension.TurnRadiusCurrent=suspension.TurnRadiusRightMin;
}
else
{
steerAngle=suspension.LeftMaxSteerAngle;
suspension.TurnRadiusCurrent=suspension.TurnRadiusLeftMin;
}
}
suspension.MaxSteerAngle=steerAngle;
}
else
suspension.TurnRadiusCurrent=1;
if(suspension.IsSubgrid||ForceFullOverride)
suspension.SteerOverrie=-Math.Sign(suspension.WheelPositionAgainstRef.Z)*UserInput.AD;
}
}
}
IEnumerator&lt;bool&gt; UpdateBrakes()
{
int temp=BrakesSkipCycles-1;
for(;BrCycleNum&lt;temp;++BrCycleNum)
yield return true;
BrCycleNum=0;

foreach(var suspension in WheelSuspensions)
{
if(suspension.Obj.IsAttached)
{
if(suspension.WheelPositionAgainstCoM.Z&gt;0&amp;&amp;UserInput.WS!=0&amp;&amp;!RC.HandBrake)
suspension.Obj.Brake=false;
else
suspension.Obj.Brake=true;
}
}
if(BrakesSkipCycles&gt;0) yield return true;
// If there slave controllers on wheeled subgrid-handle handbrakes
if(SlaveShipControllers.Count&gt;0)
{
if(UserInput.CSpacebar&gt;0||RC.HandBrake)
foreach(var sc in SlaveShipControllers)
sc.HandBrake=true;
else
foreach(var sc in SlaveShipControllers)
sc.HandBrake=false;
}
}
IEnumerator&lt;bool&gt; UpdateWheelAdder()
{
for(;WlAdrCycleNum&lt;WheelAddSkipCycles;++WlAdrCycleNum)
yield return true;
WlAdrCycleNum=0;

foreach(var suspension in WheelSuspensions)
{
if(!suspension.Obj.IsAttached)
{
for(int i=0;i&lt;=10;++i)
{
if(suspension.AddTopPart())
break;
yield return true;
suspension.Height=suspension.HeightOffsetMin+suspension.HeightOffsetRange/10.0*i;
}
}
}
}
void RampUpDownTorque()
{
if((Dynamics.Acceleration.AvrEMA&lt;MaxForwardAcceleration&amp;&amp;UserInput.WS&lt;0)
|| (Dynamics.Acceleration.AvrEMA&lt;MaxBackwardAcceleration&amp;&amp;UserInput.WS&gt;0))
CurrentTorque=Math.Min(CurrentTorque*1.05,100);
else
CurrentTorque=Math.Max(CurrentTorque*0.9,5);
}
void AmplifyPropulsion()
{
if(Dynamics.Velocity.LateralAbs*3.6&lt;Math.Abs(UserInput.WS)*ForwardSpeedLimitKPH*0.9&amp;&amp;UserInput.WS&lt;0)
PropulsionAmp=Math.Min(PropulsionAmp*1.01,360.0/ForwardSpeedLimitKPH);
else if(Dynamics.Velocity.LateralAbs*3.6&lt;Math.Abs(UserInput.WS)*BackwardSpeedLimitKPH*0.9&amp;&amp;UserInput.WS&gt;0)
PropulsionAmp=Math.Min(PropulsionAmp*1.01,360.0/BackwardSpeedLimitKPH);
else
PropulsionAmp=Math.Max(PropulsionAmp*0.95,1);
}
void InitStateMachines()
{
FStMachine=UpdateFriction();
TStMachine=UpdateTorque();
HStMachine=UpdateHeight();
StrStMachine=UpdateStrenght();
SpdStMachine=UpdateSpeedLim();
SteStMachine=UpdateSteerAngl();
BrStMachine=UpdateBrakes();
WlAdrStMachine=UpdateWheelAdder();
}
}

class FallDampeningSystem : BaseClass
{
int CycleNum;
int AltitudeAge;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
List&lt;IMyThrust&gt; Thrusters;
GridDynamicsWatcher Dynamics;
GravityWatcher Gravity;
GridMassWatcher Mass;
CameraScheduler Camera;
IInputData UserInput;
double Altitude;
double AltitudePrev;
double EmpiricDescentVeloc;
double Time;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Thrusters.Count&gt;0;}}
public bool EnoughThrust {get;set;}
public bool UseJumpJets;
public int SkipCycles;
public double SafeFallVelocity;
public double dT=0.016;
public FallDampeningSystem(Program parent,GridDynamicsWatcher dynamics,GravityWatcher gravity,
GridMassWatcher masses,CameraScheduler camera,IInputData userInput=null,
int skipCycles=0,int skipOffset=0)
: base(parent)
{
Dynamics=dynamics;
Gravity=gravity;
Mass=masses;
Camera=camera;
UserInput=userInput;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Thrusters=new List&lt;IMyThrust&gt;();
StMachine=UpdateIterator();
EnoughThrust=true;
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Thrusters.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Base6Directions.Direction blockOrientation;
List&lt;IMyThrust&gt; allThrusters=new List&lt;IMyThrust&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allThrusters,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var thruster in allThrusters)
{
blockOrientation=RC.Orientation.TransformDirectionInverse(thruster.Orientation.Forward);
if(blockOrientation==Base6Directions.Direction.Down)
Thrusters.Add(thruster);
}
ReleaseControl();
}
}
public void ReleaseControl()
{
foreach(var thruster in Thrusters)
thruster.ThrustOverride=0;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
{
Time+=dT;
if(Camera.Ready&amp;&amp;Camera.DataAge==0)
{
EmpiricDescentVeloc=(AltitudePrev-Camera.Altitude)/Time;
Time=0;
AltitudePrev=Altitude=Camera.Altitude;
AltitudeAge=0;
}
else
IntegrateAltitude();
yield return true;
}
CycleNum=0;

Time+=dT;
if(Camera.Ready&amp;&amp;Camera.DataAge==0)
{
EmpiricDescentVeloc=(AltitudePrev-Camera.Altitude)/Time;
Time=0;
AltitudePrev=Altitude=Camera.Altitude;
AltitudeAge=0;
}
else if(AltitudeAge&gt;Camera.SkipCycles*3)
{
double alt=0;
RC.TryGetPlanetElevation(MyPlanetElevation.Surface,out alt);
alt-=RC.CubeGrid.WorldVolume.Radius;
EmpiricDescentVeloc=(AltitudePrev-alt)/Time;
Time=0;
AltitudePrev=Altitude=alt;
AltitudeAge=0;
}
else
IntegrateAltitude();
double discriminantOver4=-1;
double fallVelocity=0;
if(Gravity.Magnitude&gt;0)
{
double totalThrustForce=0;
foreach(var thruster in Thrusters)
if(thruster.IsWorking)
totalThrustForce+=thruster.MaxEffectiveThrust;
double liftThrust=totalThrustForce/Mass.Masses.PhysicalMass-Gravity.Magnitude;
EnoughThrust=liftThrust&gt;0;
if(Dynamics.Velocity.Down&gt;SafeFallVelocity)
fallVelocity=Dynamics.Velocity.Down*0.3+EmpiricDescentVeloc*0.7;
else
fallVelocity=Dynamics.Velocity.Down;
discriminantOver4=fallVelocity*fallVelocity-liftThrust*2*Altitude;
}
if((discriminantOver4&gt;=0&amp;&amp;fallVelocity&gt;SafeFallVelocity)||(UserInput.CSpacebar&gt;0&amp;&amp;UseJumpJets))
foreach(var thruster in Thrusters)
thruster.ThrustOverridePercentage=1;
else if(UserInput!=null)
foreach(var thruster in Thrusters)
thruster.ThrustOverride=0.01f;
}
void IntegrateAltitude()
{
Altitude+=Dynamics.Velocity.Up*dT;
++AltitudeAge;
}
}

class GyroStabilisationAssisting : BaseClass
{
List&lt;IMyGyro&gt; Gyros;
GravityWatcher Gravity;
OrientationComputer OrientationPrime;
OrientationComputer OrientationSecond;
CameraScheduler Camera;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
PID PitchPID;
PID RollPID;
Vector3D AnglesPrev;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
double Time;
bool EnableState;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Gyros.Count&gt;0;}}
public bool IsAllGyrosWorking {get;set;}
public int SkipCycles;
public double dT=0.016;
public double MinGyroPower=0.2;
public double NaturalPitchDegree;
public double VehicleTurnRadiusRight;
public double VehicleTurnRadiusLeft;
public double CoMToWheelsBaseAngle;
public GyroStabilisationAssisting(Program parent,GravityWatcher gravity,
OrientationComputer orientation,CameraScheduler camera,GridDynamicsWatcher dynamics,
int skipCycles=0,int skipOffset=0) : base(parent)
{
Gravity=gravity;
OrientationPrime=orientation;
Camera=camera;
Dynamics=dynamics;
SkipCycles=skipCycles;
CycleNum=skipOffset;
Gyros=new List&lt;IMyGyro&gt;();
OrientationSecond=new OrientationComputer(parent);
PitchPID=new PID(3,0,0.33);
RollPID=new PID(3,0,0.33);
StMachine=UpdateIterator();
IsAllGyrosWorking=true;
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
Gyros.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Parent.GridTerminalSystem.GetBlocksOfType(Gyros,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
OrientationSecond.RC=RC;
}
}
public void ReleaseControl()
{
foreach(var gyro in Gyros)
{
gyro.GyroOverride=false;
gyro.GyroPower=100;
}
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
int temp=SkipCycles-1;
for(;CycleNum&lt;temp;++CycleNum)
{
Time+=dT;
yield return true;
}
CycleNum=0;

Time+=dT;
if(Gravity.Magnitude==0) yield break;
Vector3D angles=OrientationPrime.RollYawPitch;
if(!Vector3D.IsZero(Camera.SurfaceTilt))
{
Vector3D tempv=Gravity.Direction;
tempv=Vector3D.Reject(Gravity.Direction,Vector3D.Normalize(Camera.SurfaceTilt));
if(!Vector3D.IsZero(Camera.SurfaceBank))
tempv=Vector3D.Reject(tempv,Vector3D.Normalize(Camera.SurfaceBank));
OrientationSecond.Update(tempv,true);
angles=OrientationSecond.RollYawPitch;
if(Math.Abs(angles.X)&lt;0.05236) // 3 degree
angles.X=0;
if(Math.Abs(angles.Z)&lt;0.05236)
angles.Z=0;
}
else if(Dynamics.Velocity.Down&gt;3)
{
double vLen=Gravity.Magnitude*0.364;// tan(20 deg)
Vector3D tempv=Vector3D.Normalize(Dynamics.Velocity.Vector)*vLen+Gravity.Direction;
OrientationSecond.Update(tempv,true);
angles=OrientationSecond.RollYawPitch;
}

angles.Z-=MathHelperD.ToRadians(NaturalPitchDegree);
angles.X=-angles.X;
angles.Y=0;
if(UserInput.AD!=0)
{
if(Dynamics.Velocity.VerticalAbs&gt;0.5)
{
angles.Y=UserInput.AD*0.618;
if(Dynamics.Velocity.Backward&gt;=0.1)
angles.Y=-angles.Y;
}
else
{
if(UserInput.AD&gt;0&amp;&amp;VehicleTurnRadiusRight&gt;0)
{
double safeTurnRadiusRight=Math.Pow(Dynamics.Velocity.LateralAbs,1.5)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle-OrientationPrime.Roll,1e-6,MathHelperD.Pi/2.1)));
angles.Y=Dynamics.Velocity.Forward/Math.Max(VehicleTurnRadiusRight,safeTurnRadiusRight)*UserInput.AD;
}
else if(UserInput.AD&lt;0&amp;&amp;VehicleTurnRadiusLeft&lt;0)
{
double safeTurnRadiusLeft=Math.Pow(Dynamics.Velocity.LateralAbs,1.5)/(Gravity.Magnitude*Math.Cos(MathHelperD.Clamp(CoMToWheelsBaseAngle+OrientationPrime.Roll,1e-6,MathHelperD.Pi/2.1)));
angles.Y=Dynamics.Velocity.Forward/Math.Min(VehicleTurnRadiusLeft,-safeTurnRadiusLeft)*-UserInput.AD;
}
}
}
Vector3D PIDSignal=Vector3D.Zero;
bool blackScienceEquation=(angles-AnglesPrev).AbsMax()&gt;=angles.AbsMax()/5||angles.Y!=0;
if(blackScienceEquation)
{
AnglesPrev=angles;
PIDSignal.Y=angles.Y;
PIDSignal.X=RollPID.GetSignal(angles.X,Time);
PIDSignal.Z=PitchPID.GetSignal(angles.Z,Time);
}
if(SkipCycles&gt;0)
{
yield return true;
Time+=dT;
}
double gyroPower=MathHelperD.Clamp(angles.AbsMax()/MathHelperD.PiOver4,MinGyroPower,1.0);
Base6Directions.Direction gyroOrientation;
int workingGyrosCount=0;
foreach(var gyro in Gyros)
{
if(gyro.IsWorking)
{
++workingGyrosCount;
if(blackScienceEquation)
{
gyro.GyroOverride=true;
gyro.GyroPower=(float)gyroPower;
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Up);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Yaw=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Yaw=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Yaw=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Yaw=(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Yaw=-(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Yaw=(float)PIDSignal.Z;break;
}
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Left);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Pitch=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Pitch=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Pitch=(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Pitch=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Pitch=(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Pitch=-(float)PIDSignal.Z;break;
}
gyroOrientation=RC.Orientation.TransformDirectionInverse(gyro.Orientation.Forward);
switch(gyroOrientation)
{
case Base6Directions.Direction.Up: gyro.Roll=-(float)PIDSignal.Y;break;
case Base6Directions.Direction.Down: gyro.Roll=(float)PIDSignal.Y;break;
case Base6Directions.Direction.Forward: gyro.Roll=(float)PIDSignal.X;break;
case Base6Directions.Direction.Backward: gyro.Roll=-(float)PIDSignal.X;break;
case Base6Directions.Direction.Left: gyro.Roll=(float)PIDSignal.Z;break;
case Base6Directions.Direction.Right: gyro.Roll=-(float)PIDSignal.Z;break;
}
}
}
}
IsAllGyrosWorking=workingGyrosCount==Gyros.Count;
}
}

class SmartDampenersOverride : BaseClass
{
List&lt;IMyThrust&gt; ForwardThrusters;
List&lt;IMyThrust&gt; BackwardThrusters;
List&lt;IMyThrust&gt; RightwardThrusters;
List&lt;IMyThrust&gt; LeftwardThrusters;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;

public bool Enabled;
new public bool Ready
{
get
{
return (this as BaseClass).Ready &amp;&amp;
(ForwardThrusters.Count+BackwardThrusters.Count+RightwardThrusters.Count+LeftwardThrusters.Count)&gt;0;
}
}
public int SkipCycles;
public SmartDampenersOverride(Program parent,GridDynamicsWatcher dynamics,
int skipCycles=0,int skipOffset=0) : base(parent)
{
Dynamics=dynamics;
SkipCycles=skipCycles;
CycleNum=skipOffset;
ForwardThrusters=new List&lt;IMyThrust&gt;();
BackwardThrusters=new List&lt;IMyThrust&gt;();
RightwardThrusters=new List&lt;IMyThrust&gt;();
LeftwardThrusters=new List&lt;IMyThrust&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
ForwardThrusters.Clear();
BackwardThrusters.Clear();
RightwardThrusters.Clear();
LeftwardThrusters.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
Base6Directions.Direction blockOrientation;
List&lt;IMyThrust&gt; allThrusters=new List&lt;IMyThrust&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(allThrusters,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
foreach(var thruster in allThrusters)
{
blockOrientation=RC.Orientation.TransformDirectionInverse(thruster.Orientation.Forward);
switch(blockOrientation)
{
case Base6Directions.Direction.Backward:
ForwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Forward:
BackwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Right:
LeftwardThrusters.Add(thruster);
break;
case Base6Directions.Direction.Left:
RightwardThrusters.Add(thruster);
break;
}
}
}
}
public void ReleaseControl()
{
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0;
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0;
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;

if((RC.DampenersOverride&amp;&amp;(UserInput.WS&gt;=0||Dynamics.Velocity.Backward&gt;1))||(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0;
else
foreach(var thruster in ForwardThrusters)
thruster.ThrustOverride=0.01f;

if((RC.DampenersOverride&amp;&amp;(UserInput.WS&lt;=0||Dynamics.Velocity.Forward&gt;1))||(UserInput.WS!=0&amp;&amp;UserInput.CSpacebar&lt;0))
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0;
else
foreach(var thruster in BackwardThrusters)
thruster.ThrustOverride=0.01f;

if(RC.DampenersOverride&amp;&amp;!(UserInput.AD&gt;0&amp;&amp;Dynamics.Velocity.Right&gt;1)&amp;&amp;Dynamics.Velocity.SideAbs&gt;1)
{
if(UserInput.AD&lt;0&amp;&amp;Dynamics.Velocity.Left&gt;1)
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverridePercentage=1;
else
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0;
}
else
foreach(var thruster in RightwardThrusters)
thruster.ThrustOverride=0.01f;

if(RC.DampenersOverride&amp;&amp;!(UserInput.AD&lt;0&amp;&amp;Dynamics.Velocity.Left&gt;1)&amp;&amp;Dynamics.Velocity.SideAbs&gt;1)
{
if(UserInput.AD&gt;0&amp;&amp;Dynamics.Velocity.Right&gt;1)
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverridePercentage=1;
else
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0;
}
else
foreach(var thruster in LeftwardThrusters)
thruster.ThrustOverride=0.01f;
}
}

class LightsManager : BaseClass
{
List&lt;IMyLightingBlock&gt; StopLights;
List&lt;IMyLightingBlock&gt; TurnLights;
GridDynamicsWatcher Dynamics;
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool EnableState;
string StopLightsGroupName;
string TurnLightsGroupName;

public bool Enabled;
new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;(StopLights.Count+TurnLights.Count)&gt;0;}}
public int SkipCycles;
public LightsManager(Program parent,GridDynamicsWatcher dynamics,string stopLightGrpNm,
string turnLightGrpNm,int skipCycles=0,int skipOffset=0) : base(parent)
{
Dynamics=dynamics;
StopLightsGroupName=stopLightGrpNm;
TurnLightsGroupName=turnLightGrpNm;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StopLights=new List&lt;IMyLightingBlock&gt;();
TurnLights=new List&lt;IMyLightingBlock&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
StopLights.Clear();
TurnLights.Clear();
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
if(RC!=null)
{
IMyBlockGroup lightsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(StopLightsGroupName);
if(lightsGroup!=null)
lightsGroup.GetBlocksOfType(StopLights,block =&gt; block.IsSameConstructAs(Parent.Me));

lightsGroup=Parent.GridTerminalSystem.GetBlockGroupWithName(TurnLightsGroupName);
if(lightsGroup!=null)
lightsGroup.GetBlocksOfType(TurnLights,block =&gt; block.IsSameConstructAs(Parent.Me));
}
}
public void ReleaseControl()
{
foreach(var light in StopLights)
light.Enabled=true;
foreach(var light in TurnLights)
light.Enabled=true;
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
{
if(Enabled)
{
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
else if(EnableState)
{
ReleaseControl();
StMachine=UpdateIterator();
}
EnableState=Enabled;
}
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
int temp=SkipCycles-1;
for(;CycleNum&lt;temp;++CycleNum)
yield return true;
CycleNum=0;

foreach(var light in StopLights)
{
if((Dynamics.Velocity.Forward&gt;0.4&amp;&amp;Dynamics.Acceleration.AvrEMA&lt;-7&amp;&amp;UserInput.WS&gt;=0)||UserInput.CSpacebar&gt;0)
{
light.Radius=2f;
light.Intensity=5f;
light.Falloff=1.3f;
light.Color=Color.Red;
}
else if(Dynamics.Velocity.Backward&gt;0.5)
{
light.Radius=5f;
light.Intensity=5f;
light.Falloff=1.3f;
light.Color=Color.White;
}
else
{
light.Radius=3f;
light.Intensity=3f;
light.Falloff=0;
light.Color=Color.DarkRed;
}
}
if(SkipCycles&gt;0) yield return true;
foreach(var light in TurnLights)
{
if(light.CustomData.Equals("LEFT",StringComparison.OrdinalIgnoreCase))
{
if(UserInput.AD&lt;0)
light.Enabled=true;
else
light.Enabled=false;
}
else if(light.CustomData.Equals("RIGHT",StringComparison.OrdinalIgnoreCase))
{
if(UserInput.AD&gt;0)
light.Enabled=true;
else
light.Enabled=false;
}
}
}
}

class DisplayScheduler
{
Program Parent;
List&lt;IMyTextSurface&gt; LCDs;
int CycleNum;
int PrintCounter;
IEnumerator&lt;bool&gt; StMachine;
string Keyword;
StringBuilder Str;
CallBackFunk CallBack;

public delegate StringBuilder CallBackFunk(int i);
public bool Ready {get;set;}
public int SkipCycles;
public string Caption;

public DisplayScheduler(Program parent,CallBackFunk callBack,string keyword,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
CallBack=callBack;
Keyword=keyword;
SkipCycles=skipCycles;
CycleNum=skipOffset;
LCDs=new List&lt;IMyTextSurface&gt;();
Str=new StringBuilder();
StMachine=UpdateIterator();
}
public void DetectBlocks()
{
LCDs.Clear();
List&lt;IMyTerminalBlock&gt; lcdHosts=new List&lt;IMyTerminalBlock&gt;();
Parent.GridTerminalSystem.GetBlocksOfType(lcdHosts,block =&gt; block as IMyTextSurfaceProvider!=null&amp;&amp;block.IsSameConstructAs(Parent.Me));
List&lt;string&gt; lines=new List&lt;string&gt;();
IMyTextSurface lcd;
foreach(var block in lcdHosts)
{
if(block.CustomData.Length&gt;0)
{
lines.Clear();
new StringSegment(block.CustomData).GetLines(lines);
foreach(var line in lines)
{
if(line.Contains(Keyword))
{
if(block as IMyTextSurface!=null)
lcd=block as IMyTextSurface;
else
{
int i=0;
int.TryParse(line.Replace(Keyword,""),out i);
IMyTextSurfaceProvider t_sp=block as IMyTextSurfaceProvider;
i=Math.Max(0,Math.Min(i,t_sp.SurfaceCount));
lcd=t_sp.GetSurface(i);
}
lcd.ContentType=ContentType.TEXT_AND_IMAGE;
LCDs.Add(lcd);
}
}
}
}
Ready=LCDs.Count&gt;0;
}
public void ForcePrint(StringBuilder text=null)
{
if(Ready)
{
Str.Clear();
Str.Append(Caption);
++PrintCounter;
switch(PrintCounter % 4)
{
case 0: Str.Append("--");break;
case 1: Str.Append("\\");break;
case 2: Str.Append("|");break;
case 3: Str.Append("/");break;
}
Str.Append("\n_________________________________________________________\n");
if(text!=null)
Str.Append(text);
else
Str.Append(CallBack(PrintCounter));
foreach(var lcd in LCDs)
lcd.WriteText(Str);
}
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
while(CycleNum&lt;SkipCycles)
{
++CycleNum;
yield return true;
}
CycleNum=0;
ForcePrint();
}
}

class AutoHandbrakesSubroutine : BaseClass
{
IInputData UserInput;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
bool WasManned;

public int SkipCycles;
public HandbrakeMode Mode;
public AutoHandbrakesSubroutine(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
}
public void SetInputSource(IInputData source)
{
UserInput=source;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
if(WasManned&amp;&amp;!UserInput.Manning&amp;&amp;(Mode==HandbrakeMode.Auto||Mode==HandbrakeMode.Semi))
RC.HandBrake=true;
if(!WasManned&amp;&amp;UserInput.Manning&amp;&amp;Mode==HandbrakeMode.Auto)
RC.HandBrake=false;
WasManned=UserInput.Manning;
}
}

class ArtificialMassSubroutine
{
Program Parent;
List&lt;IMyVirtualMass&gt; VirtualMassBlocks;
GravityWatcher Gravity;
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;

public bool Ready {get;private set;}
public int SkipCycles;
public ArtificialMassSubroutine(Program parent,GravityWatcher gravity,int skipCycles=0,int skipOffset=0)
{
Parent=parent;
Gravity=gravity;
SkipCycles=skipCycles;
CycleNum=skipOffset;
VirtualMassBlocks=new List&lt;IMyVirtualMass&gt;();
StMachine=UpdateIterator();
}
public void DetectBlocks()
{
VirtualMassBlocks.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(VirtualMassBlocks,
block =&gt; block.CubeGrid==Parent.Me.CubeGrid&amp;&amp;!Utils.IsIgnore(block));
Ready=VirtualMassBlocks.Count&gt;0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
if(Gravity.ArtificialStongerNatural)
foreach(var block in VirtualMassBlocks)
block.Enabled=true;
else
foreach(var block in VirtualMassBlocks)
block.Enabled=false;
}
}

class GPSTrackerSubroutine : BaseClass
{
bool EnableState;
IInputData UserInput;
GridDynamicsWatcher Dynamics;
float ADPrev;
int WaypointNum;

public bool Enabled;
public StringBuilder GPSTrackList {get;}
public GPSTrackerSubroutine(Program parent,IInputData userInput,GridDynamicsWatcher dynamics) : base(parent)
{
UserInput=userInput;
Dynamics=dynamics;
GPSTrackList=new StringBuilder();
}
public void Update()
{
if(Enabled)
{
if(!EnableState)
{
WaypointNum=1;
GPSTrackList.Clear();
ADPrev=1-UserInput.AD;
}
if(UserInput.AD!=ADPrev&amp;&amp;Dynamics.Velocity.VerticalAbs&lt;1)
{
GPSTrackList.AppendFormat("GPS:{0} #{1:D3}:{2:F2}:{3:F2}:{4:F2}:\n",RC.CubeGrid.CustomName,WaypointNum,
RC.CubeGrid.WorldVolume.Center.X,RC.CubeGrid.WorldVolume.Center.Y,RC.CubeGrid.WorldVolume.Center.Z);
++WaypointNum;
ADPrev=UserInput.AD;
}
}
else if(EnableState)
GPSTrackList.AppendFormat("GPS:{0} #{1:D3}:{2:F2}:{3:F2}:{4:F2}:\n",RC.CubeGrid.CustomName,WaypointNum,
RC.CubeGrid.WorldVolume.Center.X,RC.CubeGrid.WorldVolume.Center.Y,RC.CubeGrid.WorldVolume.Center.Z);
EnableState=Enabled;
}
}

class BackupBeeperSubroutine
{
Program Parent;
int CycleNum;
bool IsPlaying;
string SoundBlocksName;
IEnumerator&lt;bool&gt; StMachine;
GridDynamicsWatcher Dynamics;
List&lt;IMySoundBlock&gt; SoundBlocks;

public bool Ready {get;set;}
public int SkipCycles;
public BackupBeeperSubroutine(Program parent,GridDynamicsWatcher dynamics,string soundBlocksName,
int skipCycles=0,int skipOffset=0)
{
Parent=parent;
Dynamics=dynamics;
SoundBlocksName=soundBlocksName;
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
SoundBlocks=new List&lt;IMySoundBlock&gt;();
}
public void DetectBlocks()
{
SoundBlocks.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(SoundBlocks,block =&gt; block.IsSameConstructAs(Parent.Me)&amp;&amp;block.CustomName.Contains(SoundBlocksName));
Ready=SoundBlocks.Count&gt;0;
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
while(CycleNum&lt;SkipCycles)
{
++CycleNum;
yield return true;
}
CycleNum=0;
if(Dynamics.Velocity.Backward&gt;0.5)
{
if(!IsPlaying)
{
foreach(var sb in SoundBlocks)
sb.Play();
IsPlaying=true;
}
}
else
{
if(IsPlaying)
{
foreach(var sb in SoundBlocks)
sb.Stop();
IsPlaying=false;
}
}
}
}

class ConnectorSubroutine : BaseClass
{
int CycleNum;
IEnumerator&lt;bool&gt; StMachine;
List&lt;IMyShipConnector&gt; Connectors;

new public bool Ready {get {return (this as BaseClass).Ready&amp;&amp;Connectors.Count&gt;0;}}
public int SkipCycles;
public bool IsConnected {get;private set;}
public ConnectorSubroutine(Program parent,int skipCycles=0,int skipOffset=0)
: base(parent)
{
SkipCycles=skipCycles;
CycleNum=skipOffset;
StMachine=UpdateIterator();
Connectors=new List&lt;IMyShipConnector&gt;();
}
public void DetectBlocks(IMyRemoteControl rc=null)
{
if(rc!=null)
RC=rc;
else
ForceDetectRemoteControl();
Connectors.Clear();
Parent.GridTerminalSystem.GetBlocksOfType(Connectors,
block =&gt; block.IsSameConstructAs(Parent.Me)&amp;&amp;!Utils.IsIgnore(block));
}
public void Update()
{
if(Ready)
if(!StMachine.MoveNext())
StMachine=UpdateIterator();
}
IEnumerator&lt;bool&gt; UpdateIterator()
{
for(;CycleNum&lt;SkipCycles;++CycleNum)
yield return true;
CycleNum=0;
IsConnected=false;
foreach(var con in Connectors)
if(con.Status==MyShipConnectorStatus.Connected)
{
IsConnected=true;
break;
}
}
}

UserInputWatcher UserInput;
AutopilotDriver Autopilot;
CruiseControlUnit CruiseControl;
GridDynamicsWatcher VehicleDynamics;
GridMassWatcher VehicleMass;
GravityWatcher Gravity;
OrientationComputer Orientation;
CameraScheduler Cameras;
TractionControlSystem TCS;
FallDampeningSystem FDS;
GyroStabilisationAssisting GSA;
SmartDampenersOverride SDO;
LightsManager Lights;
DisplayScheduler NavgtnDisplays;
DisplayScheduler StatusDisplays;
AutoHandbrakesSubroutine AutoBrakes;
ArtificialMassSubroutine ArtMass;
GPSTrackerSubroutine GPSTracker;
BackupBeeperSubroutine BackupBeeper;
ConnectorSubroutine ConnectorSubrtn;
RuntimeProfiler Profiler;

IEnumerator&lt;bool&gt; BootStMachine;
Program Parent;
bool Booted;
bool Busy;
bool ShowGPSList;
StringBuilder StrN;
StringBuilder StrS;

public double MaxForwardAcceleration {get {return _MaxForwardAccel;} set {_MaxForwardAccel=TCS.MaxForwardAcceleration=value;}}
public double MaxBackwardAcceleration {get {return _MaxBackwardAccel;} set {_MaxBackwardAccel=TCS.MaxBackwardAcceleration=value;}}
public double MaxPowerConsumption {get {return _MaxPowerConsumption;} set {_MaxPowerConsumption=TCS.PowerLimit=value;}}
public double NaturalPitchDegree {get {return _NaturalPitchDegree;} set {_NaturalPitchDegree=GSA.NaturalPitchDegree=VehicleDynamics.NaturalPitchDegree=value;}}
public double SafeFallVelocity {get {return _SafeFallVelocity;} set {_SafeFallVelocity=FDS.SafeFallVelocity=value;}}
public double LeanToSurfaceDistance {get {return _LeanToSurfaceDistance;} set {_LeanToSurfaceDistance=Cameras.CalcSurfaceAfter=value;}}
public double MaxSteerAngleDegree {get {return _MaxSteerAngleDegree;} set {_MaxSteerAngleDegree=TCS.MaxSteerAngleDegree=value;}}
public double ForwardSpeedLimitKPH {get {return _FrwrdSpeedLimitKPH;} set {_FrwrdSpeedLimitKPH=TCS.ForwardSpeedLimitKPH=value;}}
public double BackwardSpeedLimitKPH {get {return _BckwrdSpeedLimitKPH;} set {_BckwrdSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=value;}}
public double SuspensionHeightOffset {get {return _SusHeightOffset;} set {_SusHeightOffset=TCS.HeightOffset=value;}}
public double SuspensionStrenght {get {return _SusStrenght;} set {_SusStrenght=TCS.Strenght=value;}}
public double SuspensionValueChangeRate {get {return _SusValueChangeRate;} set {_SusValueChangeRate=TCS.ValueChangeRate=value;}}
public double AutopilotAccuracy {get {return _AutopilotAccuracy;} set {_AutopilotAccuracy=Autopilot.Accuracy=value;}}
public double AutopilotWait {get {return _AutopilotWait;} set {_AutopilotWait=Autopilot.WaitTimeSec=value;}}
public double AutopilotSpeedLimitKMP {get {return _AutopilotSpeedLimitKMP;} set {_AutopilotSpeedLimitKMP=value;}}
public bool UseJumpJets {get {return _UseJumpJets;} set {_UseJumpJets=FDS.UseJumpJets=value;}}
public bool UseAdaptiveSteering {get {return _UseAdaptiveSteering;} set {_UseAdaptiveSteering=TCS.UseAdaptiveSteering=value;}}
public bool UseAckermannSteering {get {return _UseAckermannSteering;} set {_UseAckermannSteering=TCS.UseAckermannSteering=value;}}
public bool UseDASAirShock {get {return _UseDASAirShock;} set {_UseDASAirShock=TCS.UseDASAirShock=value;}}
public bool UseHillDescentControl {get {return _UseHillDescentControl;} set {_UseHillDescentControl=value;TCS.UseHillDescentControl=Autopilot.Enabled ? true : value;}}
public bool UseGSA {get {return _UseGSA;} set {_UseGSA=GSA.Enabled=value;}}
public bool UseTCS {get {return _UseTCS;} set {_UseTCS=TCS.Enabled=value;}}
public bool UseFDS {get {return _UseFDS;} set {_UseFDS=FDS.Enabled=value;}}
public bool UseSDO {get {return _UseSDO;} set {_UseSDO=SDO.Enabled=value;}}
public bool UseLights {get {return _UseLights;} set {_UseLights=Lights.Enabled=value;}}
public bool Run;
public double Odometer;

public DriverAssistingSystem(Program parentProgram)
{
Parent=parentProgram;

UserInput=new UserInputWatcher(Parent);

VehicleDynamics=new GridDynamicsWatcher(Parent);
VehicleMass=new GridMassWatcher(Parent,9,9);
VehicleMass.SetIgnorArray(new float[] {
100,// player
420,// l.g. 1x1 wheel
105,// s.g. 1x1
590,// l.g. 3x3
205,// s.g. 3x3
760,// l.g. 5x5
310 // s.g. 5x5
});
Gravity=new GravityWatcher(Parent,59,56);
Orientation=new OrientationComputer(Parent,2,2);
Cameras=new CameraScheduler(Parent,VehicleDynamics,2,2);
TCS=new TractionControlSystem(Parent,VehicleDynamics,Gravity,Orientation,Cameras,
_SubgridWheelsGroupName,1,1,7,4,7,1,7,0,9,5,7,5,9,7,59,53);
FDS=new FallDampeningSystem(Parent,VehicleDynamics,Gravity,VehicleMass,Cameras,UserInput,3);
GSA=new GyroStabilisationAssisting(Parent,Gravity,Orientation,Cameras,VehicleDynamics,3,2);
SDO=new SmartDampenersOverride(Parent,VehicleDynamics);
Lights=new LightsManager(Parent,VehicleDynamics,_StopLightsGroupName,_TurnLightsGroupName,9,4);
Autopilot=new AutopilotDriver(Parent,_AutopilotTimerName,5);
CruiseControl=new CruiseControlUnit(Parent,UserInput,VehicleDynamics,Orientation,5);
AutoBrakes=new AutoHandbrakesSubroutine(Parent,9,9);
ArtMass=new ArtificialMassSubroutine(Parent,Gravity,99,91);
GPSTracker=new GPSTrackerSubroutine(Parent,UserInput,VehicleDynamics);
BackupBeeper=new BackupBeeperSubroutine(Parent,VehicleDynamics,_BackupBeeperName,9,8);
ConnectorSubrtn=new ConnectorSubroutine(Parent);

NavgtnDisplays=new DisplayScheduler(Parent,ComposeNavigationData,"DAS_navigation",14,2);
StatusDisplays=new DisplayScheduler(Parent,ComposeStatusData,"DAS_status",29,8);
Profiler=new RuntimeProfiler(Parent,14);
Profiler.Caption="DAS - Driver Assisting System  ";

Run=true;
Load();
VehicleDynamics.NaturalPitchDegree=_NaturalPitchDegree;
TCS.MaxForwardAcceleration=_MaxForwardAccel;
TCS.MaxBackwardAcceleration=_MaxBackwardAccel;
TCS.PowerLimit=_MaxPowerConsumption;
TCS.AckFocal=_AckermannFocalPoint;
TCS.UseAdaptiveSteering=_UseAdaptiveSteering;
TCS.UseAckermannSteering=_UseAckermannSteering;
TCS.UseDASAirShock=_UseDASAirShock;
TCS.UseHillDescentControl=_UseHillDescentControl;
TCS.ForwardSpeedLimitKPH=_FrwrdSpeedLimitKPH;
TCS.BackwardSpeedLimitKPH=_BckwrdSpeedLimitKPH;
TCS.MaxSteerAngleDegree=_MaxSteerAngleDegree;
TCS.HeightOffset=_SusHeightOffset;
TCS.Strenght=_SusStrenght;
TCS.ValueChangeRate=_SusValueChangeRate;
TCS.Enabled=_UseTCS;
FDS.SafeFallVelocity=_SafeFallVelocity;
FDS.UseJumpJets=_UseJumpJets;
FDS.Enabled=_UseFDS;
GSA.NaturalPitchDegree=_NaturalPitchDegree;
GSA.Enabled=_UseGSA;
SDO.Enabled=_UseSDO;
Lights.Enabled=_UseLights;
Cameras.CalcSurfaceAfter=_LeanToSurfaceDistance;
AutoBrakes.Mode=_HandbrakeMode;
Autopilot.WaitTimeSec=_AutopilotWait;
Autopilot.Accuracy=_AutopilotAccuracy;
if(Autopilot.Enabled)
SetAutopilotControl();
else
SetUserControl();

StrN=new StringBuilder();
StrS=new StringBuilder();

BootStMachine=Boot();
Booted=false;
if(Run)
Start();
}

public void Save()
{
MyIni config=new MyIni();
config.Set("General","Run",Run);
config.Set("General","JumpJets",_UseJumpJets);
config.Set("General","HDC",_UseHillDescentControl);
config.Set("General","Odometer",Odometer);

config.Set("Autopilot","Enabled",Autopilot.Enabled);
config.Set("Autopilot","WaitTime",_AutopilotWait);
config.Set("Autopilot","Accuracy",_AutopilotAccuracy);
config.Set("Autopilot","WaypointIndex",Autopilot.WaypointIndx);
config.Set("Autopilot","WaypointSelector",Autopilot.WaypointSelector);
config.Set("Autopilot","DriveMode",(int)Autopilot.DriveMode);

Parent.Storage=config.ToString();
}

public void Start()
{
Busy=true;
Run=true;
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update1;
}

public void Stop()
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.None;
Run=false;
ReleaseAllOverrides();
NavgtnDisplays.ForcePrint(ComposeNavigationData());
StatusDisplays.ForcePrint(ComposeStatusData());

}

public void Update(UpdateType updateSource)
{
if(Booted)
{
double dT=0;
if(updateSource.HasFlag(UpdateType.Update1))
dT=0.016;
else if(updateSource.HasFlag(UpdateType.Update10))
dT=0.16;
else if(updateSource.HasFlag(UpdateType.Update100))
dT=1.6;
FDS.dT=GSA.dT=Cameras.dT=Autopilot.dT=VehicleDynamics.dT=dT;
try
{
ConnectorSubrtn.Update();
if(!ConnectorSubrtn.IsConnected)
{
Gravity.Update();
VehicleMass.Update();
if(VehicleMass.BaseMassChanged)
{
Booted=false;
return;
}
if(VehicleMass.PhysicalMassChanged)
{
TCS.UpdateSuspensionCofiguration();
TCS.UpdateSprungWeight(VehicleMass.Masses.PhysicalMass);
RelayTCSDataToGSA();
}
if(Gravity.MagnitudeChanged)
{
TCS.UpdateSprungWeight(VehicleMass.Masses.PhysicalMass);
RelayTCSDataToGSA();
}
VehicleDynamics.Update();
UserInput.Update();
Autopilot.Update();
CruiseControl.Update();
AutoBrakes.Update();
TCS.Update();
ArtMass.Update();
if(Busy)
{
Cameras.SkipCycles=2+(100-(int)VehicleDynamics.Velocity.Scalar)/14;
Cameras.Update();
Orientation.Update(Gravity.Direction);
GSA.Update();
FDS.Update();
SDO.Update();
Lights.Update();
GPSTracker.Update();
BackupBeeper.Update();
}
if(Autopilot.Enabled&amp;&amp;!Autopilot.Busy)
{
Autopilot.Enabled=false;
SetUserControl();
}
if(CruiseControl.Enabled)
{
if(CruiseControl.Busy)
TCS.ForwardSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=CruiseControl.SpeedKPH;
else
{
CruiseControl.Enabled=false;
SetUserControl();
}
}

if(VehicleDynamics.Velocity.LateralAbs&gt;0.5)
Odometer+=VehicleDynamics.Velocity.LateralAbs*dT;
}
NavgtnDisplays.Update();
StatusDisplays.Update();
bool busy=!ConnectorSubrtn.IsConnected&amp;&amp;(TCS.Busy||Autopilot.Enabled||CruiseControl.Enabled||UserInput.Manning||VehicleDynamics.Velocity.Scalar&gt;0.5);
if(Busy&amp;&amp;!busy)
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update10;
Profiler.SkipCycles=2;
}
else if(!Busy&amp;&amp;busy)
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update1;
Profiler.SkipCycles=14;
}
Busy=busy;
}
catch(Exception ex) // *Pokemon joke here*
{
Booted=false;
Parent.Echo("Exeption: "+ex.ToString());
VehicleDynamics.Reset();
UserInput.Reset();
ReleaseAllOverrides();
Save();
}
Profiler.Update();
}
else // Run boot sequence
{
if(!BootStMachine.MoveNext())
BootStMachine=Boot();
}
}

public void ChangeHandbrakeMode()
{
++_HandbrakeMode;
if(_HandbrakeMode==HandbrakeMode.END_OF_ENUM)
_HandbrakeMode=0;
AutoBrakes.Mode=_HandbrakeMode;
}

public void ToggleAutopilot(bool reset=true)
{
Autopilot.Enabled=!Autopilot.Enabled;
if(Autopilot.Enabled)
{
Autopilot.ResetWaypointIndex(reset);
SetAutopilotControl();
}
else
SetUserControl();
}

public void ChangeAutopilotDriveMode()
{
++Autopilot.DriveMode;
if(Autopilot.DriveMode==AutopilotDriver.EDriveMode.END_OF_ENUM)
Autopilot.DriveMode=AutopilotDriver.EDriveMode.OneWay;
}

public void InverseAutopilot()
{
Autopilot.InverseRoute();
}

public void ToggleCruiseControl()
{
CruiseControl.Enabled=!CruiseControl.Enabled;
if(CruiseControl.Enabled)
SetCruiseControl();
else
SetUserControl();
}

public void ToggleGPSTracker()
{
if(!CruiseControl.Enabled&amp;&amp;!Autopilot.Enabled)
GPSTracker.Enabled=!GPSTracker.Enabled;
}

public void ToggleGPSList()
{
ShowGPSList=!ShowGPSList;
if(ShowGPSList)
StatusDisplays.Caption="Driver Assisting System\\\\GPS Track ";
else
StatusDisplays.Caption="Driver Assisting System\\\\Status ";
}

//-------------------------------------------------------------------
void Load()
{
MyIni config=new MyIni();
if(config.TryParse(Parent.Storage))
{
if(config.ContainsSection("General"))
{
config.Get("General","Run").TryGetBoolean(out Run);
config.Get("General","JumpJets").TryGetBoolean(out _UseJumpJets);
config.Get("General","HDC").TryGetBoolean(out _UseHillDescentControl);
config.Get("General","Odometer").TryGetDouble(out Odometer);
}
if(config.ContainsSection("Autopilot"))
{
config.Get("Autopilot","Enabled").TryGetBoolean(out Autopilot.Enabled);
config.Get("Autopilot","WaitTime").TryGetDouble(out _AutopilotWait);
config.Get("Autopilot","Accuracy").TryGetDouble(out _AutopilotAccuracy);
config.Get("Autopilot","WaypointIndex").TryGetInt32(out Autopilot.WaypointIndx);
config.Get("Autopilot","WaypointSelector").TryGetInt32(out Autopilot.WaypointSelector);
int t=(int)Autopilot.DriveMode;
config.Get("Autopilot","DriveMode").TryGetInt32(out t);
Autopilot.DriveMode=(AutopilotDriver.EDriveMode)t;
}
}
}

IEnumerator&lt;bool&gt; Boot()
{
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update10;
StringQueue bootLog=new StringQueue(15);
StringBuilder failList=new StringBuilder("\n");
IMyTextSurface myLCD=(Parent.Me as IMyTextSurfaceProvider).GetSurface(0);
NavgtnDisplays.DetectBlocks();
StatusDisplays.DetectBlocks();
if(NavgtnDisplays.Ready||StatusDisplays.Ready)
{
StatusDisplays.Caption=NavgtnDisplays.Caption="Driver Assisting System\\\\Booting... ";
bootLog.Append("DAS.DisplayScheduler...   ok");
}
else
{
bootLog.Append("DAS.DisplayScheduler...   failure");
failList.Append("DAS.DisplayScheduler failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
VehicleDynamics.ForceDetectRemoteControl();
if(!VehicleDynamics.Ready)
{
bootLog.Append("DAS.GridDynamicsWatcher...   failure\n\nCritical failure during boot:\nNo Remote Control Block found.");
Parent.Runtime.UpdateFrequency=UpdateFrequency.Update100;
BootPrint(bootLog.GetString(),myLCD);
yield break;
}
IMyRemoteControl rc=VehicleMass.RC=Gravity.RC=Orientation.RC=VehicleDynamics.RC;
VehicleMass.InitMasses();
for(int i=0;i&lt;=Gravity.SkipCycles;++i)
Gravity.Update();
for(int i=0;i&lt;=Orientation.SkipCycles;++i)
Orientation.Update(Gravity.Direction,true);
bootLog.Append("DAS.GridMassWatcher...   ok");
bootLog.Append("DAS.GravityWatcher...   ok");
bootLog.Append("DAS.OrientationComputer...   ok");
bootLog.Append("DAS.GridDynamicsWatcher...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
UserInput.DetectFuncBlocks();
bootLog.Append("DAS.UserInputWatcher...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
Cameras.DetectBlocks(rc);
if(Cameras.Ready)
{
for(int i=0;i&lt;(Cameras.SkipCycles+2)*2;++i)
Cameras.Update();
bootLog.Append("DAS.CameraScheduler...   ok");
}
else
{
bootLog.Append("DAS.CameraScheduler...   failure");
failList.Append("DAS.CameraScheduler failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
TCS.DetectBlocks(rc);
if(TCS.Ready)
bootLog.Append("DAS.TCS...   ok");
else
{
bootLog.Append("DAS.TCS...   failure");
failList.Append("DAS.TCS failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
FDS.DetectBlocks(rc);
if(FDS.Ready)
bootLog.Append("DAS.FDS...   ok");
else
{
bootLog.Append("DAS.FDS...   failure");
failList.Append("DAS.FDS failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
GSA.DetectBlocks(rc);
RelayTCSDataToGSA();
if(GSA.Ready)
{
for(int i=0;i&lt;=GSA.SkipCycles;++i)
GSA.Update();
bootLog.Append("DAS.GSA...   ok");
}
else
{
bootLog.Append("DAS.GSA...   failure");
failList.Append("DAS.GSA failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
SDO.DetectBlocks(rc);
if(SDO.Ready)
bootLog.Append("DAS.SDO...   ok");
else
{
bootLog.Append("DAS.SDO...   failure");
failList.Append("DAS.SDO failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
Lights.DetectBlocks(rc);
if(Lights.Ready)
bootLog.Append("DAS.LightsManager...   ok");
else
{
bootLog.Append("DAS.LightsManager...   failure");
failList.Append("DAS.LightsManager failure\n");
}
BootPrint(bootLog.GetString(),myLCD);
yield return true;
AutoBrakes.RC=CruiseControl.RC=GPSTracker.RC=rc;
bootLog.Append("DAS.AutoHandbrakesSubroutine...   ok");
ArtMass.DetectBlocks();
Autopilot.DetectBlocks(rc);
if(ArtMass.Ready)
bootLog.Append("DAS.ArtificialMassSubroutine...   ok");
else
bootLog.Append("DAS.ArtificialMassSubroutine...   failure");
bootLog.Append("DAS.AutopilotDriver...   ok");
bootLog.Append("DAS.CruiseControlSubroutine...   ok");
bootLog.Append("DAS.GPSTrackerSubroutine...   ok");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
ConnectorSubrtn.DetectBlocks(rc);
if(ConnectorSubrtn.Ready)
bootLog.Append("DAS.ConnectorSubroutine...   ok");
else
bootLog.Append("DAS.ConnectorSubroutine...   failure");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
BackupBeeper.DetectBlocks();
if(BackupBeeper.Ready)
bootLog.Append("DAS.BackupBeeperSubroutine...   ok");
else
bootLog.Append("DAS.BackupBeeperSubroutine...   failure");
BootPrint(bootLog.GetString(),myLCD);
yield return true;
NavgtnDisplays.Caption="Driver Assisting System\\\\Navigation ";
StatusDisplays.Caption="Driver Assisting System\\\\Status ";
Profiler.Memo=failList.ToString();
Busy=false;
Booted=true;
}

string textDASshutdown="\n\n\n\n                         DAS shutdown";
string textDASstandby="\n\n\n\n                         DAS standby";
StringBuilder ComposeNavigationData(int i=0)
{
StrN.Clear();
if(!Run)
StrN.Append(textDASshutdown);
else if(ConnectorSubrtn.IsConnected)
StrN.Append(textDASstandby);
else
{
StrN.AppendFormat("\nLocation:\nGPS:{0}:",Parent.Me.CubeGrid.CustomName);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.X);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.Y);
StrN.AppendFormat("{0:F2}:",Parent.Me.CubeGrid.WorldVolume.Center.Z);
StrN.AppendFormat(":\n\nLateral velocity:    {0,-1:N2} km/h\nVertical velocity:   {1,-1:N2} m/s\nAcceleration:         {2,-1:N1} m/c^2\nTraveled distance: {3,-1:N1} km",
VehicleDynamics.Velocity.Forward*3.6,
VehicleDynamics.Velocity.Up,
VehicleDynamics.Acceleration.AvrEMA,
Odometer/1000.0);
StrN.AppendFormat("\n\nPitch: {0,-1:F2}Â°\nYaw:  {1,-1:F2}Â°\nRoll:   {2,-1:F2}Â°",
MathHelperD.ToDegrees(Orientation.Pitch)-_NaturalPitchDegree,
MathHelperD.ToDegrees(Orientation.Yaw),
MathHelperD.ToDegrees(Orientation.Roll));
}
return StrN;
}

[Flags]
enum WarningFlags : byte {None,GSA,FDS,HDC=4}
WarningFlags Warns;
StringBuilder ComposeStatusData(int i=0)
{
StrS.Clear();
if(!Run)
StrS.Append(textDASshutdown);
else if(ConnectorSubrtn.IsConnected)
StrS.Append(textDASstandby);
else if(ShowGPSList)
return GPSTracker.GPSTrackList;
else
{
StrS.Append("                             Systems\n");
if(TCS.Ready)
{
if(TCS.Enabled)
StrS.Append("          [ TCS ]");
else
StrS.Append("            TCS  ");
}
else
StrS.Append("          [         ]");
if(GSA.Ready)
{
if(GSA.Enabled)
{
if(GSA.IsAllGyrosWorking||i % 2==0)
StrS.Append("          [ GSA ]");
else
StrS.Append("          [         ]");
}
else
StrS.Append("            GSA  ");
}
else
StrS.Append("          [         ]");
if(FDS.Ready)
{
if(FDS.Enabled)
{
if(FDS.EnoughThrust||i % 2==0)
StrS.Append("          [ FDS ]");
else
StrS.Append("          [         ]");
}
else
StrS.Append("            FDS  ");
}
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(SDO.Ready)
{
if(SDO.Enabled)
StrS.Append("          [ SDO ]");
else
StrS.Append("            SDO  ");
}
else
StrS.Append("          [         ]");
if(Lights.Ready)
{
if(Lights.Enabled)
StrS.Append("          [LGHT]");
else
StrS.Append("           LGHT ");
}
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(Warns==WarningFlags.None)
{
if(GSA.Ready&amp;&amp;GSA.Enabled&amp;&amp;!GSA.IsAllGyrosWorking)
Warns |= WarningFlags.GSA;
if(FDS.Ready&amp;&amp;FDS.Enabled&amp;&amp;!FDS.EnoughThrust)
Warns |= WarningFlags.FDS;
if(TCS.UseHillDescentControl&amp;&amp;!_UseHillDescentControl)
Warns |= WarningFlags.HDC;
}
if(Warns.HasFlag(WarningFlags.GSA))
{
StrS.Append("   GSA: Some gyros disabled or damaged.\n");
if(i % 4==0)
Warns ^= WarningFlags.GSA;
}
else if(Warns.HasFlag(WarningFlags.FDS))
{
StrS.Append("   FDS: Not enough thrust.\n");
if(i % 4==0)
Warns ^= WarningFlags.FDS;
}
else if(Warns.HasFlag(WarningFlags.HDC))
{
StrS.Append("   DAS: HDC activated by autopilot.\n");
if(i % 4==0)
Warns ^= WarningFlags.HDC;
}
else
StrS.Append("\n");
switch(_HandbrakeMode)
{
case HandbrakeMode.Semi:
StrS.Append("          [SEMI]");
break;
case HandbrakeMode.Auto:
StrS.Append("          [AUTO]");
break;
case HandbrakeMode.Off:
StrS.Append("          [         ]");
break;
}
if(_UseJumpJets)
StrS.Append("          [JUMP]");
else
StrS.Append("          [         ]");
if(TCS.UseHillDescentControl&amp;&amp;(_UseHillDescentControl||i % 2==0))
StrS.Append("          [ HDC ]");
else
StrS.Append("          [         ]");
StrS.Append("\n");
if(CruiseControl.Enabled)
StrS.Append("          [  CC  ]");
else
StrS.Append("          [         ]");
if(GPSTracker.Enabled&amp;&amp;i % 2==0)
StrS.Append("          [Â¤REC]");
else
StrS.Append("          [         ]");
StrS.Append("\n_________________________________________________________\n");
StrS.AppendFormat("Autopilot:              {0}\n",Autopilot.Enabled ? "ACTIVE" : "OFF");
StrS.AppendFormat("Accuracy:              {0}\n",_AutopilotAccuracy);
StrS.Append("Wait time:              ");
if(Autopilot.Time&gt;=1)
StrS.AppendFormat("{0}/",Math.Floor(Autopilot.Time));
StrS.AppendFormat("{0} sec\n",_AutopilotWait);
switch(Autopilot.DriveMode)
{
case AutopilotDriver.EDriveMode.OneWay:
StrS.Append("Drive Mode:           ONE WAY\n");
break;
case AutopilotDriver.EDriveMode.Patrol:
StrS.Append("Drive Mode:           PATROL\n");
break;
case AutopilotDriver.EDriveMode.Cicrle:
StrS.Append("Drive Mode:           CIRCLE\n");
break;
}
StrS.Append("Route:\n");
if(Autopilot.Enabled)
{
StrS.AppendFormat("{0} {1} {2}\n",
Autopilot.FirstWaypoint.Name,
i % 3==0 ? "&gt;--&gt;" : i % 3==1 ? "-&gt;--" : "--&gt;-",
Autopilot.LastWaypoint.Name);
}
else
StrS.Append("N/A\n");
StrS.Append("Current Waypoint:\n");
StrS.AppendFormat("{0}\n",Autopilot.Enabled ? Autopilot.CurrentWaypoint.ToString() : "N/A");
}
return StrS;
}

void BootPrint(StringBuilder str,IMyTextSurface pbLCD)
{
NavgtnDisplays.ForcePrint(str);
StatusDisplays.ForcePrint(str);
Parent.Echo(str.ToString());
pbLCD?.WriteText(str);
}

void ReleaseAllOverrides()
{
try
{
TCS.ReleaseControl();
FDS.ReleaseControl();
GSA.ReleaseControl();
SDO.ReleaseControl();
Lights.ReleaseControl();
}
finally {}
}

void SetAutopilotControl()
{
CruiseControl.Enabled=false;
GPSTracker.Enabled=false;
TCS.SetInputSource(Autopilot);
TCS.ForceFullOverride=true;
TCS.UseHillDescentControl=true;
TCS.ForwardSpeedLimitKPH=TCS.BackwardSpeedLimitKPH=_AutopilotSpeedLimitKMP;
GSA.SetInputSource(Autopilot);
SDO.SetInputSource(Autopilot);
AutoBrakes.SetInputSource(Autopilot);
Lights.SetInputSource(Autopilot);
}

void SetCruiseControl()
{
Autopilot.Enabled=false;
GPSTracker.Enabled=false;
TCS.SetInputSource(CruiseControl);
TCS.ForceFullOverride=true;
TCS.UseHillDescentControl=_UseHillDescentControl;
GSA.SetInputSource(CruiseControl);
SDO.SetInputSource(CruiseControl);
AutoBrakes.SetInputSource(CruiseControl);
Lights.SetInputSource(CruiseControl);
}

void SetUserControl()
{
TCS.SetInputSource(UserInput);
TCS.ForceFullOverride=false;
TCS.UseHillDescentControl=_UseHillDescentControl;
TCS.ForwardSpeedLimitKPH=_FrwrdSpeedLimitKPH;
TCS.BackwardSpeedLimitKPH=_BckwrdSpeedLimitKPH;
TCS.ReleaseControl();
GSA.SetInputSource(UserInput);
SDO.SetInputSource(UserInput);
AutoBrakes.SetInputSource(UserInput);
Lights.SetInputSource(UserInput);
}

void RelayTCSDataToGSA()
{
GSA.CoMToWheelsBaseAngle=TCS.CoMToWheelsBaseAngle;
GSA.VehicleTurnRadiusLeft=TCS.VehicleTurnRadiusLeft;
GSA.VehicleTurnRadiusRight=TCS.VehicleTurnRadiusRight;
}

}
//-------------------------------------------------------------------

DriverAssistingSystem DAS;

public Program()
{
DAS=new DriverAssistingSystem(this);
}

public void Save()
{
if(DAS.Run)
DAS.Save();
}

public void Main(string args,UpdateType updateSource)
{
if(updateSource.HasFlag(UpdateType.Terminal)||updateSource.HasFlag(UpdateType.Trigger))
{
StringComparison ic=StringComparison.OrdinalIgnoreCase;
if(args.Equals("START",ic))
DAS.Start();
else if(args.Equals("STOP",ic))
{
DAS.Stop();
DAS.Save();
}
else if(args.Equals("STARTSTOP",ic))
{
if(DAS.Run)
DAS.Stop();
else
DAS.Start();
DAS.Save();
}
else if(args.Equals("LOW_MODE",ic))
{
DAS.SuspensionValueChangeRate=60;
DAS.SuspensionHeightOffset=0;
}
else if(args.Equals("HIGH_MODE",ic))
{
DAS.SuspensionValueChangeRate=15;
DAS.SuspensionHeightOffset=-1.5;
}
else if(args.Equals("RESET_ODOMETER",ic))
{
DAS.Odometer=0;
DAS.Save();
}
else if(args.Equals("CYCLE_HANDBRAKES",ic))
DAS.ChangeHandbrakeMode();
else if(args.Equals("TOGGLE_JUMPJETS",ic))
DAS.UseJumpJets=!DAS.UseJumpJets;
else if(args.Equals("TOGGLE_GSA",ic))
DAS.UseGSA=!DAS.UseGSA;
else if(args.Equals("TOGGLE_HDC",ic))
DAS.UseHillDescentControl=!DAS.UseHillDescentControl;
else if(args.Equals("TOGGLE_AUTOPILOT",ic))
DAS.ToggleAutopilot();
else if(args.Equals("RESUME_AUTOPILOT",ic))
DAS.ToggleAutopilot(false);
else if(args.Equals("CYCLE_AUTOPILOT_ACC",ic))
DAS.AutopilotAccuracy=DAS.AutopilotAccuracy % 2.5+0.25;
else if(args.Equals("CYCLE_AUTOPILOT_WAIT",ic))
DAS.AutopilotWait=(DAS.AutopilotWait+5) % 65;
else if(args.Equals("CYCLE_AUTOPILOT_MODE",ic))
DAS.ChangeAutopilotDriveMode();
else if(args.Equals("INVERSE_AUTOPILOT",ic))
DAS.InverseAutopilot();
else if(args.Equals("TOGGLE_CRUISECONTROL",ic))
DAS.ToggleCruiseControl();
else if(args.Equals("TOGGLE_GPSTRACKER",ic))
DAS.ToggleGPSTracker();
else if(args.Equals("TOGGLE_GPSLIST",ic))
DAS.ToggleGPSList();
}
else
{
DAS.Update(updateSource);
}
}
</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>142589055273735771</EntityId>
              <Min x="0" y="6" z="11" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>High/Low Switch - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>16</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>133531310712744753</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>102693746688457437</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>143418618258137809</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>143470402419869971</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_RemoteControl">
              <SubtypeName>SmallBlockRemoteControl</SubtypeName>
              <EntityId>130320885985824404</EntityId>
              <Min x="0" y="5" z="10" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyAutopilotComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_AutopilotComponent">
                      <AutoPilotEnabled>false</AutoPilotEnabled>
                      <FlightMode>0</FlightMode>
                      <CurrentWaypointIndex>-1</CurrentWaypointIndex>
                      <Waypoints />
                      <DockingModeEnabled>false</DockingModeEnabled>
                      <CollisionAvoidance>false</CollisionAvoidance>
                      <Direction>0</Direction>
                      <AutopilotSpeedLimit>100</AutopilotSpeedLimit>
                      <WaitForFreeWay>false</WaitForFreeWay>
                      <WaypointThresholdDistance>0</WaypointThresholdDistance>
                      <Coords />
                      <Names />
                      <LookAtPosition xsi:nil="true" />
                      <FacingDirection>Forward</FacingDirection>
                      <AlignToGravity>true</AlignToGravity>
                      <MinHeightAboveTerrain>25</MinHeightAboveTerrain>
                      <IsWorkAreaReturningToStart>false</IsWorkAreaReturningToStart>
                      <WorkAreaStartForward>
                        <X>0</X>
                        <Y>0</Y>
                        <Z>0</Z>
                      </WorkAreaStartForward>
                      <PitchAngle>0</PitchAngle>
                      <RollAngle>0</RollAngle>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <UseSingleWeaponMode>false</UseSingleWeaponMode>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </Toolbar>
              <SelectedGunId xsi:nil="true" />
              <BuildToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </BuildToolbar>
              <OnLockedToolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </OnLockedToolbar>
              <IsTargetLockingEnabled>false</IsTargetLockingEnabled>
              <PreviousControlledEntityId xsi:nil="true" />
              <AutoPilotEnabled>false</AutoPilotEnabled>
              <FlightMode>0</FlightMode>
              <BindedCamera>0</BindedCamera>
              <CurrentWaypointIndex>-1</CurrentWaypointIndex>
              <Waypoints />
              <Direction>0</Direction>
              <DockingModeEnabled>false</DockingModeEnabled>
              <CollisionAvoidance>false</CollisionAvoidance>
              <Coords />
              <Names />
              <WaypointThresholdDistance>0</WaypointThresholdDistance>
              <IsMainRemoteControl>false</IsMainRemoteControl>
              <WaitForFreeWay>false</WaitForFreeWay>
              <IsUpdatedSave>true</IsUpdatedSave>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
              <SubtypeName>ButtonPanelSmall</SubtypeName>
              <EntityId>79797590089566331</EntityId>
              <Min x="1" y="6" z="9" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <AnyoneCanUse>false</AnyoneCanUse>
              <CustomButtonNames>
                <dictionary>
                  <item>
                    <Key>0</Key>
                    <Value>Left Door - Timer Block - Trigger now</Value>
                  </item>
                </dictionary>
              </CustomButtonNames>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_ButtonPanel">
              <SubtypeName>ButtonPanelSmall</SubtypeName>
              <EntityId>92101110826510828</EntityId>
              <Min x="-1" y="6" z="9" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <AnyoneCanUse>false</AnyoneCanUse>
              <CustomButtonNames>
                <dictionary>
                  <item>
                    <Key>0</Key>
                    <Value>Right Door - Timer Block - Trigger now</Value>
                  </item>
                </dictionary>
              </CustomButtonNames>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>104185799005284720</EntityId>
              <Min x="0" y="7" z="-1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>94067998243269842</EntityId>
              <Min x="-1" y="7" z="-1" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>93842512774777868</EntityId>
              <Min x="1" y="7" z="-1" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>88174211089786061</EntityId>
              <Min x="0" y="5" z="0" />
              <BlockOrientation Forward="Up" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>Wheels</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript>TSS_Weather</SelectedScript>
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4278249476</PackedValue>
                            <X>4</X>
                            <Y>232</Y>
                            <Z>0</Z>
                            <R>4</R>
                            <G>232</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>Drift/G Force/ - Programmable Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Program>const string WHEEL_GROUP_NAME = "Wheels"; // Replace with your wheel group's name
const string CockpitTag = "Rover Cockpit";
const string GForceLCDName = "G Force - Text Panel"; // Replace with your LCD panel's name

float default_friction = 100f; // friction value to return to.
float drift_friction = 5f; // friction value when drifting.

List&lt;IMyTerminalBlock&gt; wheels = new List&lt;IMyTerminalBlock&gt;();

IMyShipController shipController;
IMyTimerBlock pressTimerBlock;
IMyTimerBlock releaseTimerBlock;
IMyTextPanel gForceLCD;

bool wPressed = false;

double previousVelocity = 0;
double elapsedTime = 0;
const double updateInterval = 0.1; // Set the update interval in seconds

double currentSpeed = 0.0;
int tickCounter = 0;

Program()
{
    GridTerminalSystem.GetBlocksOfType&lt;IMyMotorSuspension&gt;(wheels);

    shipController = GridTerminalSystem.GetBlockWithName(CockpitTag) as IMyShipController;
    pressTimerBlock = GridTerminalSystem.GetBlockWithName("Your Press Timer Block Name") as IMyTimerBlock;
    releaseTimerBlock = GridTerminalSystem.GetBlockWithName("Your Release Timer Block Name") as IMyTimerBlock;
    gForceLCD = GridTerminalSystem.GetBlockWithName(GForceLCDName) as IMyTextPanel;

    Runtime.UpdateFrequency = UpdateFrequency.Update1; // Set the script to update every 1 tick
}

void Main(string argument)
{
    bool forwardPressed = IsForwardInputPressed();

    if (argument.Equals("NOS", StringComparison.OrdinalIgnoreCase) &amp;&amp; forwardPressed)
    {
        OverrideWheels();
    }
    else if (argument.Equals("FRICTION", StringComparison.OrdinalIgnoreCase))
    {
        ActivateDriftSystem();
    }
    else if (argument.Equals("RACE", StringComparison.OrdinalIgnoreCase))
    {
        SetSteeringAngle(42.0f); // Set race steering angle to 42 degrees
        ResetFriction();
    }

    tickCounter++;

    currentSpeed = shipController.GetShipSpeed();

    UpdateGForces(); // Call the G-Force calculation function
}

void UpdateGForces()
{
    if (gForceLCD != null &amp;&amp; shipController != null)
    {
        double currentVelocity = shipController.GetShipVelocities().LinearVelocity.Length();

        double deltaVelocity = currentVelocity - previousVelocity;
        elapsedTime += Runtime.TimeSinceLastRun.TotalSeconds;

        if (elapsedTime &gt;= updateInterval)
        {
            if (elapsedTime &gt; 0.1)
            {
                double acceleration = deltaVelocity / elapsedTime;
                double gForce = acceleration / 9.81;
                gForceLCD.WriteText($"{Math.Round(gForce, 2)} g");
            }

            elapsedTime = 0;
            previousVelocity = currentVelocity;
        }
    }
}

bool IsForwardInputPressed()
{
    // Replace this with your logic to check if the forward input is pressed.
    return true;
}

void OverrideWheels()
{
    List&lt;IMyMotorSuspension&gt; suspensionWheels = new List&lt;IMyMotorSuspension&gt;();
    GridTerminalSystem.GetBlockGroupWithName(WHEEL_GROUP_NAME)?.GetBlocksOfType(suspensionWheels);

    if (suspensionWheels.Count &gt; 0)
    {
        float nosValue = CalculateNOSValue(); // Calculate your NOS value here

        foreach (var wheel in suspensionWheels)
        {
            wheel.PropulsionOverride = nosValue;
            wheel.Friction = nosValue * 100;
        }
    }
}

float CalculateNOSValue()
{
    // Calculate and return the desired NOS value
    return 4.37f; // Example value - replace with your calculation
}

void SetSteeringAngle(float angle)
{
    List&lt;IMyMotorSuspension&gt; suspensionWheels = new List&lt;IMyMotorSuspension&gt;();
    GridTerminalSystem.GetBlockGroupWithName(WHEEL_GROUP_NAME)?.GetBlocksOfType(suspensionWheels);

    if (suspensionWheels.Count &gt; 0)
    {
        foreach (var wheel in suspensionWheels)
        {
            wheel.MaxSteerAngle = MathHelper.ToRadians(angle);
        }
    }
}

void ActivateDriftSystem()
{
    foreach (IMyMotorSuspension wheel in wheels)
    {
        if (wheel.CustomName.Contains("rear wheel")) // Adjust this condition based on your setup
        {
            wheel.Friction = drift_friction;
        }
    }
}

void ResetFriction()
{
    foreach (IMyMotorSuspension wheel in wheels)
    {
        wheel.Friction = default_friction;
    }
}
</Program>
              <Storage />
              <DefaultRunArgument>FRICTION</DefaultRunArgument>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>73735089700766590</EntityId>
              <Min x="0" y="6" z="-1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.330555558" y="0.2" z="0.46" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Drift Signal Extender - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>4</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>113555893121430706</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>1000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>99945035351961517</EntityId>
              <Min x="-1" y="6" z="0" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Hinge Timer</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>5</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>106162952202293382</EntityId>
              <Min x="1" y="6" z="0" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Placeholder Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>6</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots />
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallWindow1x2Slope</SubtypeName>
              <EntityId>143138249705098262</EntityId>
              <Min x="-2" y="7" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>120084739416500826</EntityId>
              <Min x="-3" y="6" z="2" />
              <BlockOrientation Forward="Up" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>85720042829170012</EntityId>
              <Min x="3" y="6" z="2" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="1" y="5" z="7" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-1" y="5" z="7" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>138714246435219017</EntityId>
              <Min x="2" y="6" z="2" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>79234057989287378</EntityId>
              <Min x="-2" y="6" z="2" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>139390817743568307</EntityId>
              <Min x="0" y="4" z="8" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>102380148478855269</EntityId>
              <Min x="-1" y="4" z="8" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>133616474798862683</EntityId>
              <Min x="1" y="4" z="8" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>78234719121701821</EntityId>
              <Min x="-1" y="4" z="11" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>110726294551646380</EntityId>
              <Min x="0" y="4" z="10" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>121049279197489335</EntityId>
              <Min x="1" y="4" z="9" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>120548218304725761</EntityId>
              <Min x="1" y="4" z="10" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>132272203278451875</EntityId>
              <Min x="1" y="4" z="11" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>113430766539654195</EntityId>
              <Min x="0" y="4" z="12" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Gyro">
              <SubtypeName>SmallBlockGyro</SubtypeName>
              <EntityId>134338130179028264</EntityId>
              <Min x="0" y="5" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Flip Gyroscope</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>137028376274681933</EntityId>
              <Min x="2" y="5" z="-1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Seat - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>113549220875615496</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>109961961981931370</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff_On</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>137028376274681933</BlockEntityId>
                      <GroupName>LCDS</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_On</Action>
                      <BlockEntityId>86217439633411108</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Park</Action>
                      <BlockEntityId>124860209506544151</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>2000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>101695868035624787</EntityId>
              <Min x="-2" y="5" z="-1" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Seat 2 - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>13</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_Off</Action>
                      <BlockEntityId>130544504407675692</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>1</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_Off</Action>
                      <BlockEntityId>109961961981931370</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>2</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalGroup">
                      <Action>OnOff_Off</Action>
                      <GridEntityId>0</GridEntityId>
                      <BlockEntityId>101695868035624787</BlockEntityId>
                      <GroupName>LCDS</GroupName>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>3</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff_Off</Action>
                      <BlockEntityId>86217439633411108</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>4</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>Park</Action>
                      <BlockEntityId>124860209506544151</BlockEntityId>
                    </Data>
                  </Slot>
                  <Slot>
                    <Index>5</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>124904416514470595</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MyProgrammableBlock">
              <SubtypeName>SmallProgrammableBlock</SubtypeName>
              <EntityId>84824197529493872</EntityId>
              <Min x="0" y="6" z="9" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyMultiTextPanelComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_MultiTextPanelComponent">
                      <TextPanelsContents>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <ContentType>SCRIPT</ContentType>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <CustomizeScripts>true</CustomizeScripts>
                          <ScriptBackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                        <MySerializedTextPanelData>
                          <ChangeInterval>0</ChangeInterval>
                          <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                          <FontSize>1</FontSize>
                          <ShowText>NONE</ShowText>
                          <FontColor>
                            <PackedValue>4294967295</PackedValue>
                            <X>255</X>
                            <Y>255</Y>
                            <Z>255</Z>
                            <R>255</R>
                            <G>255</G>
                            <B>255</B>
                            <A>255</A>
                          </FontColor>
                          <BackgroundColor>
                            <PackedValue>4278190080</PackedValue>
                            <X>0</X>
                            <Y>0</Y>
                            <Z>0</Z>
                            <R>0</R>
                            <G>0</G>
                            <B>0</B>
                            <A>255</A>
                          </BackgroundColor>
                          <CurrentShownTexture>0</CurrentShownTexture>
                          <SelectedScript />
                          <TextPadding>2</TextPadding>
                          <ScriptBackgroundColor>
                            <PackedValue>4288108544</PackedValue>
                            <X>0</X>
                            <Y>88</Y>
                            <Z>151</Z>
                            <R>0</R>
                            <G>88</G>
                            <B>151</B>
                            <A>255</A>
                          </ScriptBackgroundColor>
                          <ScriptForegroundColor>
                            <PackedValue>4294962611</PackedValue>
                            <X>179</X>
                            <Y>237</Y>
                            <Z>255</Z>
                            <R>179</R>
                            <G>237</G>
                            <B>255</B>
                            <A>255</A>
                          </ScriptForegroundColor>
                          <Sprites>
                            <Length>0</Length>
                          </Sprites>
                        </MySerializedTextPanelData>
                      </TextPanelsContents>
                    </Component>
                  </ComponentData>
                  <ComponentData>
                    <TypeId>MyModStorageComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_ModStorageComponent">
                      <Storage>
                        <dictionary>
                          <item>
                            <Key>74de02b3-27f9-4960-b1c4-27351f2b06d1</Key>
                            <Value>[Seat Entry/Exit Activated Timers - General Config]
Group name=SEAT
Draw title screen=true
</Value>
                          </item>
                        </dictionary>
                      </Storage>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <CustomName>SEAT - Programmable Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>6</NumberInGrid>
              <Enabled>true</Enabled>
              <Program>/*
/ //// / Whip's Seat Entry/Exit Activated Timers / //// /

INSTRUCTIONS
1. Make a group named "SEAT" (all caps) that contains all the seats 
   that you want to add entry/exit timers to.
   - You can also include turrets and custom turret controllers in this group.
2. Place this script in a programmable block
3. Open the custom data of each seat in the "SEAT" group 
   and set the names of the timers that should be triggered. Leave
   them blank if you don't want a timer triggered.
4. Recompile the code to process *any* Custom Data or group changes.

- Whiplash141
*/

const string VERSION = "1.1.2";
const string DATE = "2023/03/02";

const string INI_SECTION_GENERAL = "Seat Entry/Exit Activated Timers - General Config";
const string INI_KEY_GROUP_NAME = "Group name";
const string INI_KEY_DRAW_SCREENS = "Draw title screen";

const string INI_SECTION_TIMER = "Seat Entry/Exit Activated Timers - {0} Config";
const string INI_KEY_TIMER_ENTRY = "Timer to trigger on entry";
const string INI_KEY_TIMER_EXIT = "Timer to trigger on exit";

bool _drawTitleScreen = true;
bool _isSetup = false;
string _groupName = "SEAT";
MyIni _ini = new MyIni();
StringBuilder _bobTheBuilder = new StringBuilder(128);
String _errorString = "";
List&lt;StatusTimer&gt; _statusTimers = new List&lt;StatusTimer&gt;();
SeatStatusTimersScreenManager _screenManager;
int _seatCount = 0;
int _turretCount = 0;
int _ctcCount = 0;

public interface IControllable
{
    bool IsUnderControl { get; }
    string CustomData { get; set; }
    string Type { get; }
}

public abstract class CustomDataBlock : IControllable
{
    private IMyTerminalBlock _block;
    
    public CustomDataBlock(IMyTerminalBlock block) { _block = block; }
    
    public abstract bool IsUnderControl { get; }
    
    public abstract string Type { get; }
    
    public string CustomData
    {
        get { return _block.CustomData; }
        set { _block.CustomData = value; }
    }
} 

public class ShipControlBlock : CustomDataBlock
{
    private IMyShipController _ctrl;
    
    public ShipControlBlock(IMyShipController controller) : base(controller) { _ctrl = controller; }
    
    public override bool IsUnderControl =&gt; _ctrl.IsUnderControl;
    
    public override string Type =&gt; "Seat";
}

public class TurretBlock : CustomDataBlock
{
    private IMyLargeTurretBase _turret;
    
    public TurretBlock(IMyLargeTurretBase turret) : base(turret) { _turret = turret; }
    
    public override bool IsUnderControl =&gt; _turret.IsUnderControl;
    
    public override string Type =&gt; "Turret";
}

public class CustomTurretControlBlock : CustomDataBlock
{
    private IMyTurretControlBlock _tcb;
    
    public CustomTurretControlBlock(IMyTurretControlBlock tcb) : base(tcb) { _tcb = tcb; }
    
    public override bool IsUnderControl =&gt; _tcb.IsUnderControl;
    
    public override string Type =&gt; "CTC";
}

class StatusTimer
{
    IControllable _controller;
    IMyTimerBlock _entryTimer;
    IMyTimerBlock _exitTimer;
    MyIni _ini = new MyIni();
    Program _p;

    bool _firstRun = true;
    bool _wasControlled = false;

    public StatusTimer(IControllable controller, Program program)
    {
        _p = program;
        _controller = controller;
        string entryTimerName = "", exitTimerName = "";
        _ini.Clear();
        string sectionName = string.Format(INI_SECTION_TIMER, _controller.Type);
        if (_ini.TryParse(_controller.CustomData))
        {
            entryTimerName = _ini.Get(sectionName, INI_KEY_TIMER_ENTRY).ToString();
            exitTimerName = _ini.Get(sectionName, INI_KEY_TIMER_EXIT).ToString();
            _entryTimer = program.GridTerminalSystem.GetBlockWithName(entryTimerName) as IMyTimerBlock;
            _exitTimer = program.GridTerminalSystem.GetBlockWithName(exitTimerName) as IMyTimerBlock;
        }
        _ini.Set(sectionName, INI_KEY_TIMER_ENTRY, entryTimerName);
        _ini.Set(sectionName, INI_KEY_TIMER_EXIT, exitTimerName);

        string output = _ini.ToString();
        if (output != _controller.CustomData)
        {
            _controller.CustomData = output;
        }
    }

    public void Update()
    {
        bool controlled = _controller.IsUnderControl;
        if (!_firstRun &amp;&amp; controlled != _wasControlled) // New state
        {
            if (controlled)
            {
                if (_entryTimer != null)
                    _entryTimer.Trigger();
            }
            else
            {
                if (_exitTimer != null)
                    _exitTimer.Trigger();
            }
        }

        _wasControlled = controlled;
        _firstRun = false;
    }
}

Program()
{
    Runtime.UpdateFrequency = UpdateFrequency.Update10 | UpdateFrequency.Update100;
    _screenManager = new SeatStatusTimersScreenManager(VERSION, this);
    GetBlocks();
}

void Main(string arg, UpdateType updateSource)
{
    if ((updateSource &amp; UpdateType.Update10) != 0)
    {
        foreach (var x in _statusTimers)
        {
            x.Update();
        }

        if (_drawTitleScreen)
        {
            _screenManager.Draw();
        }
    }
    
    if ((updateSource &amp; UpdateType.Update100) != 0)
    {        
        Echo($"Seat Entry Activated\nTimers Running...\n(Version {VERSION} - {DATE})\n");
        if (_isSetup)
        {
            Echo($"Found:\n - {_seatCount} status seats\n - {_turretCount} turrets\n - {_ctcCount} custom turret controllers\n");
        }
        else
        {
            Echo(_errorString);
        }
        Echo($"Recompile to process block group\nand Custom Data changes.");
        _screenManager.RestartDraw();
    }
}

void GetBlocks()
{
    _ini.Clear();
    _bobTheBuilder.Clear();
    if (_ini.TryParse(Me.CustomData))
    {
        _groupName = _ini.Get(INI_SECTION_GENERAL, INI_KEY_GROUP_NAME).ToString(_groupName);
        _drawTitleScreen = _ini.Get(INI_SECTION_GENERAL, INI_KEY_DRAW_SCREENS).ToBoolean(_drawTitleScreen);
    }
    _ini.Set(INI_SECTION_GENERAL, INI_KEY_GROUP_NAME, _groupName);
    _ini.Set(INI_SECTION_GENERAL, INI_KEY_DRAW_SCREENS, _drawTitleScreen);

    string output = _ini.ToString();
    if (output != Me.CustomData)
    {
        Me.CustomData = output;
    }

    _seatCount = 0;
    _turretCount = 0;
    _ctcCount = 0;
    _statusTimers.Clear();
    var group = GridTerminalSystem.GetBlockGroupWithName(_groupName);
    if (group == null)
    {
        _isSetup = false;
        _bobTheBuilder.Append($"ERROR: No group named\n'{_groupName}' found!\n");
    }
    else
    {
        group.GetBlocksOfType&lt;IMyTerminalBlock&gt;(null, CollectBlocks);
        _isSetup = true;
    }
    _errorString = _bobTheBuilder.ToString();
}

bool CollectBlocks(IMyTerminalBlock b)
{
    var sc = b as IMyShipController;
    if (sc != null)
    {
        _statusTimers.Add(new StatusTimer(new ShipControlBlock(sc), this));
        _seatCount++;
    }
    
    var turret = b as IMyLargeTurretBase;
    if (turret != null)
    {
        _statusTimers.Add(new StatusTimer(new TurretBlock(turret), this));
        _turretCount++;
    }
    
    var tcb = b as IMyTurretControlBlock;
    if (tcb != null)
    {
        _statusTimers.Add(new StatusTimer(new CustomTurretControlBlock(tcb), this));
        _ctcCount++;
    }
    return false;
}

class SeatStatusTimersScreenManager
{
    readonly Color _topBarColor = new Color(25, 25, 25);
    readonly Color _white = new Color(200, 200, 200);
    readonly Color _black = Color.Black;

    const TextAlignment Center = TextAlignment.CENTER;
    const SpriteType Texture = SpriteType.TEXTURE;
    const float TitleBarHeightPx = 64f;
    const float TextSize = 1.5f;
    const float BaseTextHeightPx = 37f;
    
    const float ChairSpriteScale = 1f;
    const float TimerSpriteScale = 1f;
    
    const string Font = "Debug";
    const string TitleFormat = "SEAT - v{0}";
    readonly string _titleText;

    Program _program;

    int _idx = 0;
    readonly Vector2 _chairPos = new Vector2(-100, 40);
    readonly Vector2 _enterTimerPos = new Vector2(100, -20);
    readonly Vector2 _exitTimerPos = new Vector2(100, 100);
    
    static readonly Color _timerBlinkColor = new Color(0, 100, 255, 255);
    static readonly Color _timerIdleColor = new Color(0, 255, 0);

    struct AnimationParams
    {
        public readonly Color TimerEnterColor;
        public readonly Color TimerExitColor;
        public readonly bool DrawPerson;

        public AnimationParams(bool drawPerson, Color enterColor, Color exitEolor)
        {
            DrawPerson = drawPerson;
            TimerEnterColor = enterColor;
            TimerExitColor = exitEolor;
        }
    }

    AnimationParams[] _animSequence = new AnimationParams[] {
        // Enter
        new AnimationParams(true, _timerIdleColor, _timerIdleColor),
        new AnimationParams(true, _timerBlinkColor, _timerIdleColor),
        new AnimationParams(true, _timerBlinkColor, _timerIdleColor),
        new AnimationParams(true, _timerIdleColor, _timerIdleColor),
        new AnimationParams(true, _timerIdleColor, _timerIdleColor),
        new AnimationParams(true, _timerIdleColor, _timerIdleColor),
        new AnimationParams(true, _timerIdleColor, _timerIdleColor),
        new AnimationParams(true, _timerIdleColor, _timerIdleColor),
        // Exit
        new AnimationParams(false, _timerIdleColor, _timerIdleColor),
        new AnimationParams(false, _timerIdleColor, _timerBlinkColor),
        new AnimationParams(false, _timerIdleColor, _timerBlinkColor),
        new AnimationParams(false, _timerIdleColor, _timerIdleColor),
        new AnimationParams(false, _timerIdleColor, _timerIdleColor),
        new AnimationParams(false, _timerIdleColor, _timerIdleColor),
        new AnimationParams(false, _timerIdleColor, _timerIdleColor),
        new AnimationParams(false, _timerIdleColor, _timerIdleColor),
    };

    bool _clearSpriteCache = false;
    IMyTextSurface _surface = null;

    public SeatStatusTimersScreenManager(string version, Program program)
    {
        _titleText = string.Format(TitleFormat, version);
        _program = program;
        _surface = _program.Me.GetSurface(0);
    }

    public void Draw()
    {
        if (_surface == null)
            return;

        AnimationParams anim = _animSequence[_idx];
        _idx = ++_idx % _animSequence.Length;

        SetupDrawSurface(_surface);

        Vector2 screenCenter = _surface.TextureSize * 0.5f;
        Vector2 scale = _surface.SurfaceSize / 512f;
        float minScale = Math.Min(scale.X, scale.Y);

        using (var frame = _surface.DrawFrame())
        {
            if (_clearSpriteCache)
            {
                frame.Add(new MySprite());
            }

            DrawChair(frame, screenCenter + _chairPos * minScale, anim.DrawPerson, ChairSpriteScale * minScale);
            DrawTimer(frame, screenCenter + _enterTimerPos * minScale, anim.TimerEnterColor, TimerSpriteScale * minScale);
            DrawTimer(frame, screenCenter + _exitTimerPos * minScale, anim.TimerExitColor, TimerSpriteScale * minScale);

            DrawTitleBar(_surface, frame, minScale);
        }
    }

    public void RestartDraw()
    {
        _clearSpriteCache = !_clearSpriteCache;
    }

    #region Draw Helper Functions
    void DrawTitleBar(IMyTextSurface _surface, MySpriteDrawFrame frame, float scale)
    {
        float titleBarHeight = scale * TitleBarHeightPx;
        Vector2 topLeft = 0.5f * (_surface.TextureSize - _surface.SurfaceSize);
        Vector2 titleBarSize = new Vector2(_surface.TextureSize.X, titleBarHeight);
        Vector2 titleBarPos = topLeft + new Vector2(_surface.TextureSize.X * 0.5f, titleBarHeight * 0.5f);
        Vector2 titleBarTextPos = topLeft + new Vector2(_surface.TextureSize.X * 0.5f, 0.5f * (titleBarHeight - scale * BaseTextHeightPx));

        // Title bar
        frame.Add(new MySprite(
            Texture,
            "SquareSimple",
            titleBarPos,
            titleBarSize,
            _topBarColor,
            null,
            Center));

        // Title bar text
        frame.Add(new MySprite(
            SpriteType.TEXT,
            _titleText,
            titleBarTextPos,
            null,
            _white,
            Font,
            Center,
            TextSize * scale));
    }

    void SetupDrawSurface(IMyTextSurface _surface)
    {
        _surface.ScriptBackgroundColor = _black;
        _surface.ContentType = ContentType.SCRIPT;
        _surface.Script = "";
    }

    public void DrawChair(MySpriteDrawFrame frame, Vector2 centerPos, bool drawPerson, float scale = 1f)
    {
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0f,50f)*scale+centerPos, new Vector2(100f,30f)*scale, _white, null, TextAlignment.CENTER, 0f)); // seat chair
        frame.Add(new MySprite(SpriteType.TEXTURE, "Circle", new Vector2(50f,50f)*scale+centerPos, new Vector2(30f,30f)*scale, _white, null, TextAlignment.CENTER, 0f)); // seat front
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(-63f,-24f)*scale+centerPos, new Vector2(30f,150f)*scale, _white, null, TextAlignment.CENTER, -0.1745f)); // seat back
        frame.Add(new MySprite(SpriteType.TEXTURE, "Circle", new Vector2(-50f,50f)*scale+centerPos, new Vector2(30f,30f)*scale, _white, null, TextAlignment.CENTER, 0f)); // seat corner
        frame.Add(new MySprite(SpriteType.TEXTURE, "Circle", new Vector2(-76f,-98f)*scale+centerPos, new Vector2(30f,30f)*scale, _white, null, TextAlignment.CENTER, 0f)); // head rest
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0f,85f)*scale+centerPos, new Vector2(10f,30f)*scale, _white, null, TextAlignment.CENTER, 0f)); // stilt
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0f,105f)*scale+centerPos, new Vector2(100f,10f)*scale, _white, null, TextAlignment.CENTER, 0f)); // base
        frame.Add(new MySprite(SpriteType.TEXTURE, "Circle", new Vector2(50f,105f)*scale+centerPos, new Vector2(10f,10f)*scale, _white, null, TextAlignment.CENTER, 0f)); // base corner right
        frame.Add(new MySprite(SpriteType.TEXTURE, "Circle", new Vector2(-50f,105f)*scale+centerPos, new Vector2(10f,10f)*scale, _white, null, TextAlignment.CENTER, 0f)); // base corner left
        if (!drawPerson)
        {
            return;
        }
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(26f,13f)*scale+centerPos, new Vector2(90f,10f)*scale, _white, null, TextAlignment.CENTER, 0f)); // person thigh
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(-25f,-43f)*scale+centerPos, new Vector2(10f,120f)*scale, _white, null, TextAlignment.CENTER, -0.1745f)); // person spine
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(87f,45f)*scale+centerPos, new Vector2(10f,80f)*scale, _white, null, TextAlignment.CENTER, -0.5236f)); // person leg
        frame.Add(new MySprite(SpriteType.TEXTURE, "Circle", new Vector2(-41f,-135f)*scale+centerPos, new Vector2(50f,50f)*scale, _white, null, TextAlignment.CENTER, 0f)); // person head
    }
    
    public void DrawTimer(MySpriteDrawFrame frame, Vector2 centerPos, Color blinkColor, float scale = 1f)
    {
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0f,0f)*scale+centerPos, new Vector2(100f,100f)*scale, _white, null, TextAlignment.CENTER, 0f)); // block
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(20f,0f)*scale+centerPos, new Vector2(10f,100f)*scale, _black, null, TextAlignment.CENTER, 0f)); // right stripe
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0f,20f)*scale+centerPos, new Vector2(50f,10f)*scale, _black, null, TextAlignment.CENTER, 0f)); // bottom stripe
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0f,-20f)*scale+centerPos, new Vector2(50f,10f)*scale, _black, null, TextAlignment.CENTER, 0f)); // top stripe
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(-20f,0f)*scale+centerPos, new Vector2(10f,100f)*scale, _black, null, TextAlignment.CENTER, 0f)); // left stripe
        frame.Add(new MySprite(SpriteType.TEXTURE, "SquareSimple", new Vector2(0f,0f)*scale+centerPos, new Vector2(30f,30f)*scale, blinkColor, null, TextAlignment.CENTER, 0f)); // blinky bit
    }

    #endregion
}

</Program>
              <Storage />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>91228202518520350</EntityId>
              <Min x="2" y="5" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Right Door Close - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>10</NumberInGrid>
              <Enabled>false</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>132852538502231738</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>113549220875615496</EntityId>
              <Min x="-2" y="5" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Left Door Close - Timer Block </CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>11</NumberInGrid>
              <Enabled>false</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>117466815768932745</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>134484482495176998</EntityId>
              <Min x="-1" y="6" z="1" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>120924501998226269</EntityId>
              <Min x="1" y="6" z="1" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>124201471329159246</EntityId>
              <Min x="-2" y="5" z="9" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Right Door - Offset Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>9</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>3.6</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>1.3</Falloff>
              <Intensity>5</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>OffsetLight</SubtypeName>
              <EntityId>117208994048726709</EntityId>
              <Min x="2" y="5" z="9" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Left Door - Offset Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>8</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>3.6</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <Falloff>1.3</Falloff>
              <Intensity>5</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0.5</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>102693746688457437</EntityId>
              <Min x="-1" y="6" z="10" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Low Off - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>14</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>143418618258137809</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>133531310712744753</EntityId>
              <Min x="1" y="6" z="10" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>High Off - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>15</NumberInGrid>
              <Enabled>false</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>OnOff</Action>
                      <BlockEntityId>143470402419869971</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_InteriorLight">
              <SubtypeName>SmallBlockLight_1corner</SubtypeName>
              <EntityId>130544504407675692</EntityId>
              <Min x="0" y="7" z="4" />
              <BlockOrientation Forward="Backward" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <CustomName>Interior Light</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>3</NumberInGrid>
              <Enabled>false</Enabled>
              <Radius>4</Radius>
              <ReflectorRadius>120</ReflectorRadius>
              <ColorGreen>0.58431375</ColorGreen>
              <ColorBlue>0.184313729</ColorBlue>
              <Falloff>2</Falloff>
              <Intensity>3</Intensity>
              <BlinkIntervalSeconds>0</BlinkIntervalSeconds>
              <BlinkLenght>10</BlinkLenght>
              <BlinkOffset>0</BlinkOffset>
              <Offset>0</Offset>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>EngineerPlushie</SubtypeName>
              <EntityId>132139167353033282</EntityId>
              <Min x="-1" y="6" z="7" />
              <BlockOrientation Forward="Backward" Up="Up" />
              <ColorMaskHSV x="0.330555558" y="0.2" z="0.46" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TextPanel">
              <SubtypeName>SmallBlockCorner_LCD_Flat_2</SubtypeName>
              <EntityId>86217439633411108</EntityId>
              <Min x="2" y="6" z="7" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ComponentContainer>
                <Components>
                  <ComponentData>
                    <TypeId>MyLcdSurfaceComponent</TypeId>
                    <Component xsi:type="MyObjectBuilder_LcdSurfaceComponent">
                      <SelectedRotationIndex>0</SelectedRotationIndex>
                      <TextPanelContent>
                        <ChangeInterval>0</ChangeInterval>
                        <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
                        <FontSize>1</FontSize>
                        <ShowText>NONE</ShowText>
                        <FontColor>
                          <PackedValue>4294967295</PackedValue>
                          <X>255</X>
                          <Y>255</Y>
                          <Z>255</Z>
                          <R>255</R>
                          <G>255</G>
                          <B>255</B>
                          <A>255</A>
                        </FontColor>
                        <BackgroundColor>
                          <PackedValue>4278190080</PackedValue>
                          <X>0</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>0</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </BackgroundColor>
                        <CurrentShownTexture>0</CurrentShownTexture>
                        <ContentType>SCRIPT</ContentType>
                        <SelectedScript>TSS_EnergyHydrogen</SelectedScript>
                        <TextPadding>2</TextPadding>
                        <CustomizeScripts>true</CustomizeScripts>
                        <ScriptBackgroundColor>
                          <PackedValue>4278190080</PackedValue>
                          <X>0</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>0</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </ScriptBackgroundColor>
                        <ScriptForegroundColor>
                          <PackedValue>4278190335</PackedValue>
                          <X>255</X>
                          <Y>0</Y>
                          <Z>0</Z>
                          <R>255</R>
                          <G>0</G>
                          <B>0</B>
                          <A>255</A>
                        </ScriptForegroundColor>
                        <Sprites>
                          <Length>0</Length>
                        </Sprites>
                      </TextPanelContent>
                    </Component>
                  </ComponentData>
                </Components>
              </ComponentContainer>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <Description />
              <Title>Title</Title>
              <AccessFlag>READ_AND_WRITE_FACTION</AccessFlag>
              <ChangeInterval>0</ChangeInterval>
              <Font Type="MyObjectBuilder_FontDefinition" Subtype="Debug" />
              <FontSize>1</FontSize>
              <PublicDescription />
              <PublicTitle>Public title</PublicTitle>
              <ShowText>NONE</ShowText>
              <FontColor xsi:nil="true" />
              <BackgroundColor xsi:nil="true" />
              <CurrentShownTexture>0</CurrentShownTexture>
              <TextPadding>2</TextPadding>
              <Version>0</Version>
              <ScriptBackgroundColor xsi:nil="true" />
              <ScriptForegroundColor xsi:nil="true" />
              <Sprites>
                <Length>0</Length>
              </Sprites>
              <SelectedRotationIndex xsi:nil="true" />
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerSquare</SubtypeName>
              <Min x="-2" y="5" z="7" />
              <BlockOrientation Forward="Forward" Up="Down" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorCornerSquare</SubtypeName>
              <Min x="2" y="5" z="7" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_TimerBlock">
              <SubtypeName>TimerBlockSmall</SubtypeName>
              <EntityId>89618685401824215</EntityId>
              <Min x="0" y="5" z="6" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Passenger Seat - Timer Block</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>25</NumberInGrid>
              <Enabled>true</Enabled>
              <Toolbar>
                <ToolbarType>Character</ToolbarType>
                <SelectedSlot xsi:nil="true" />
                <Slots>
                  <Slot>
                    <Index>0</Index>
                    <Item />
                    <Data xsi:type="MyObjectBuilder_ToolbarItemTerminalBlock">
                      <Action>TriggerNow</Action>
                      <BlockEntityId>91228202518520350</BlockEntityId>
                    </Data>
                  </Slot>
                </Slots>
                <SlotsGamepad />
              </Toolbar>
              <Delay>10000</Delay>
              <CurrentTime>0</CurrentTime>
              <IsCountingDown>false</IsCountingDown>
              <Silent>false</Silent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>134708187156671454</EntityId>
              <Min x="0" y="6" z="5" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>131667668729856913</EntityId>
              <Min x="0" y="6" z="4" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>108309994943758515</EntityId>
              <Min x="0" y="6" z="13" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>119248826120203148</EntityId>
              <Min x="-1" y="6" z="13" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>106047680790361485</EntityId>
              <Min x="1" y="6" z="13" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
              <SubtypeName>SmallProjector</SubtypeName>
              <EntityId>102304603304895442</EntityId>
              <Min x="1" y="5" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Left Door - Projector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <ProjectedGrids>
                <MyObjectBuilder_CubeGrid>
                  <SubtypeName />
                  <EntityId>104773207677912571</EntityId>
                  <PersistentFlags>CastShadows InScene</PersistentFlags>
                  <Name>104773207677912571</Name>
                  <PositionAndOrientation>
                    <Position x="0" y="0" z="0" />
                    <Forward x="0.389276117" y="0.112930827" z="0.9141722" />
                    <Up x="-0.3506546" y="-0.899561465" z="0.260442942" />
                    <Orientation>
                      <X>0.957274735</X>
                      <Y>-0.201770052</Y>
                      <Z>-0.182772547</Z>
                      <W>0.09750956</W>
                    </Orientation>
                  </PositionAndOrientation>
                  <LocalPositionAndOrientation xsi:nil="true" />
                  <GridSizeEnum>Small</GridSizeEnum>
                  <CubeBlocks>
                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                      <SubtypeName>SmallWindow1x1FlatInv</SubtypeName>
                      <EntityId>132387021161618201</EntityId>
                      <Min x="1" y="8" z="18" />
                      <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
                      <SkinSubtypeId>Weldless</SkinSubtypeId>
                    </MyObjectBuilder_CubeBlock>
                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                      <SubtypeName>SmallWindow1x2SideLeftInv</SubtypeName>
                      <EntityId>142112674269626548</EntityId>
                      <Min x="1" y="8" z="16" />
                      <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
                      <SkinSubtypeId>Weldless</SkinSubtypeId>
                    </MyObjectBuilder_CubeBlock>
                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                      <SubtypeName>SmallWindow1x2SideRightInv</SubtypeName>
                      <EntityId>106980277854274949</EntityId>
                      <Min x="1" y="8" z="19" />
                      <BlockOrientation Forward="Backward" Up="Up" />
                      <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
                      <SkinSubtypeId>Weldless</SkinSubtypeId>
                    </MyObjectBuilder_CubeBlock>
                  </CubeBlocks>
                  <LinearVelocity x="-0.00915967" y="-0.007308344" z="0.000424097758" />
                  <AngularVelocity x="-0.0264527742" y="-0.01908715" z="-0.0611554235" />
                  <DisplayName>Left nsx winder</DisplayName>
                  <DestructibleBlocks>true</DestructibleBlocks>
                  <CreatePhysics>false</CreatePhysics>
                  <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                  <IsRespawnGrid>false</IsRespawnGrid>
                  <LocalCoordSys>0</LocalCoordSys>
                  <TargetingTargets />
                </MyObjectBuilder_CubeGrid>
              </ProjectedGrids>
              <ProjectionOffset>
                <X>-1</X>
                <Y>-2</Y>
                <Z>8</Z>
              </ProjectionOffset>
              <ProjectionRotation>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </ProjectionRotation>
              <KeepProjection>false</KeepProjection>
              <ShowOnlyBuildable>false</ShowOnlyBuildable>
              <InstantBuildingEnabled>false</InstantBuildingEnabled>
              <MaxNumberOfProjections>5</MaxNumberOfProjections>
              <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
              <ProjectionsRemaining>0</ProjectionsRemaining>
              <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
              <Scale>1</Scale>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Projector">
              <SubtypeName>SmallProjector</SubtypeName>
              <EntityId>79775549899503497</EntityId>
              <Min x="-1" y="5" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <CustomName>Right Door - Projector</CustomName>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>2</NumberInGrid>
              <Enabled>true</Enabled>
              <ProjectedGrids>
                <MyObjectBuilder_CubeGrid>
                  <SubtypeName />
                  <EntityId>79682691467251680</EntityId>
                  <PersistentFlags>CastShadows InScene</PersistentFlags>
                  <Name>79682691467251680</Name>
                  <PositionAndOrientation>
                    <Position x="0" y="0" z="0" />
                    <Forward x="0.40247345" y="0.132284582" z="0.90582335" />
                    <Up x="0.356111825" y="0.8889398" z="-0.288045764" />
                    <Orientation>
                      <X>0.2083009</X>
                      <Y>0.95368886</Y>
                      <Z>-0.1101854</Z>
                      <W>-0.186942533</W>
                    </Orientation>
                  </PositionAndOrientation>
                  <LocalPositionAndOrientation xsi:nil="true" />
                  <GridSizeEnum>Small</GridSizeEnum>
                  <CubeBlocks>
                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                      <SubtypeName>SmallWindow1x1FlatInv</SubtypeName>
                      <EntityId>138175489459013378</EntityId>
                      <Min x="-1" y="8" z="18" />
                      <BlockOrientation Forward="Backward" Up="Up" />
                      <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
                      <SkinSubtypeId>Weldless</SkinSubtypeId>
                    </MyObjectBuilder_CubeBlock>
                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                      <SubtypeName>SmallWindow1x2SideRightInv</SubtypeName>
                      <EntityId>113907248880979481</EntityId>
                      <Min x="-1" y="8" z="16" />
                      <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
                      <SkinSubtypeId>Weldless</SkinSubtypeId>
                    </MyObjectBuilder_CubeBlock>
                    <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
                      <SubtypeName>SmallWindow1x2SideLeftInv</SubtypeName>
                      <EntityId>112732650855997389</EntityId>
                      <Min x="-1" y="8" z="19" />
                      <BlockOrientation Forward="Backward" Up="Up" />
                      <ColorMaskHSV x="0" y="-0.8" z="-0.45" />
                      <SkinSubtypeId>Weldless</SkinSubtypeId>
                    </MyObjectBuilder_CubeBlock>
                  </CubeBlocks>
                  <LinearVelocity x="-0.0005867267" y="-0.00194847875" z="0.0006405171" />
                  <AngularVelocity x="0.0023865127" y="0.0002453191" z="0.005072418" />
                  <DisplayName>Right nsx Winder</DisplayName>
                  <DestructibleBlocks>true</DestructibleBlocks>
                  <CreatePhysics>false</CreatePhysics>
                  <EnableSmallToLargeConnections>false</EnableSmallToLargeConnections>
                  <IsRespawnGrid>false</IsRespawnGrid>
                  <LocalCoordSys>0</LocalCoordSys>
                  <TargetingTargets />
                </MyObjectBuilder_CubeGrid>
              </ProjectedGrids>
              <ProjectionOffset>
                <X>1</X>
                <Y>-2</Y>
                <Z>8</Z>
              </ProjectionOffset>
              <ProjectionRotation>
                <X>0</X>
                <Y>0</Y>
                <Z>0</Z>
              </ProjectionRotation>
              <KeepProjection>false</KeepProjection>
              <ShowOnlyBuildable>false</ShowOnlyBuildable>
              <InstantBuildingEnabled>false</InstantBuildingEnabled>
              <MaxNumberOfProjections>5</MaxNumberOfProjections>
              <MaxNumberOfBlocks>200</MaxNumberOfBlocks>
              <ProjectionsRemaining>0</ProjectionsRemaining>
              <GetOwnershipFromProjector>false</GetOwnershipFromProjector>
              <Scale>1</Scale>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="2" y="6" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorBlock</SubtypeName>
              <Min x="-2" y="6" z="12" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>78674478949764802</EntityId>
              <Min x="2" y="4" z="12" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelHeavy</SubtypeName>
              <EntityId>126658401252842191</EntityId>
              <Min x="-2" y="4" z="12" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>112682565811133500</EntityId>
              <Min x="0" y="6" z="6" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MergeBlock">
              <SubtypeName>SmallShipSmallMergeBlock</SubtypeName>
              <EntityId>108358121102302384</EntityId>
              <Min x="-2" y="5" z="8" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>80857529321565611</EntityId>
              <Min x="-3" y="5" z="5" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>99301867735061400</EntityId>
              <Min x="-4" y="6" z="4" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLight</SubtypeName>
              <EntityId>137561892214821925</EntityId>
              <Min x="-3" y="7" z="3" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCorner</SubtypeName>
              <Min x="-3" y="6" z="5" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCornerBase</SubtypeName>
              <Min x="-3" y="6" z="4" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelTipLight</SubtypeName>
              <EntityId>81913260472921597</EntityId>
              <Min x="-3" y="5" z="7" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>120797134041310233</EntityId>
              <Min x="-3" y="5" z="3" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelTipLight</SubtypeName>
              <EntityId>89730536720500284</EntityId>
              <Min x="-3" y="5" z="8" />
              <BlockOrientation Forward="Left" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>SmallHingeHead</SubtypeName>
              <EntityId>129083622055393916</EntityId>
              <Min x="-3" y="6" z="3" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ParentEntityId>123421320439428749</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>133691137387606469</EntityId>
              <Min x="-3" y="4" z="5" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>126074816299862384</EntityId>
              <Min x="-4" y="6" z="3" />
              <BlockOrientation Forward="Up" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>143071737744662183</EntityId>
              <Min x="-3" y="5" z="6" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>142237316481350574</EntityId>
              <Min x="-3" y="5" z="4" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="6" z="7" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLight</SubtypeName>
              <EntityId>114590608625202970</EntityId>
              <Min x="-3" y="7" z="4" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-3" y="6" z="8" />
              <BlockOrientation Forward="Down" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>109666511272879659</EntityId>
              <Min x="-3" y="4" z="6" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelTipLight</SubtypeName>
              <EntityId>141301459439842043</EntityId>
              <Min x="-3" y="6" z="6" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLight</SubtypeName>
              <EntityId>108059222819890996</EntityId>
              <Min x="-3" y="4" z="8" />
              <BlockOrientation Forward="Left" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>103184999754640399</EntityId>
              <Min x="-3" y="4" z="3" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>78693270571279751</EntityId>
              <Min x="-3" y="4" z="7" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>113778752319068021</EntityId>
              <Min x="-3" y="4" z="4" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideBasePanelLightInv</SubtypeName>
              <EntityId>118306139974133253</EntityId>
              <Min x="3" y="7" z="3" />
              <BlockOrientation Forward="Forward" Up="Left" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>97583224762694349</EntityId>
              <Min x="3" y="4" z="3" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>129043349724515758</EntityId>
              <Min x="3" y="4" z="7" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="6" z="8" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLightInv</SubtypeName>
              <EntityId>95640200345506777</EntityId>
              <Min x="3" y="4" z="8" />
              <BlockOrientation Forward="Right" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MergeBlock">
              <SubtypeName>SmallShipSmallMergeBlock</SubtypeName>
              <EntityId>142186893959780714</EntityId>
              <Min x="2" y="5" z="8" />
              <BlockOrientation Forward="Backward" Up="Left" />
              <ColorMaskHSV x="0.1" y="-0.32" z="0.23" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>127053192832254755</EntityId>
              <Min x="3" y="5" z="4" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelTipLight</SubtypeName>
              <EntityId>98970442967618214</EntityId>
              <Min x="3" y="5" z="7" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>142761934728738944</EntityId>
              <Min x="3" y="5" z="3" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>111733806830890732</EntityId>
              <Min x="3" y="4" z="4" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorSlopedSidePanelLight</SubtypeName>
              <EntityId>139150825211613519</EntityId>
              <Min x="4" y="6" z="4" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelTipLight</SubtypeName>
              <EntityId>98551853691214723</EntityId>
              <Min x="3" y="6" z="6" />
              <BlockOrientation Forward="Right" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>95960275712384663</EntityId>
              <Min x="3" y="5" z="6" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelLight</SubtypeName>
              <EntityId>95217303178210455</EntityId>
              <Min x="3" y="5" z="5" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCornerBase</SubtypeName>
              <Min x="3" y="6" z="4" />
              <BlockOrientation Forward="Forward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>100861427289219657</EntityId>
              <Min x="3" y="4" z="5" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedPanelTipLight</SubtypeName>
              <EntityId>103772938729710542</EntityId>
              <Min x="3" y="5" z="8" />
              <BlockOrientation Forward="Right" Up="Down" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>78227436128635062</EntityId>
              <Min x="4" y="6" z="3" />
              <BlockOrientation Forward="Down" Up="Backward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmor2x1SlopedSideTipPanelLightInv</SubtypeName>
              <EntityId>131833357015783384</EntityId>
              <Min x="3" y="7" z="4" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>SmallHingeHead</SubtypeName>
              <EntityId>115603843752862579</EntityId>
              <Min x="3" y="6" z="3" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ParentEntityId>79021400707925321</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>123299240676921784</EntityId>
              <Min x="3" y="4" z="6" />
              <BlockOrientation Forward="Backward" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="3" y="6" z="7" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlopedCorner</SubtypeName>
              <Min x="3" y="6" z="5" />
              <BlockOrientation Forward="Down" Up="Right" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <Skeleton>
            <BoneInfo>
              <BonePosition x="-5" y="10" z="29" />
              <BoneOffset x="131" y="136" z="119" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="-5" y="9" z="28" />
              <BoneOffset x="135" y="149" z="108" />
            </BoneInfo>
            <BoneInfo>
              <BonePosition x="6" y="10" z="29" />
              <BoneOffset x="71" y="142" z="123" />
            </BoneInfo>
          </Skeleton>
          <LinearVelocity x="-2.548882" y="-2.33231974" z="-10.2001781" />
          <AngularVelocity x="-0.479397327" y="0.877316952" z="-0.133092344" />
          <XMirroxPlane x="0" y="4" z="0" />
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Left Hinges</Name>
              <Blocks>
                <Vector3I>
                  <X>2</X>
                  <Y>6</Y>
                  <Z>3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Right Hinges</Name>
              <Blocks>
                <Vector3I>
                  <X>-2</X>
                  <Y>6</Y>
                  <Z>3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Stop lights</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>6</Y>
                  <Z>-3</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>6</Y>
                  <Z>-3</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>6</Y>
                  <Z>-3</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 1</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 2</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 3</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 4</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 5</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 6</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 7</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 1</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 2</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 3</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 4</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 5</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 6</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 7</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 8</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Rear Wheels 9</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Front Wheels 8</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 1</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 2</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 3</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 4</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 5</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 6</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 7</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 8</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Wheels 9</Name>
              <Blocks>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>10</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>1</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Door Close Timer Blocks</Name>
              <Blocks>
                <Vector3I>
                  <X>2</X>
                  <Y>5</Y>
                  <Z>12</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>5</Y>
                  <Z>12</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>LCDS</Name>
              <Blocks>
                <Vector3I>
                  <X>0</X>
                  <Y>6</Y>
                  <Z>7</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Popout Light Hinges</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>6</Y>
                  <Z>12</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>6</Y>
                  <Z>12</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>SEAT</Name>
              <Blocks>
                <Vector3I>
                  <X>2</X>
                  <Y>5</Y>
                  <Z>5</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>6</Y>
                  <Z>9</Z>
                </Vector3I>
                <Vector3I>
                  <X>-2</X>
                  <Y>5</Y>
                  <Z>-1</Z>
                </Vector3I>
                <Vector3I>
                  <X>2</X>
                  <Y>5</Y>
                  <Z>-1</Z>
                </Vector3I>
                <Vector3I>
                  <X>0</X>
                  <Y>5</Y>
                  <Z>6</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>5</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Right Door Merge Blocks</Name>
              <Blocks>
                <Vector3I>
                  <X>-2</X>
                  <Y>5</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>-1</X>
                  <Y>5</Y>
                  <Z>8</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
            <MyObjectBuilder_BlockGroup>
              <Name>Left Door Merge Blocks</Name>
              <Blocks>
                <Vector3I>
                  <X>2</X>
                  <Y>5</Y>
                  <Z>8</Z>
                </Vector3I>
                <Vector3I>
                  <X>1</X>
                  <Y>5</Y>
                  <Z>8</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <Handbrake>true</Handbrake>
          <DisplayName>CHKN CO NSX</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>105463870927154925</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24994.577826118395" y="26563.248240167675" z="233560.82164884711" />
            <Forward x="0.4482148" y="-0.8866629" z="0.113720536" />
            <Up x="0.5994719" y="0.392503053" z="0.697549045" />
            <Orientation>
              <X>0.120510325</X>
              <Y>0.7364357</Y>
              <Z>0.5377971</Z>
              <W>-0.392318726</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>SmallHingeHead</SubtypeName>
              <EntityId>119764506996169359</EntityId>
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ParentEntityId>141397618814734177</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>123421320439428749</EntityId>
              <Min x="-1" y="0" z="0" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>129083622055393916</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0.166666687</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>1.57079637</MaxAngle>
              <CurrentAngle>1.57079637</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>2433475.75</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.6519966" y="-1.65855885" z="-12.6614017" />
          <AngularVelocity x="-0.4471231" y="0.8196125" z="-0.104461327" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="0" z="0" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-1" y="0" z="0" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Right Hinges</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>0</Y>
                  <Z>0</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <DisplayName>Small Grid 6716</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>78662746933567834</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24992.633750230714" y="26562.261838569146" z="233557.89257537128" />
            <Forward x="-0.425369263" y="-0.0570159256" z="-0.9032227" />
            <Up x="0.8450301" y="0.332287222" z="-0.418939233" />
            <Orientation>
              <X>-0.148749769</X>
              <Y>0.162056789</Y>
              <Z>-0.558327854</Z>
              <W>0.7999257</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>119044392593571637</EntityId>
              <ColorMaskHSV x="0.2777778" y="-0.9558823" z="0.06666672" />
              <SkinSubtypeId>Silver_Armor</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.7595557" y="-1.71570683" z="-12.216238" />
          <AngularVelocity x="-13.3183956" y="-4.80254364" z="7.16961145" />
          <DisplayName>Small Grid 4658</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>78645487444552345</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24994.185160569003" y="26562.303258839631" z="233563.58962391369" />
            <Forward x="0.235618621" y="-0.9660566" z="-0.105917513" />
            <Up x="-0.6675506" y="-0.24008669" z="0.704794347" />
            <Orientation>
              <X>-0.3270584</X>
              <Y>0.5831587</Y>
              <Z>0.716293335</Z>
              <W>0.199706271</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>85253002342629107</EntityId>
              <ColorMaskHSV x="0.2777778" y="-0.9558823" z="0.06666672" />
              <SkinSubtypeId>Silver_Armor</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-1.03513134" y="-1.8834877" z="-12.3975487" />
          <AngularVelocity x="-84.23616" y="-30.5623741" z="86.79883" />
          <DisplayName>Small Grid 8675</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>85105113247446053</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24990.895727729723" y="26561.11472385603" z="233558.75585294867" />
            <Forward x="0.6928728" y="-0.602051" z="0.396814585" />
            <Up x="0.6451622" y="0.271857858" z="-0.7140441" />
            <Orientation>
              <X>-0.601450443</X>
              <Y>-0.5802281</Y>
              <Z>0.0482538976</Z>
              <W>0.547050536</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>SmallHingeHead</SubtypeName>
              <EntityId>104093195778429176</EntityId>
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ParentEntityId>74849020813427008</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>99682150093174027</EntityId>
              <Min x="-1" y="0" z="0" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="-1" z="0" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="0.4" />
              <SkinSubtypeId>Neon_Colorable_Surface</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>119953649155646598</EntityId>
              <Min x="-1" y="-1" z="1" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.5390802" y="-1.52989924" z="-12.2418842" />
          <AngularVelocity x="-0.4069605" y="0.7031163" z="-0.163878411" />
          <DisplayName>Small Grid 9500</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>92174131840028785</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24991.538549995348" y="26561.352350885449" z="233558.06337858344" />
            <Forward x="0.6370425" y="-0.6557579" z="0.405165076" />
            <Up x="0.6808607" y="0.232257843" z="-0.694611549" />
            <Orientation>
              <X>-0.6193346</X>
              <Y>-0.5648072</Y>
              <Z>0.017197758</Z>
              <W>0.545088768</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>SmallHingeHead</SubtypeName>
              <EntityId>77560601690692283</EntityId>
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ParentEntityId>88077567057964439</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorHalfPanelLight</SubtypeName>
              <EntityId>114785413470646506</EntityId>
              <Min x="-1" y="0" z="0" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallBlockArmorSlope2Tip</SubtypeName>
              <Min x="-1" y="1" z="0" />
              <BlockOrientation Forward="Left" Up="Forward" />
              <ColorMaskHSV x="0" y="-0.8" z="0.4" />
              <SkinSubtypeId>Neon_Colorable_Surface</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_CubeBlock">
              <SubtypeName>SmallArmorPanelLight</SubtypeName>
              <EntityId>113862616054479574</EntityId>
              <Min x="-1" y="1" z="1" />
              <BlockOrientation Forward="Left" Up="Up" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.629343748" y="-1.6160394" z="-12.40754" />
          <AngularVelocity x="-0.3413533" y="0.555420041" z="-0.104910076" />
          <DisplayName>Small Grid 628</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>120657764310214023</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24993.256598091051" y="26562.760637933789" z="233562.24178434515" />
            <Forward x="-0.448147535" y="0.886686563" z="-0.113802165" />
            <Up x="0.604292631" y="0.394282639" z="0.6923667" />
            <Orientation>
              <X>0.5363529</X>
              <Y>0.394239128</Y>
              <Z>-0.123224542</Z>
              <W>0.7360141</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedRotor">
              <SubtypeName>SmallHingeHead</SubtypeName>
              <EntityId>134462508831720606</EntityId>
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <ParentEntityId>136161473145202531</ParentEntityId>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_MotorAdvancedStator">
              <SubtypeName>SmallHinge</SubtypeName>
              <EntityId>79021400707925321</EntityId>
              <Min x="-1" y="0" z="0" />
              <BlockOrientation Forward="Down" Up="Forward" />
              <ColorMaskHSV x="0" y="0.15" z="0.25" />
              <SkinSubtypeId>Weldless</SkinSubtypeId>
              <Owner>144115188075855942</Owner>
              <BuiltBy>144115188075855942</BuiltBy>
              <ShareMode>Faction</ShareMode>
              <ShowOnHUD>false</ShowOnHUD>
              <ShowInTerminal>true</ShowInTerminal>
              <ShowInToolbarConfig>true</ShowInToolbarConfig>
              <ShowInInventory>true</ShowInInventory>
              <NumberInGrid>1</NumberInGrid>
              <Enabled>true</Enabled>
              <TopBlockId>115603843752862579</TopBlockId>
              <ShareInertiaTensor>false</ShareInertiaTensor>
              <SafetyDetach>5</SafetyDetach>
              <RotorEntityId xsi:nil="true" />
              <WeldedEntityId xsi:nil="true" />
              <TargetVelocity>0.166666687</TargetVelocity>
              <MinAngle>0</MinAngle>
              <MaxAngle>1.57079637</MaxAngle>
              <CurrentAngle>1.57079637</CurrentAngle>
              <LimitsActive>true</LimitsActive>
              <RotorLock>false</RotorLock>
              <Torque>2433475.75</Torque>
              <BrakingTorque>0</BrakingTorque>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.248224914" y="-1.41120231" z="-12.2057886" />
          <AngularVelocity x="-0.423864126" y="0.8475868" z="-0.04892028" />
          <ConveyorLines>
            <MyObjectBuilder_ConveyorLine>
              <StartPosition x="0" y="0" z="0" />
              <StartDirection>Left</StartDirection>
              <EndPosition x="-1" y="0" z="0" />
              <EndDirection>Right</EndDirection>
              <Sections />
              <ConveyorLineType>SMALL_LINE</ConveyorLineType>
            </MyObjectBuilder_ConveyorLine>
          </ConveyorLines>
          <BlockGroups>
            <MyObjectBuilder_BlockGroup>
              <Name>Left Hinges</Name>
              <Blocks>
                <Vector3I>
                  <X>-1</X>
                  <Y>0</Y>
                  <Z>0</Z>
                </Vector3I>
              </Blocks>
            </MyObjectBuilder_BlockGroup>
          </BlockGroups>
          <DisplayName>Small Grid 8828</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>72065370622847282</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24990.515608735263" y="26561.029820211323" z="233559.41755024312" />
            <Forward x="-0.5334109" y="0.7708319" z="-0.348268628" />
            <Up x="-0.8129518" y="-0.353466451" z="0.462786466" />
            <Orientation>
              <X>0.5565131</X>
              <Y>-0.127117738</Y>
              <Z>0.6058271</Z>
              <W>0.5541731</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheelmirrored</SubtypeName>
              <EntityId>103413192555911942</EntityId>
              <ColorMaskHSV x="0.2777778" y="-0.9558823" z="0.06666672" />
              <SkinSubtypeId>Silver_Armor</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="-0.139620572" y="-1.41038013" z="-12.837739" />
          <AngularVelocity x="-6.17508554" y="-1.65862679" z="3.03511357" />
          <DisplayName>Small Grid 2908</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
        <CubeGrid>
          <SubtypeName />
          <EntityId>121371125051950419</EntityId>
          <PersistentFlags>CastShadows InScene</PersistentFlags>
          <PositionAndOrientation>
            <Position x="24996.078409032016" y="26563.14494108257" z="233561.55808559374" />
            <Forward x="0.6881832" y="0.167653084" z="0.7059015" />
            <Up x="0.6659332" y="0.2402317" z="-0.7062736" />
            <Orientation>
              <X>0.542605042</X>
              <Y>0.7473489</Y>
              <Z>-0.2923422</Z>
              <W>-0.248164088</W>
            </Orientation>
          </PositionAndOrientation>
          <LocalPositionAndOrientation xsi:nil="true" />
          <GridSizeEnum>Small</GridSizeEnum>
          <CubeBlocks>
            <MyObjectBuilder_CubeBlock xsi:type="MyObjectBuilder_Wheel">
              <SubtypeName>SmallRealWheel</SubtypeName>
              <EntityId>97571824882095247</EntityId>
              <ColorMaskHSV x="0.2777778" y="-0.9558823" z="0.06666672" />
              <SkinSubtypeId>Silver_Armor</SkinSubtypeId>
              <BuiltBy>144115188075855942</BuiltBy>
              <YieldLastComponent>false</YieldLastComponent>
            </MyObjectBuilder_CubeBlock>
          </CubeBlocks>
          <LinearVelocity x="0.412179649" y="-0.9860259" z="-12.6375351" />
          <AngularVelocity x="-85.4874" y="-30.9395866" z="89.10942" />
          <DisplayName>Small Grid 8115</DisplayName>
          <DestructibleBlocks>true</DestructibleBlocks>
          <IsRespawnGrid>false</IsRespawnGrid>
          <LocalCoordSys>0</LocalCoordSys>
          <TargetingTargets />
        </CubeGrid>
      </CubeGrids>
      <EnvironmentType>None</EnvironmentType>
      <WorkshopId>0</WorkshopId>
      <OwnerSteamId>76561197979296883</OwnerSteamId>
      <Points>0</Points>
    </ShipBlueprint>
  </ShipBlueprints>
</Definitions>